{
  "swagger": "2.0",
  "info": {
    "title": "App Center Client",
    "description": "Microsoft Visual Studio App Center API",
    "version": "preview"
  },
  "host": "api.appcenter.ms",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v0.1/users/{user_id}/devices/register": {
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Registers a user for an existing device",
        "operationId": "devices_registerUserForDevice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "The ID of the user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The device info.",
            "required": true,
            "schema": {
              "description": "The information for a single iOS device",
              "required": [
                "udid",
                "model"
              ],
              "properties": {
                "udid": {
                  "description": "The Unique Device IDentifier of the device",
                  "type": "string"
                },
                "model": {
                  "description": "The model identifier of the device, in the format iDeviceM,N",
                  "type": "string"
                },
                "os_build": {
                  "description": "The build number of the last known OS version running on the device",
                  "type": "string"
                },
                "os_version": {
                  "description": "The last known OS version running on the device",
                  "type": "string"
                },
                "serial": {
                  "description": "The device's serial number. Always empty or undefined at present.",
                  "type": "string"
                },
                "imei": {
                  "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                  "type": "string"
                },
                "owner_id": {
                  "description": "The user ID of the device owner.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "The information for a single iOS device",
              "required": [
                "udid",
                "model",
                "device_name",
                "os_build",
                "os_version",
                "status"
              ],
              "properties": {
                "udid": {
                  "description": "The Unique Device IDentifier of the device",
                  "type": "string"
                },
                "model": {
                  "description": "The model identifier of the device, in the format iDeviceM,N",
                  "type": "string"
                },
                "device_name": {
                  "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                  "type": "string"
                },
                "full_device_name": {
                  "description": "A combination of the device model name and the owner name.",
                  "type": "string"
                },
                "os_build": {
                  "description": "The last known OS version running on the device",
                  "type": "string"
                },
                "os_version": {
                  "description": "The last known OS version running on the device",
                  "type": "string"
                },
                "serial": {
                  "description": "The device's serial number. Always empty or undefined at present.",
                  "type": "string"
                },
                "imei": {
                  "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                  "type": "string"
                },
                "owner_id": {
                  "description": "The user ID of the device owner.",
                  "type": "string"
                },
                "status": {
                  "description": "The provisioning status of the device.",
                  "type": "string"
                },
                "registered_at": {
                  "description": "Timestamp of when the device was registered in ISO format.",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "<b>not_found</b>: The user or the device can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/notifications/emailSettings": {
      "get": {
        "tags": [
          "alerting"
        ],
        "description": "Get Default email notification settings for the user",
        "operationId": "notifications_getUserEmailSettings",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Alerting Default Email Settings of the user",
              "type": "object",
              "allOf": [
                {
                  "description": "Generic result for any alerting API operation",
                  "required": [
                    "request_id"
                  ],
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "description": "Unique request identifier for tracking",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "enabled",
                    "settings"
                  ],
                  "properties": {
                    "eTag": {
                      "description": "The ETag of the entity",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "Allows to forcefully disable emails on app or user level",
                      "type": "boolean"
                    },
                    "userId": {
                      "description": "The unique id (UUID) of the user",
                      "type": "string"
                    },
                    "settings": {
                      "description": "The settings the user has for the app",
                      "type": "array",
                      "items": {
                        "description": "Event Setting",
                        "required": [
                          "event_type",
                          "value"
                        ],
                        "type": "object",
                        "properties": {
                          "event_type": {
                            "description": "Event Name",
                            "enum": [
                              "crash_newCrashGroupCreated"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "Frequency of event",
                            "enum": [
                              "Disabled",
                              "Individual",
                              "Daily",
                              "DailyAndIndividual",
                              "Default"
                            ],
                            "type": "string"
                          },
                          "default_value": {
                            "description": "Default frequency of event",
                            "enum": [
                              "Disabled",
                              "Individual",
                              "Daily",
                              "DailyAndIndividual"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Alerting service error",
              "allOf": [
                {
                  "description": "Generic result for any alerting API operation",
                  "required": [
                    "request_id"
                  ],
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "description": "Unique request identifier for tracking",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                      "enum": [
                        400,
                        404,
                        409,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/metadata/optimizely": {
      "get": {
        "tags": [
          "account"
        ],
        "operationId": "Users_getUserMetadata",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "userId": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/invitations/orgs/{invitation_token}/reject": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Rejects a pending organization invitation",
        "operationId": "orgInvitations_reject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "invitation_token",
            "description": "The app invitation token that was sent to the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/invitations/orgs/{invitation_token}/accept": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Accepts a pending organization invitation for the specified user",
        "operationId": "orgInvitations_accept",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "invitation_token",
            "description": "The app invitation token that was sent to the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/invitations/distribution_groups/accept": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Accepts all pending invitations to distribution groups for the specified user",
        "operationId": "distributionGroupInvitations_acceptAll",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/invitations/apps/{invitation_token}/reject": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Rejects a pending invitation for the specified user",
        "operationId": "appInvitations_reject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "invitation_token",
            "description": "The app invitation token that was sent to the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/invitations/apps/{invitation_token}/accept": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Accepts a pending invitation for the specified user",
        "operationId": "appInvitations_accept",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "invitation_token",
            "description": "The app invitation token that was sent to the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/export/serviceConnections": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Gets all service connections of the service type for GDPR export.",
        "operationId": "sharedconnection_Connections",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "SharedConnectionResponse",
                "required": [
                  "id",
                  "serviceType",
                  "credentialType"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "description": "id of the shared connection",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  },
                  "credentialType": {
                    "description": "the type of the credential",
                    "enum": [
                      "credentials",
                      "certificate"
                    ],
                    "type": "string"
                  },
                  "isValid": {
                    "description": "whether the credentials are valid or not",
                    "type": "boolean"
                  },
                  "is2FA": {
                    "description": "if the account is a 2FA account or not",
                    "type": "boolean"
                  }
                },
                "discriminator": "serviceType"
              }
            }
          },
          "default": {
            "description": "bad_request: proper details are not provided for connection in body.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/dsr/export/{token}/cancel": {
      "post": {
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_CancelExportRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Unique request ID (GUID)",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "description": "Data subject right cancel export request has been accepted.",
            "schema": {
              "required": [
                "token",
                "createdAt"
              ],
              "type": "object",
              "properties": {
                "token": {
                  "format": "uuid",
                  "description": "Unique request identifier",
                  "type": "string"
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "ISO 8601 format timestamp of when request was created.",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Link to get details about the cancel export.",
                "type": "string"
              }
            }
          },
          "503": {
            "description": "Cancel export request cannot be processed yet.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/dsr/export/{token}": {
      "get": {
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_ExportStatusRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Unique request ID (GUID)",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Data subject right export request status successfully retrieved.",
            "schema": {
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "sasUrl": {
                  "description": "Azure Storage shared access signature (SAS) URL for exported user data.",
                  "type": "string"
                },
                "sasUrlExpired": {
                  "description": "Whether Azure Storage shared access signature (SAS) URL has expired or not.",
                  "type": "boolean"
                },
                "status": {
                  "description": "Status of data subject right request",
                  "enum": [
                    "None",
                    "Created",
                    "Queued",
                    "InProgress",
                    "Completed",
                    "Failed"
                  ],
                  "type": "string"
                },
                "message": {
                  "description": "explanation message of the status",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/dsr/export": {
      "post": {
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_ExportRequest",
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Data subject right export request has been accepted.",
            "schema": {
              "required": [
                "token",
                "createdAt"
              ],
              "type": "object",
              "properties": {
                "token": {
                  "format": "uuid",
                  "description": "Unique request identifier",
                  "type": "string"
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "ISO 8601 format timestamp of when request was created.",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Link to get details about the export.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/dsr/delete/{token}/cancel": {
      "post": {
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_CancelDeleteRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Unique request ID (GUID)",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "email",
            "schema": {
              "required": [
                "email"
              ],
              "type": "object",
              "properties": {
                "email": {
                  "description": "Email used for cancel delete with x-authz-bypass headers",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Data subject right cancel delete request has been accepted.",
            "schema": {
              "required": [
                "token",
                "createdAt"
              ],
              "type": "object",
              "properties": {
                "token": {
                  "format": "uuid",
                  "description": "Unique request identifier",
                  "type": "string"
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "ISO 8601 format timestamp of when request was created.",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Link to get details about the cancel delete.",
                "type": "string"
              }
            }
          },
          "503": {
            "description": "Cancel delete request cannot be processed yet.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/dsr/delete/{token}": {
      "get": {
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_DeleteStatusRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Unique request ID (GUID)",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "email",
            "description": "Email used for delete with x-authz-bypass headers",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Data subject right delete request status successfully retrieved.",
            "schema": {
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "sasUrl": {
                  "description": "Azure Storage shared access signature (SAS) URL for exported user data.",
                  "type": "string"
                },
                "sasUrlExpired": {
                  "description": "Whether Azure Storage shared access signature (SAS) URL has expired or not.",
                  "type": "boolean"
                },
                "status": {
                  "description": "Status of data subject right request",
                  "enum": [
                    "None",
                    "Created",
                    "Queued",
                    "InProgress",
                    "Completed",
                    "Failed"
                  ],
                  "type": "string"
                },
                "message": {
                  "description": "explanation message of the status",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/dsr/delete": {
      "post": {
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_DeleteRequest",
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Data subject right delete request has been accepted.",
            "schema": {
              "required": [
                "token",
                "createdAt"
              ],
              "type": "object",
              "properties": {
                "token": {
                  "format": "uuid",
                  "description": "Unique request identifier",
                  "type": "string"
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "ISO 8601 format timestamp of when request was created.",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Link to get details about the delete.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/devices/{device_udid}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns the device details.",
        "operationId": "devices_deviceDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "device_udid",
            "description": "The UDID of the device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "The information for a single iOS device",
              "required": [
                "udid",
                "model",
                "device_name",
                "os_build",
                "os_version",
                "status"
              ],
              "properties": {
                "udid": {
                  "description": "The Unique Device IDentifier of the device",
                  "type": "string"
                },
                "model": {
                  "description": "The model identifier of the device, in the format iDeviceM,N",
                  "type": "string"
                },
                "device_name": {
                  "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                  "type": "string"
                },
                "full_device_name": {
                  "description": "A combination of the device model name and the owner name.",
                  "type": "string"
                },
                "os_build": {
                  "description": "The last known OS version running on the device",
                  "type": "string"
                },
                "os_version": {
                  "description": "The last known OS version running on the device",
                  "type": "string"
                },
                "serial": {
                  "description": "The device's serial number. Always empty or undefined at present.",
                  "type": "string"
                },
                "imei": {
                  "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                  "type": "string"
                },
                "owner_id": {
                  "description": "The user ID of the device owner.",
                  "type": "string"
                },
                "status": {
                  "description": "The provisioning status of the device.",
                  "type": "string"
                },
                "registered_at": {
                  "description": "Timestamp of when the device was registered in ISO format.",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "<b>forbidden</b>: The user is not allowed to view someone else's device.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "<b>not_found</b>: The user or device can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Removes an existing device from a user",
        "operationId": "devices_removeUserDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "device_udid",
            "description": "The UDID of the device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "<b>forbidden</b>: The user is not allowed to delete someone else's device.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "<b>not_found</b>: The user or the device can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user/devices": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns all devices associated with the given user.",
        "operationId": "devices_userDevicesList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "The information for a single iOS device",
                "required": [
                  "udid",
                  "model",
                  "device_name",
                  "os_build",
                  "os_version",
                  "status"
                ],
                "properties": {
                  "udid": {
                    "description": "The Unique Device IDentifier of the device",
                    "type": "string"
                  },
                  "model": {
                    "description": "The model identifier of the device, in the format iDeviceM,N",
                    "type": "string"
                  },
                  "device_name": {
                    "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                    "type": "string"
                  },
                  "full_device_name": {
                    "description": "A combination of the device model name and the owner name.",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "The last known OS version running on the device",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "The last known OS version running on the device",
                    "type": "string"
                  },
                  "serial": {
                    "description": "The device's serial number. Always empty or undefined at present.",
                    "type": "string"
                  },
                  "imei": {
                    "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                    "type": "string"
                  },
                  "owner_id": {
                    "description": "The user ID of the device owner.",
                    "type": "string"
                  },
                  "status": {
                    "description": "The provisioning status of the device.",
                    "type": "string"
                  },
                  "registered_at": {
                    "description": "Timestamp of when the device was registered in ISO format.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "<b>forbidden</b>: The user is not allowed to view someone else's devices.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/user": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the user profile data",
        "operationId": "users_get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "email",
                "name",
                "origin"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the user",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the user",
                  "type": "string"
                },
                "can_change_password": {
                  "description": "User is required to send an old password in order to change the password.",
                  "type": "boolean"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "permissions": {
                  "description": "The permissions the user has for the app",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                },
                "origin": {
                  "description": "The creation origin of this user",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Updates the user profile and returns the updated user data",
        "operationId": "users_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "The data for the created user",
            "required": true,
            "schema": {
              "properties": {
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "email",
                "name",
                "origin"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the user",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the user",
                  "type": "string"
                },
                "can_change_password": {
                  "description": "User is required to send an old password in order to change the password.",
                  "type": "boolean"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "permissions": {
                  "description": "The permissions the user has for the app",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                },
                "origin": {
                  "description": "The creation origin of this user",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/tester/apps": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return a list of applications that the user has tester permission to with the latest release for each.",
        "operationId": "releases_listTesterApps",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "description": "The unique ID (UUID) of the app",
                    "type": "string"
                  },
                  "release": {
                    "allOf": [
                      {
                        "description": "Response for getting a list of releases in a distribution group",
                        "required": [
                          "id",
                          "version",
                          "enabled",
                          "uploaded_at",
                          "short_version",
                          "mandatory_update"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "ID identifying this unique release.",
                            "type": "integer"
                          },
                          "version": {
                            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                            "type": "string"
                          },
                          "origin": {
                            "description": "The release's origin",
                            "enum": [
                              "hockeyapp",
                              "appcenter"
                            ],
                            "type": "string"
                          },
                          "short_version": {
                            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                            "type": "string"
                          },
                          "mandatory_update": {
                            "description": "A boolean which determines whether the release is a mandatory update or not.",
                            "type": "boolean"
                          },
                          "uploaded_at": {
                            "description": "UTC time in ISO 8601 format of the uploaded time.",
                            "type": "string"
                          },
                          "enabled": {
                            "description": "This value determines the whether a release currently is enabled or disabled.",
                            "type": "boolean"
                          },
                          "is_external_build": {
                            "description": "This value determines if a release is external or not.",
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "required": [
                          "size"
                        ],
                        "type": "object",
                        "properties": {
                          "size": {
                            "description": "The release's size in bytes.",
                            "type": "integer"
                          },
                          "install_url": {
                            "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                            "type": "string"
                          },
                          "release_notes": {
                            "description": "The release's release notes.",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  },
                  "name": {
                    "description": "The app's name.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The app's display name.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the app",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "A URL to the app's icon.",
                    "type": "string"
                  },
                  "os": {
                    "description": "The app's os.",
                    "type": "string"
                  },
                  "owner": {
                    "description": "The information about the app's owner",
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The unique id (UUID) of the owner",
                        "type": "string"
                      },
                      "avatar_url": {
                        "description": "The avatar URL of the owner",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The owner's display name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The owner's email address",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that used to identify the owner",
                        "type": "string"
                      },
                      "type": {
                        "description": "The owner type. Can either be 'org' or 'user'",
                        "enum": [
                          "org",
                          "user"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/sdk/apps/{app_secret}/releases/{release_hash}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.",
        "operationId": "releases_getLatestByHash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "app_secret",
            "description": "The secret of the target application",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_hash",
            "description": "The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "udid",
            "description": "When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If called with a specific `release_hash` return the app's 'display_name'' and 'buildIdentifier'. If 'release_hash' is 'latest' return the full release details of the latest release that was distributed to the current user (from all the distribution groups).",
            "schema": {
              "description": "Details of an uploaded release",
              "required": [
                "id",
                "app_name",
                "app_display_name",
                "uploaded_at",
                "version",
                "short_version",
                "app_icon_url",
                "enabled"
              ],
              "properties": {
                "id": {
                  "description": "ID identifying this unique release.",
                  "type": "integer"
                },
                "app_name": {
                  "description": "The app's name (extracted from the uploaded release).",
                  "type": "string"
                },
                "app_display_name": {
                  "description": "The app's display name.",
                  "type": "string"
                },
                "app_os": {
                  "description": "The app's OS.",
                  "type": "string"
                },
                "version": {
                  "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                  "type": "string"
                },
                "origin": {
                  "description": "The release's origin",
                  "enum": [
                    "hockeyapp",
                    "appcenter"
                  ],
                  "type": "string"
                },
                "short_version": {
                  "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                  "type": "string"
                },
                "release_notes": {
                  "description": "The release's release notes.",
                  "type": "string"
                },
                "provisioning_profile_name": {
                  "description": "The release's provisioning profile name.",
                  "type": "string"
                },
                "provisioning_profile_type": {
                  "description": "The type of the provisioning profile for the requested app version.",
                  "enum": [
                    "adhoc",
                    "enterprise",
                    "other"
                  ],
                  "type": "string"
                },
                "provisioning_profile_expiry_date": {
                  "description": "expiration date of provisioning profile in UTC format.",
                  "type": "string"
                },
                "is_provisioning_profile_syncing": {
                  "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                  "type": "boolean"
                },
                "size": {
                  "description": "The release's size in bytes.",
                  "type": "integer"
                },
                "min_os": {
                  "description": "The release's minimum required operating system.",
                  "type": "string"
                },
                "device_family": {
                  "description": "The release's device family.",
                  "type": "string"
                },
                "android_min_api_level": {
                  "description": "The release's minimum required Android API level.",
                  "type": "string"
                },
                "bundle_identifier": {
                  "description": "The identifier of the apps bundle.",
                  "type": "string"
                },
                "package_hashes": {
                  "description": "Hashes for the packages.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "fingerprint": {
                  "description": "MD5 checksum of the release binary.",
                  "type": "string"
                },
                "uploaded_at": {
                  "description": "UTC time in ISO 8601 format of the uploaded time.",
                  "type": "string"
                },
                "download_url": {
                  "description": "The URL that hosts the binary for this release.",
                  "type": "string"
                },
                "app_icon_url": {
                  "description": "A URL to the app's icon.",
                  "type": "string"
                },
                "install_url": {
                  "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                  "type": "string"
                },
                "destination_type": {
                  "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                  "enum": [
                    "group",
                    "store",
                    "tester"
                  ],
                  "type": "string"
                },
                "distribution_groups": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution group.",
                        "type": "string"
                      }
                    }
                  }
                },
                "distribution_stores": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution store.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution store.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                        "enum": [
                          "intune",
                          "googleplay",
                          "apple",
                          "none"
                        ],
                        "type": "string"
                      },
                      "publishing_status": {
                        "description": "publishing status of the release in the store.",
                        "type": "string"
                      }
                    }
                  }
                },
                "destinations": {
                  "description": "A list of distribution groups or stores.",
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution group.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution group.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution store.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution store.",
                                "type": "string"
                              },
                              "type": {
                                "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                "enum": [
                                  "intune",
                                  "googleplay",
                                  "apple",
                                  "none"
                                ],
                                "type": "string"
                              },
                              "publishing_status": {
                                "description": "publishing status of the release in the store.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution store.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "destination_type": {
                            "description": "Destination can be either store or group.",
                            "enum": [
                              "group",
                              "store",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "display_name": {
                            "description": "Display name for the group or tester",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "is_udid_provisioned": {
                  "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                  "type": "boolean"
                },
                "can_resign": {
                  "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                  "type": "boolean"
                },
                "build": {
                  "description": "Contains metadata about the build that produced the release being uploaded",
                  "type": "object",
                  "properties": {
                    "branch_name": {
                      "description": "The branch name of the build producing the release",
                      "type": "string"
                    },
                    "commit_hash": {
                      "description": "The commit hash of the build producing the release",
                      "type": "string"
                    },
                    "commit_message": {
                      "description": "The commit message of the build producing the release",
                      "type": "string"
                    }
                  }
                },
                "enabled": {
                  "description": "This value determines the whether a release currently is enabled or disabled.",
                  "type": "boolean"
                },
                "status": {
                  "description": "Status of the release.",
                  "type": "string"
                },
                "is_external_build": {
                  "description": "This value determines if a release is external or not.",
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Error codes:\n- `not_found` - A release or an app can't be found.\n- `no_releases_for_user` - No releases available for that user (will only be returned when `release_hash` is `latest`)\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/sdk/apps/{app_secret}/releases/private/latest": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Get the latest release distributed to a private group the given user is a member of for the given app.",
        "operationId": "releases_getLatestPrivateRelease",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "app_secret",
            "description": "The secret of the target application",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "udid",
            "description": "When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the full release details of the latest release that was distributed to the current user (from all the private distribution groups).",
            "schema": {
              "description": "Details of an uploaded release",
              "required": [
                "id",
                "app_name",
                "app_display_name",
                "uploaded_at",
                "version",
                "short_version",
                "app_icon_url",
                "enabled"
              ],
              "properties": {
                "id": {
                  "description": "ID identifying this unique release.",
                  "type": "integer"
                },
                "app_name": {
                  "description": "The app's name (extracted from the uploaded release).",
                  "type": "string"
                },
                "app_display_name": {
                  "description": "The app's display name.",
                  "type": "string"
                },
                "app_os": {
                  "description": "The app's OS.",
                  "type": "string"
                },
                "version": {
                  "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                  "type": "string"
                },
                "origin": {
                  "description": "The release's origin",
                  "enum": [
                    "hockeyapp",
                    "appcenter"
                  ],
                  "type": "string"
                },
                "short_version": {
                  "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                  "type": "string"
                },
                "release_notes": {
                  "description": "The release's release notes.",
                  "type": "string"
                },
                "provisioning_profile_name": {
                  "description": "The release's provisioning profile name.",
                  "type": "string"
                },
                "provisioning_profile_type": {
                  "description": "The type of the provisioning profile for the requested app version.",
                  "enum": [
                    "adhoc",
                    "enterprise",
                    "other"
                  ],
                  "type": "string"
                },
                "provisioning_profile_expiry_date": {
                  "description": "expiration date of provisioning profile in UTC format.",
                  "type": "string"
                },
                "is_provisioning_profile_syncing": {
                  "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                  "type": "boolean"
                },
                "size": {
                  "description": "The release's size in bytes.",
                  "type": "integer"
                },
                "min_os": {
                  "description": "The release's minimum required operating system.",
                  "type": "string"
                },
                "device_family": {
                  "description": "The release's device family.",
                  "type": "string"
                },
                "android_min_api_level": {
                  "description": "The release's minimum required Android API level.",
                  "type": "string"
                },
                "bundle_identifier": {
                  "description": "The identifier of the apps bundle.",
                  "type": "string"
                },
                "package_hashes": {
                  "description": "Hashes for the packages.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "fingerprint": {
                  "description": "MD5 checksum of the release binary.",
                  "type": "string"
                },
                "uploaded_at": {
                  "description": "UTC time in ISO 8601 format of the uploaded time.",
                  "type": "string"
                },
                "download_url": {
                  "description": "The URL that hosts the binary for this release.",
                  "type": "string"
                },
                "app_icon_url": {
                  "description": "A URL to the app's icon.",
                  "type": "string"
                },
                "install_url": {
                  "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                  "type": "string"
                },
                "destination_type": {
                  "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                  "enum": [
                    "group",
                    "store",
                    "tester"
                  ],
                  "type": "string"
                },
                "distribution_groups": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution group.",
                        "type": "string"
                      }
                    }
                  }
                },
                "distribution_stores": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution store.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution store.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                        "enum": [
                          "intune",
                          "googleplay",
                          "apple",
                          "none"
                        ],
                        "type": "string"
                      },
                      "publishing_status": {
                        "description": "publishing status of the release in the store.",
                        "type": "string"
                      }
                    }
                  }
                },
                "destinations": {
                  "description": "A list of distribution groups or stores.",
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution group.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution group.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution store.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution store.",
                                "type": "string"
                              },
                              "type": {
                                "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                "enum": [
                                  "intune",
                                  "googleplay",
                                  "apple",
                                  "none"
                                ],
                                "type": "string"
                              },
                              "publishing_status": {
                                "description": "publishing status of the release in the store.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution store.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "destination_type": {
                            "description": "Destination can be either store or group.",
                            "enum": [
                              "group",
                              "store",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "display_name": {
                            "description": "Display name for the group or tester",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "is_udid_provisioned": {
                  "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                  "type": "boolean"
                },
                "can_resign": {
                  "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                  "type": "boolean"
                },
                "build": {
                  "description": "Contains metadata about the build that produced the release being uploaded",
                  "type": "object",
                  "properties": {
                    "branch_name": {
                      "description": "The branch name of the build producing the release",
                      "type": "string"
                    },
                    "commit_hash": {
                      "description": "The commit hash of the build producing the release",
                      "type": "string"
                    },
                    "commit_message": {
                      "description": "The commit message of the build producing the release",
                      "type": "string"
                    }
                  }
                },
                "enabled": {
                  "description": "This value determines the whether a release currently is enabled or disabled.",
                  "type": "boolean"
                },
                "status": {
                  "description": "Status of the release.",
                  "type": "string"
                },
                "is_external_build": {
                  "description": "This value determines if a release is external or not.",
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Error codes:\n- `not_found` - A release or an app can't be found.\n- `no_releases_for_user` - No releases available for that user.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/users/{user_name}/apps": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Get a user apps information from an organization by name",
        "operationId": "apps_getForOrgUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_name",
            "description": "The slug name of the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "app_secret",
                  "platform",
                  "origin"
                ],
                "allOf": [
                  {
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "os",
                      "owner"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique ID (UUID) of the app",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the app",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the app",
                        "type": "string"
                      },
                      "release_type": {
                        "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                        "type": "string"
                      },
                      "icon_url": {
                        "description": "The string representation of the URL pointing to the app's icon",
                        "type": "string"
                      },
                      "icon_source": {
                        "description": "The string representation of the source of the app's icon",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the app used in URLs",
                        "type": "string"
                      },
                      "os": {
                        "description": "The OS the app will be running on",
                        "enum": [
                          "Android",
                          "iOS",
                          "macOS",
                          "Tizen",
                          "tvOS",
                          "Windows",
                          "Linux",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "owner": {
                        "description": "The information about the app's owner",
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique id (UUID) of the owner",
                            "type": "string"
                          },
                          "avatar_url": {
                            "description": "The avatar URL of the owner",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The owner's display name",
                            "type": "string"
                          },
                          "email": {
                            "description": "The owner's email address",
                            "type": "string"
                          },
                          "name": {
                            "description": "The unique name that used to identify the owner",
                            "type": "string"
                          },
                          "type": {
                            "description": "The owner type. Can either be 'org' or 'user'",
                            "enum": [
                              "org",
                              "user"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "properties": {
                      "app_secret": {
                        "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                        "type": "string"
                      },
                      "azure_subscription": {
                        "required": [
                          "subscription_id",
                          "tenant_id",
                          "subscription_name"
                        ],
                        "properties": {
                          "subscription_id": {
                            "format": "uuid",
                            "description": "The azure subscription id",
                            "type": "string"
                          },
                          "tenant_id": {
                            "format": "uuid",
                            "description": "The tenant id of the azure subscription belongs to",
                            "type": "string"
                          },
                          "subscription_name": {
                            "description": "The name of the azure subscription",
                            "type": "string"
                          },
                          "is_billing": {
                            "description": "If the subscription is used for billing",
                            "type": "boolean"
                          },
                          "is_billable": {
                            "description": "If the subscription can be used for billing",
                            "type": "boolean"
                          },
                          "is_microsoft_internal": {
                            "description": "If the subscription is internal Microsoft subscription",
                            "type": "boolean"
                          }
                        }
                      },
                      "platform": {
                        "description": "The platform of the app",
                        "enum": [
                          "Java",
                          "Objective-C-Swift",
                          "UWP",
                          "Cordova",
                          "React-Native",
                          "Unity",
                          "Electron",
                          "Xamarin",
                          "WPF",
                          "WinForms",
                          "Unknown",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this app",
                        "enum": [
                          "appcenter",
                          "hockeyapp",
                          "codepush"
                        ],
                        "type": "string"
                      },
                      "created_at": {
                        "description": "The created date of this app",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "The last updated date of this app",
                        "type": "string"
                      },
                      "member_permissions": {
                        "description": "The permissions of the calling user",
                        "type": "array",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/users/{user_name}": {
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Updates the given organization user",
        "operationId": "users_updateOrgRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_name",
            "description": "The slug name of the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "organization_user",
            "required": true,
            "schema": {
              "properties": {
                "role": {
                  "description": "The user's role in the organizatiion",
                  "enum": [
                    "admin",
                    "collaborator",
                    "member"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "display_name",
                "email",
                "joined_at",
                "name",
                "role"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "joined_at": {
                  "description": "The date when the user joined the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "role": {
                  "description": "The role the user has within the organization",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Removes a user from an organization.",
        "operationId": "users_removeFromOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_name",
            "description": "The slug name of the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission",
        "operationId": "users_getForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_name",
            "description": "The slug name of the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "display_name",
                "email",
                "joined_at",
                "name",
                "role"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "joined_at": {
                  "description": "The date when the user joined the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "role": {
                  "description": "The role the user has within the organization",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/users": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of users that belong to an organization",
        "operationId": "users_listForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "display_name",
                  "email",
                  "joined_at",
                  "name",
                  "role"
                ],
                "properties": {
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "joined_at": {
                    "description": "The date when the user joined the organization",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role the user has within the organization",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/testers": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a unique list of users including the whole organization members plus testers in any shared group of that org",
        "operationId": "distributionGroups_listAllTestersForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "name",
                  "email"
                ],
                "properties": {
                  "display_name": {
                    "description": "The full name of the tester. Might for example be first and last name",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the tester.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the tester",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}": {
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Removes a user from a team that is owned by an organization",
        "operationId": "teams_removeUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_name",
            "description": "The slug name of the user",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/users": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the users of a team which is owned by an organization",
        "operationId": "teams_getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "email",
                "display_name",
                "name",
                "role"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "role": {
                  "description": "The role of the user has within the team",
                  "enum": [
                    "maintainer",
                    "collaborator"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Adds a new user to a team that is owned by an organization",
        "operationId": "teams_addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "user_email",
            "description": "The email of the user to add to the team",
            "schema": {
              "required": [
                "user_email"
              ],
              "properties": {
                "user_email": {
                  "description": "The user's email address",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "email",
                "display_name",
                "name",
                "role"
              ],
              "properties": {
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "role": {
                  "description": "The role of the user has within the team",
                  "enum": [
                    "maintainer",
                    "collaborator"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}": {
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Updates the permissions the team has to the app",
        "operationId": "teams_updatePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "team",
            "schema": {
              "required": [
                "permissions"
              ],
              "properties": {
                "permissions": {
                  "description": "The permissions all members of the team have on the app",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique ID (UUID) of the app",
                          "type": "string"
                        },
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "format": "uuid",
                              "description": "The unique id (UUID) of the owner",
                              "type": "string"
                            },
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "properties": {
                            "subscription_id": {
                              "format": "uuid",
                              "description": "The azure subscription id",
                              "type": "string"
                            },
                            "tenant_id": {
                              "format": "uuid",
                              "description": "The tenant id of the azure subscription belongs to",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            }
                          }
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "type": "array",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "properties": {
                    "team_permissions": {
                      "description": "The permissions the team has for the app",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Removes an app from a team",
        "operationId": "teams_removeApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/apps": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Adds an app to a team",
        "operationId": "teams_addApp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "app",
            "description": "The name of the app to be added to the team. The app has to be owned by the organization.",
            "required": true,
            "schema": {
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "The name of the app to be added to the distribution group",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique ID (UUID) of the app",
                          "type": "string"
                        },
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "format": "uuid",
                              "description": "The unique id (UUID) of the owner",
                              "type": "string"
                            },
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "properties": {
                            "subscription_id": {
                              "format": "uuid",
                              "description": "The azure subscription id",
                              "type": "string"
                            },
                            "tenant_id": {
                              "format": "uuid",
                              "description": "The tenant id of the azure subscription belongs to",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            }
                          }
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "type": "array",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "properties": {
                    "team_permissions": {
                      "description": "The permissions the team has for the app",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the apps a team has access to",
        "operationId": "teams_listApps",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "required": [
                      "app_secret",
                      "platform",
                      "origin"
                    ],
                    "allOf": [
                      {
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "os",
                          "owner"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique ID (UUID) of the app",
                            "type": "string"
                          },
                          "description": {
                            "description": "The description of the app",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the app",
                            "type": "string"
                          },
                          "release_type": {
                            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                            "type": "string"
                          },
                          "icon_url": {
                            "description": "The string representation of the URL pointing to the app's icon",
                            "type": "string"
                          },
                          "icon_source": {
                            "description": "The string representation of the source of the app's icon",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the app used in URLs",
                            "type": "string"
                          },
                          "os": {
                            "description": "The OS the app will be running on",
                            "enum": [
                              "Android",
                              "iOS",
                              "macOS",
                              "Tizen",
                              "tvOS",
                              "Windows",
                              "Linux",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "The information about the app's owner",
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "format": "uuid",
                                "description": "The unique id (UUID) of the owner",
                                "type": "string"
                              },
                              "avatar_url": {
                                "description": "The avatar URL of the owner",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The owner's display name",
                                "type": "string"
                              },
                              "email": {
                                "description": "The owner's email address",
                                "type": "string"
                              },
                              "name": {
                                "description": "The unique name that used to identify the owner",
                                "type": "string"
                              },
                              "type": {
                                "description": "The owner type. Can either be 'org' or 'user'",
                                "enum": [
                                  "org",
                                  "user"
                                ],
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "properties": {
                          "app_secret": {
                            "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                            "type": "string"
                          },
                          "azure_subscription": {
                            "required": [
                              "subscription_id",
                              "tenant_id",
                              "subscription_name"
                            ],
                            "properties": {
                              "subscription_id": {
                                "format": "uuid",
                                "description": "The azure subscription id",
                                "type": "string"
                              },
                              "tenant_id": {
                                "format": "uuid",
                                "description": "The tenant id of the azure subscription belongs to",
                                "type": "string"
                              },
                              "subscription_name": {
                                "description": "The name of the azure subscription",
                                "type": "string"
                              },
                              "is_billing": {
                                "description": "If the subscription is used for billing",
                                "type": "boolean"
                              },
                              "is_billable": {
                                "description": "If the subscription can be used for billing",
                                "type": "boolean"
                              },
                              "is_microsoft_internal": {
                                "description": "If the subscription is internal Microsoft subscription",
                                "type": "boolean"
                              }
                            }
                          },
                          "platform": {
                            "description": "The platform of the app",
                            "enum": [
                              "Java",
                              "Objective-C-Swift",
                              "UWP",
                              "Cordova",
                              "React-Native",
                              "Unity",
                              "Electron",
                              "Xamarin",
                              "WPF",
                              "WinForms",
                              "Unknown",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "origin": {
                            "description": "The creation origin of this app",
                            "enum": [
                              "appcenter",
                              "hockeyapp",
                              "codepush"
                            ],
                            "type": "string"
                          },
                          "created_at": {
                            "description": "The created date of this app",
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The last updated date of this app",
                            "type": "string"
                          },
                          "member_permissions": {
                            "description": "The permissions of the calling user",
                            "type": "array",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer",
                                "tester"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "properties": {
                      "team_permissions": {
                        "description": "The permissions the team has for the app",
                        "type": "array",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the details of a single team",
        "operationId": "teams_getTeam",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "display_name"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the team.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the team",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the team",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the team",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Deletes a single team",
        "operationId": "teams_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Updates a single team",
        "operationId": "teams_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "team_name",
            "description": "The team's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "team",
            "description": "The information used to update the team",
            "schema": {
              "required": [
                "display_name"
              ],
              "properties": {
                "display_name": {
                  "description": "The new display name of the team",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "display_name"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the team.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the team",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the team",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the team",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/teams": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the list of all teams in this org",
        "operationId": "teams_listAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "name",
                  "display_name"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The internal unique id (UUID) of the team.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the team",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the team",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the team",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a team and returns it",
        "operationId": "teams_createTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "team",
            "description": "The information used to create the team",
            "schema": {
              "required": [
                "display_name"
              ],
              "properties": {
                "display_name": {
                  "description": "The display name of the team",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the team",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the team",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "name",
                  "display_name"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The internal unique id (UUID) of the team.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the team",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the team",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the team",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/invitations/{email}/revoke": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Removes a user's invitation to an organization",
        "operationId": "orgInvitations_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "email",
            "description": "The email address of the user to send the password reset mail to.",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/invitations/{email}/resend": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Cancels an existing organization invitation for the user and sends a new one",
        "operationId": "orgInvitations_sendNewInvitation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "email",
            "description": "The email address of the user to send the password reset mail to.",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "role",
            "description": "The role of the user to be added",
            "schema": {
              "properties": {
                "role": {
                  "description": "The role of the user to be added",
                  "enum": [
                    "admin",
                    "collaborator",
                    "member"
                  ],
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/invitations/{email}": {
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Allows the role of an invited user to be changed",
        "operationId": "orgInvitations_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "email",
            "description": "The email address of the user to send the password reset mail to.",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "user_role",
            "description": "The new role of the user",
            "required": true,
            "schema": {
              "properties": {
                "role": {
                  "description": "The user's role in the organizatiion",
                  "enum": [
                    "admin",
                    "collaborator",
                    "member"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/invitations": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Invites a new or existing user to an organization",
        "operationId": "orgInvitations_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "user_email",
            "description": "The email of the user to invite",
            "schema": {
              "required": [
                "user_email"
              ],
              "properties": {
                "user_email": {
                  "description": "The user's email address",
                  "type": "string"
                },
                "role": {
                  "description": "The user's role",
                  "enum": [
                    "admin",
                    "collaborator",
                    "member"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Removes a user's invitation to an organization",
        "operationId": "orgInvitations_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "user_email",
            "description": "The email of the user whose invitation should be removed",
            "schema": {
              "required": [
                "user_email"
              ],
              "properties": {
                "user_email": {
                  "description": "The user's email address",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Gets the pending invitations for the organization",
        "operationId": "orgInvitations_listPending",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "email",
                  "role"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique ID (UUID) of the invitation",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the invited user",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role assigned to the invited user",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups_details": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of distribution groups with details for an organization",
        "operationId": "distributionGroups_detailsForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "apps_limit",
            "description": "The max number of apps to include in the response",
            "type": "number",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "apps",
                  "total_users_count",
                  "total_apps_count"
                ],
                "allOf": [
                  {
                    "required": [
                      "id",
                      "name",
                      "origin",
                      "is_public"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique ID of the distribution group",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the distribution group used in URLs",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The name of the distribution group",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this distribution group",
                        "enum": [
                          "appcenter",
                          "hockeyapp"
                        ],
                        "type": "string"
                      },
                      "is_public": {
                        "description": "Whether the distribution group is public",
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "properties": {
                      "total_apps_count": {
                        "description": "The count of apps associated with this distribution group",
                        "type": "number"
                      },
                      "total_users_count": {
                        "description": "The count of users in the distribution group",
                        "type": "number"
                      },
                      "apps": {
                        "description": "The apps associated with the distribution group",
                        "type": "array",
                        "items": {
                          "required": [
                            "app_secret",
                            "platform",
                            "origin"
                          ],
                          "allOf": [
                            {
                              "required": [
                                "id",
                                "display_name",
                                "name",
                                "os",
                                "owner"
                              ],
                              "properties": {
                                "id": {
                                  "format": "uuid",
                                  "description": "The unique ID (UUID) of the app",
                                  "type": "string"
                                },
                                "description": {
                                  "description": "The description of the app",
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "The display name of the app",
                                  "type": "string"
                                },
                                "release_type": {
                                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                                  "type": "string"
                                },
                                "icon_url": {
                                  "description": "The string representation of the URL pointing to the app's icon",
                                  "type": "string"
                                },
                                "icon_source": {
                                  "description": "The string representation of the source of the app's icon",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the app used in URLs",
                                  "type": "string"
                                },
                                "os": {
                                  "description": "The OS the app will be running on",
                                  "enum": [
                                    "Android",
                                    "iOS",
                                    "macOS",
                                    "Tizen",
                                    "tvOS",
                                    "Windows",
                                    "Linux",
                                    "Custom"
                                  ],
                                  "type": "string"
                                },
                                "owner": {
                                  "description": "The information about the app's owner",
                                  "required": [
                                    "id",
                                    "display_name",
                                    "name",
                                    "type"
                                  ],
                                  "properties": {
                                    "id": {
                                      "format": "uuid",
                                      "description": "The unique id (UUID) of the owner",
                                      "type": "string"
                                    },
                                    "avatar_url": {
                                      "description": "The avatar URL of the owner",
                                      "type": "string"
                                    },
                                    "display_name": {
                                      "description": "The owner's display name",
                                      "type": "string"
                                    },
                                    "email": {
                                      "description": "The owner's email address",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The unique name that used to identify the owner",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "The owner type. Can either be 'org' or 'user'",
                                      "enum": [
                                        "org",
                                        "user"
                                      ],
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "app_secret": {
                                  "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                                  "type": "string"
                                },
                                "azure_subscription": {
                                  "required": [
                                    "subscription_id",
                                    "tenant_id",
                                    "subscription_name"
                                  ],
                                  "properties": {
                                    "subscription_id": {
                                      "format": "uuid",
                                      "description": "The azure subscription id",
                                      "type": "string"
                                    },
                                    "tenant_id": {
                                      "format": "uuid",
                                      "description": "The tenant id of the azure subscription belongs to",
                                      "type": "string"
                                    },
                                    "subscription_name": {
                                      "description": "The name of the azure subscription",
                                      "type": "string"
                                    },
                                    "is_billing": {
                                      "description": "If the subscription is used for billing",
                                      "type": "boolean"
                                    },
                                    "is_billable": {
                                      "description": "If the subscription can be used for billing",
                                      "type": "boolean"
                                    },
                                    "is_microsoft_internal": {
                                      "description": "If the subscription is internal Microsoft subscription",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "platform": {
                                  "description": "The platform of the app",
                                  "enum": [
                                    "Java",
                                    "Objective-C-Swift",
                                    "UWP",
                                    "Cordova",
                                    "React-Native",
                                    "Unity",
                                    "Electron",
                                    "Xamarin",
                                    "WPF",
                                    "WinForms",
                                    "Unknown",
                                    "Custom"
                                  ],
                                  "type": "string"
                                },
                                "origin": {
                                  "description": "The creation origin of this app",
                                  "enum": [
                                    "appcenter",
                                    "hockeyapp",
                                    "codepush"
                                  ],
                                  "type": "string"
                                },
                                "created_at": {
                                  "description": "The created date of this app",
                                  "type": "string"
                                },
                                "updated_at": {
                                  "description": "The last updated date of this app",
                                  "type": "string"
                                },
                                "member_permissions": {
                                  "description": "The permissions of the calling user",
                                  "type": "array",
                                  "items": {
                                    "enum": [
                                      "manager",
                                      "developer",
                                      "viewer",
                                      "tester"
                                    ],
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Resend shared distribution group invite notification to previously invited testers",
        "operationId": "distributionGroups_resendSharedInvite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "members",
            "description": "The list of members to add",
            "required": true,
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Delete testers from distribution group in an org",
        "operationId": "distributionGroups_bulkDeleteUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "members",
            "description": "The list of members to add",
            "required": true,
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of member in the distribution group specified",
        "operationId": "distributionGroups_listUsersForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "email"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id (UUID) of the user",
                    "type": "string"
                  },
                  "avatar_url": {
                    "description": "The avatar URL of the user",
                    "type": "string"
                  },
                  "can_change_password": {
                    "description": "User is required to send an old password in order to change the password.",
                    "type": "boolean"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "invite_pending": {
                    "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Accepts an array of user email addresses to get added to the specified group",
        "operationId": "distributionGroups_addUsersForOrg",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "member_emails",
            "description": "list of user email addresses that should get added as members to the specified group",
            "required": true,
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "status"
                ],
                "properties": {
                  "code": {
                    "description": "The code of the result",
                    "type": "string"
                  },
                  "invite_pending": {
                    "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "The message of the result",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status code of the result",
                    "type": "integer"
                  },
                  "user_email": {
                    "description": "The email of the user",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Delete apps from distribution group in an org",
        "operationId": "distributionGroups_bulkDeleteApps",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "apps",
            "description": "The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.",
            "required": true,
            "schema": {
              "properties": {
                "apps": {
                  "description": "The list of apps to delete from the distribution group",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "The name of the app to be deleted from the distribution group",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Get apps from a distribution group in an org",
        "operationId": "distributionGroups_getApps",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "os",
                      "owner"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique ID (UUID) of the app",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the app",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the app",
                        "type": "string"
                      },
                      "release_type": {
                        "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                        "type": "string"
                      },
                      "icon_url": {
                        "description": "The string representation of the URL pointing to the app's icon",
                        "type": "string"
                      },
                      "icon_source": {
                        "description": "The string representation of the source of the app's icon",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the app used in URLs",
                        "type": "string"
                      },
                      "os": {
                        "description": "The OS the app will be running on",
                        "enum": [
                          "Android",
                          "iOS",
                          "macOS",
                          "Tizen",
                          "tvOS",
                          "Windows",
                          "Linux",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "owner": {
                        "description": "The information about the app's owner",
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique id (UUID) of the owner",
                            "type": "string"
                          },
                          "avatar_url": {
                            "description": "The avatar URL of the owner",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The owner's display name",
                            "type": "string"
                          },
                          "email": {
                            "description": "The owner's email address",
                            "type": "string"
                          },
                          "name": {
                            "description": "The unique name that used to identify the owner",
                            "type": "string"
                          },
                          "type": {
                            "description": "The owner type. Can either be 'org' or 'user'",
                            "enum": [
                              "org",
                              "user"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "properties": {
                      "platform": {
                        "description": "The platform of the app",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this app",
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Add apps to distribution group in an org",
        "operationId": "distributionGroups_addApps",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "apps",
            "description": "The name of the apps to be added to the distribution group. The apps have to be owned by the organization.",
            "required": true,
            "schema": {
              "properties": {
                "apps": {
                  "description": "The list of apps to add to distribution group",
                  "type": "array",
                  "items": {
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "The name of the app to be added to the distribution group",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a single distribution group in org for a given distribution group name",
        "operationId": "distributionGroups_getForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "origin",
                "is_public"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID of the distribution group",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group used in URLs",
                  "type": "string"
                },
                "display_name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this distribution group",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Update one given distribution group name in an org",
        "operationId": "distributionGroups_patchForOrg",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "distribution_group",
            "description": "The attributes to update for the distribution group",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "origin",
                "is_public"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID of the distribution group",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group used in URLs",
                  "type": "string"
                },
                "display_name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this distribution group",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Deletes a single distribution group from an org with a given distribution group name",
        "operationId": "distributionGroups_deleteForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a disribution goup which can be shared across apps under an organization",
        "operationId": "distributionGroups_createForOrg",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "distribution_group",
            "description": "The attributes to update for the distribution group",
            "required": true,
            "schema": {
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the distribution group. If not specified, the name will be used.",
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "origin",
                "is_public"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID of the distribution group",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group used in URLs",
                  "type": "string"
                },
                "display_name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this distribution group",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of distribution groups in the org specified",
        "operationId": "distributionGroups_listForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "name",
                  "origin",
                  "is_public"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique ID of the distribution group",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the distribution group used in URLs",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The name of the distribution group",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The creation origin of this distribution group",
                    "enum": [
                      "appcenter",
                      "hockeyapp"
                    ],
                    "type": "string"
                  },
                  "is_public": {
                    "description": "Whether the distribution group is public",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/azure_subscriptions": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of azure subscriptions for the organization",
        "operationId": "azureSubscription_listForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "subscription_id",
                  "tenant_id",
                  "subscription_name"
                ],
                "properties": {
                  "subscription_id": {
                    "format": "uuid",
                    "description": "The azure subscription id",
                    "type": "string"
                  },
                  "tenant_id": {
                    "format": "uuid",
                    "description": "The tenant id of the azure subscription belongs to",
                    "type": "string"
                  },
                  "subscription_name": {
                    "description": "The name of the azure subscription",
                    "type": "string"
                  },
                  "is_billing": {
                    "description": "If the subscription is used for billing",
                    "type": "boolean"
                  },
                  "is_billable": {
                    "description": "If the subscription can be used for billing",
                    "type": "boolean"
                  },
                  "is_microsoft_internal": {
                    "description": "If the subscription is internal Microsoft subscription",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/avatar": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Sets the organization avatar",
        "operationId": "organization_updateAvatar",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "formData",
            "name": "avatar",
            "description": "The image for an Organization avatar to upload.",
            "type": "file",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Deletes the uploaded organization avatar",
        "operationId": "organization_deleteAvatar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}/apps": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a new app for the organization and returns it to the caller",
        "operationId": "apps_createForOrg",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "app",
            "description": "The data for the app",
            "required": true,
            "schema": {
              "required": [
                "display_name",
                "os",
                "platform"
              ],
              "properties": {
                "description": {
                  "description": "A short text describing the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "display_name": {
                  "description": "The descriptive name of the app. This can contain any characters",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Xamarin",
                    "Unity",
                    "Electron",
                    "WPF",
                    "WinForms",
                    "Custom"
                  ],
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of apps for the organization",
        "operationId": "apps_listForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "app_secret",
                  "platform",
                  "origin"
                ],
                "allOf": [
                  {
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "os",
                      "owner"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique ID (UUID) of the app",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the app",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the app",
                        "type": "string"
                      },
                      "release_type": {
                        "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                        "type": "string"
                      },
                      "icon_url": {
                        "description": "The string representation of the URL pointing to the app's icon",
                        "type": "string"
                      },
                      "icon_source": {
                        "description": "The string representation of the source of the app's icon",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the app used in URLs",
                        "type": "string"
                      },
                      "os": {
                        "description": "The OS the app will be running on",
                        "enum": [
                          "Android",
                          "iOS",
                          "macOS",
                          "Tizen",
                          "tvOS",
                          "Windows",
                          "Linux",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "owner": {
                        "description": "The information about the app's owner",
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique id (UUID) of the owner",
                            "type": "string"
                          },
                          "avatar_url": {
                            "description": "The avatar URL of the owner",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The owner's display name",
                            "type": "string"
                          },
                          "email": {
                            "description": "The owner's email address",
                            "type": "string"
                          },
                          "name": {
                            "description": "The unique name that used to identify the owner",
                            "type": "string"
                          },
                          "type": {
                            "description": "The owner type. Can either be 'org' or 'user'",
                            "enum": [
                              "org",
                              "user"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "properties": {
                      "app_secret": {
                        "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                        "type": "string"
                      },
                      "azure_subscription": {
                        "required": [
                          "subscription_id",
                          "tenant_id",
                          "subscription_name"
                        ],
                        "properties": {
                          "subscription_id": {
                            "format": "uuid",
                            "description": "The azure subscription id",
                            "type": "string"
                          },
                          "tenant_id": {
                            "format": "uuid",
                            "description": "The tenant id of the azure subscription belongs to",
                            "type": "string"
                          },
                          "subscription_name": {
                            "description": "The name of the azure subscription",
                            "type": "string"
                          },
                          "is_billing": {
                            "description": "If the subscription is used for billing",
                            "type": "boolean"
                          },
                          "is_billable": {
                            "description": "If the subscription can be used for billing",
                            "type": "boolean"
                          },
                          "is_microsoft_internal": {
                            "description": "If the subscription is internal Microsoft subscription",
                            "type": "boolean"
                          }
                        }
                      },
                      "platform": {
                        "description": "The platform of the app",
                        "enum": [
                          "Java",
                          "Objective-C-Swift",
                          "UWP",
                          "Cordova",
                          "React-Native",
                          "Unity",
                          "Electron",
                          "Xamarin",
                          "WPF",
                          "WinForms",
                          "Unknown",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this app",
                        "enum": [
                          "appcenter",
                          "hockeyapp",
                          "codepush"
                        ],
                        "type": "string"
                      },
                      "created_at": {
                        "description": "The created date of this app",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "The last updated date of this app",
                        "type": "string"
                      },
                      "member_permissions": {
                        "description": "The permissions of the calling user",
                        "type": "array",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{org_name}": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the details of a single organization",
        "operationId": "organizations_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of organizations the requesting user has access to",
        "operationId": "organizations_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "org",
            "description": "The data for the org",
            "required": true,
            "schema": {
              "properties": {
                "display_name": {
                  "description": "The full (friendly) name of the organization.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the organization used in URLs",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Deletes a single organization",
        "operationId": "organizations_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_name",
            "description": "The organization's name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs/{orgName}/billing/aggregated": {
      "get": {
        "tags": [
          "billing"
        ],
        "description": "Aggregated Billing Information for a given Organization.",
        "operationId": "billingAggregatedInformation_getForOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgName",
            "description": "The name of the Organization",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "service",
            "description": "Type of service that should be included in the Billing Information",
            "type": "string",
            "enum": [
              "Test",
              "Build"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "period",
            "description": "Type of period that should be included in the Billing Information",
            "type": "string",
            "enum": [
              "Previous",
              "Current",
              "Next"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "showOriginalPlans",
            "description": "Controls whether the API should show the original plan when Azure Subscription is not enabled",
            "type": "boolean",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated Billing Information for a given Organization",
            "schema": {
              "description": "Aggregated Billing Information for a user or an organization",
              "type": "object",
              "properties": {
                "version": {
                  "description": "Version of the Billing Information schema",
                  "type": "string"
                },
                "timestamp": {
                  "format": "dateTime",
                  "description": "The ISO 8601 datetime of last modification",
                  "type": "string"
                },
                "id": {
                  "description": "ID of the user or organization",
                  "type": "string"
                },
                "billingPlans": {
                  "description": "Billing Plans section in the Billing Information",
                  "type": "object",
                  "properties": {
                    "buildService": {
                      "description": "Billing Plans for a single service",
                      "type": "object",
                      "properties": {
                        "canSelectTrialPlan": {
                          "description": "Can customer select trial plan for that service (if it exists)?",
                          "type": "boolean"
                        },
                        "lastTrialPlanExpirationTime": {
                          "format": "dateTime",
                          "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                          "type": "string"
                        },
                        "currentBillingPeriod": {
                          "description": "Billing plans for a given period",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start of the period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end of the period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "Selection of a billing plan",
                              "properties": {
                                "count": {
                                  "description": "Number of instances of the billing plan.",
                                  "type": "integer"
                                },
                                "plan": {
                                  "description": "Billing Plan",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The Billing Plan ID",
                                      "type": "string"
                                    },
                                    "version": {
                                      "description": "Version of the Billing Plan schema",
                                      "type": "string"
                                    },
                                    "price": {
                                      "description": "Price of the Billing Plan",
                                      "type": "number"
                                    },
                                    "paymentSource": {
                                      "description": "Service that receives payments for this billing plan.",
                                      "enum": [
                                        "None",
                                        "AppCenter",
                                        "GitHub",
                                        "Xtc"
                                      ],
                                      "type": "string"
                                    },
                                    "service": {
                                      "description": "Name of the service that the plan applies to.",
                                      "enum": [
                                        "Build",
                                        "Test"
                                      ],
                                      "type": "string"
                                    },
                                    "limits": {
                                      "description": "A collection of named numeric values",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "number"
                                      }
                                    },
                                    "attributes": {
                                      "description": "Collection of attribute values.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "object"
                                      }
                                    },
                                    "parentId": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "testService": {
                      "description": "Billing Plans for a single service",
                      "type": "object",
                      "properties": {
                        "canSelectTrialPlan": {
                          "description": "Can customer select trial plan for that service (if it exists)?",
                          "type": "boolean"
                        },
                        "lastTrialPlanExpirationTime": {
                          "format": "dateTime",
                          "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                          "type": "string"
                        },
                        "currentBillingPeriod": {
                          "description": "Billing plans for a given period",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start of the period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end of the period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "Selection of a billing plan",
                              "properties": {
                                "count": {
                                  "description": "Number of instances of the billing plan.",
                                  "type": "integer"
                                },
                                "plan": {
                                  "description": "Billing Plan",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The Billing Plan ID",
                                      "type": "string"
                                    },
                                    "version": {
                                      "description": "Version of the Billing Plan schema",
                                      "type": "string"
                                    },
                                    "price": {
                                      "description": "Price of the Billing Plan",
                                      "type": "number"
                                    },
                                    "paymentSource": {
                                      "description": "Service that receives payments for this billing plan.",
                                      "enum": [
                                        "None",
                                        "AppCenter",
                                        "GitHub",
                                        "Xtc"
                                      ],
                                      "type": "string"
                                    },
                                    "service": {
                                      "description": "Name of the service that the plan applies to.",
                                      "enum": [
                                        "Build",
                                        "Test"
                                      ],
                                      "type": "string"
                                    },
                                    "limits": {
                                      "description": "A collection of named numeric values",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "number"
                                      }
                                    },
                                    "attributes": {
                                      "description": "Collection of attribute values.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "object"
                                      }
                                    },
                                    "parentId": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "usage": {
                  "description": "Usage section in the Billing Information",
                  "type": "object",
                  "properties": {
                    "buildService": {
                      "description": "Resource usage for a single Mobile Center service",
                      "type": "object",
                      "properties": {
                        "currentUsagePeriod": {
                          "description": "Usage for a single period",
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start time of the usage period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end time of the usage period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "A collection of named numeric values",
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "byApp": {
                              "description": "A collection of  named numeric values grouped by app",
                              "type": "object",
                              "additionalProperties": {
                                "description": "A collection of named numeric values",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "testService": {
                      "description": "Resource usage for a single Mobile Center service",
                      "type": "object",
                      "properties": {
                        "currentUsagePeriod": {
                          "description": "Usage for a single period",
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start time of the usage period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end time of the usage period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "A collection of named numeric values",
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "byApp": {
                              "description": "A collection of  named numeric values grouped by app",
                              "type": "object",
                              "additionalProperties": {
                                "description": "A collection of named numeric values",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "azureSubscriptionId": {
                  "description": "Unique identifier for the Azure subscription used for billing",
                  "type": "string"
                },
                "azureSubscriptionState": {
                  "description": "State of the Azure subscription used for billing",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "NotSet"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/orgs": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a new organization and returns it to the caller",
        "operationId": "organizations_createOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "organization",
            "description": "The organization data",
            "required": true,
            "schema": {
              "properties": {
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the organization used in URLs",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of organizations the requesting user has access to",
        "operationId": "organizations_list",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "display_name",
                  "name",
                  "origin"
                ],
                "properties": {
                  "display_name": {
                    "description": "The display name of the organization",
                    "type": "string"
                  },
                  "name": {
                    "description": "The slug name of the organization",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The creation origin of this organization",
                    "enum": [
                      "appcenter",
                      "hockeyapp"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/legacy/updateCheck": {
      "get": {
        "tags": [
          "codepush"
        ],
        "description": "Check for updates",
        "operationId": "legacyCodePushAcquisition_updateCheck",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "deploymentKey",
            "type": "string"
          },
          {
            "in": "query",
            "name": "appVersion",
            "type": "string"
          },
          {
            "in": "query",
            "name": "packageHash",
            "type": "string"
          },
          {
            "in": "query",
            "name": "label",
            "type": "string"
          },
          {
            "in": "query",
            "name": "clientUniqueId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "isCompanion",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "updateInfo"
              ],
              "properties": {
                "updateInfo": {
                  "required": [
                    "isAvailable"
                  ],
                  "allOf": [
                    {
                      "properties": {
                        "appVersion": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isDisabled": {
                          "type": "boolean"
                        },
                        "isMandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "properties": {
                        "downloadURL": {
                          "type": "string"
                        },
                        "isAvailable": {
                          "type": "boolean"
                        },
                        "packageSize": {
                          "type": "number"
                        },
                        "shouldRunBinaryVersion": {
                          "type": "boolean"
                        },
                        "updateAppVersion": {
                          "type": "boolean"
                        },
                        "packageHash": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/legacy/reportStatus/download": {
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Report download of specified release",
        "operationId": "legacyCodePushAcquisition_updateDownloadStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "releaseMetadata",
            "description": "Deployment status metric properties",
            "required": true,
            "schema": {
              "properties": {
                "deploymentKey": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "appVersion": {
                  "type": "string"
                },
                "previousDeploymentKey": {
                  "type": "string"
                },
                "previousLabelOrAppVersion": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "clientUniqueId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/legacy/reportStatus/deploy": {
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Report deploy of specified release",
        "operationId": "legacyCodePushAcquisition_updateInstallsStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "releaseMetadata",
            "description": "Deployment status metric properties",
            "required": true,
            "schema": {
              "properties": {
                "deploymentKey": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "appVersion": {
                  "type": "string"
                },
                "previousDeploymentKey": {
                  "type": "string"
                },
                "previousLabelOrAppVersion": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "clientUniqueId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/invitations/sent": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns all invitations sent by the caller",
        "operationId": "invitations_sent",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "invitation_id"
                ],
                "properties": {
                  "invitation_id": {
                    "format": "uuid",
                    "description": "The id of the invitation",
                    "type": "string"
                  },
                  "organization": {
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "origin",
                      "created_at",
                      "updated_at"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The internal unique id (UUID) of the organization.",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the organization",
                        "type": "string"
                      },
                      "name": {
                        "description": "The slug name of the organization",
                        "type": "string"
                      },
                      "avatar_url": {
                        "description": "The URL to a user-uploaded Avatar image",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this organization",
                        "enum": [
                          "appcenter",
                          "hockeyapp"
                        ],
                        "type": "string"
                      },
                      "created_at": {
                        "description": "The creation date of this organization",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "The date the organization was last updated at",
                        "type": "string"
                      }
                    }
                  },
                  "app": {
                    "required": [
                      "app_secret",
                      "platform",
                      "origin"
                    ],
                    "allOf": [
                      {
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "os",
                          "owner"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique ID (UUID) of the app",
                            "type": "string"
                          },
                          "description": {
                            "description": "The description of the app",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the app",
                            "type": "string"
                          },
                          "release_type": {
                            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                            "type": "string"
                          },
                          "icon_url": {
                            "description": "The string representation of the URL pointing to the app's icon",
                            "type": "string"
                          },
                          "icon_source": {
                            "description": "The string representation of the source of the app's icon",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the app used in URLs",
                            "type": "string"
                          },
                          "os": {
                            "description": "The OS the app will be running on",
                            "enum": [
                              "Android",
                              "iOS",
                              "macOS",
                              "Tizen",
                              "tvOS",
                              "Windows",
                              "Linux",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "The information about the app's owner",
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "type"
                            ],
                            "properties": {
                              "id": {
                                "format": "uuid",
                                "description": "The unique id (UUID) of the owner",
                                "type": "string"
                              },
                              "avatar_url": {
                                "description": "The avatar URL of the owner",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The owner's display name",
                                "type": "string"
                              },
                              "email": {
                                "description": "The owner's email address",
                                "type": "string"
                              },
                              "name": {
                                "description": "The unique name that used to identify the owner",
                                "type": "string"
                              },
                              "type": {
                                "description": "The owner type. Can either be 'org' or 'user'",
                                "enum": [
                                  "org",
                                  "user"
                                ],
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "properties": {
                          "app_secret": {
                            "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                            "type": "string"
                          },
                          "azure_subscription": {
                            "required": [
                              "subscription_id",
                              "tenant_id",
                              "subscription_name"
                            ],
                            "properties": {
                              "subscription_id": {
                                "format": "uuid",
                                "description": "The azure subscription id",
                                "type": "string"
                              },
                              "tenant_id": {
                                "format": "uuid",
                                "description": "The tenant id of the azure subscription belongs to",
                                "type": "string"
                              },
                              "subscription_name": {
                                "description": "The name of the azure subscription",
                                "type": "string"
                              },
                              "is_billing": {
                                "description": "If the subscription is used for billing",
                                "type": "boolean"
                              },
                              "is_billable": {
                                "description": "If the subscription can be used for billing",
                                "type": "boolean"
                              },
                              "is_microsoft_internal": {
                                "description": "If the subscription is internal Microsoft subscription",
                                "type": "boolean"
                              }
                            }
                          },
                          "platform": {
                            "description": "The platform of the app",
                            "enum": [
                              "Java",
                              "Objective-C-Swift",
                              "UWP",
                              "Cordova",
                              "React-Native",
                              "Unity",
                              "Electron",
                              "Xamarin",
                              "WPF",
                              "WinForms",
                              "Unknown",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "origin": {
                            "description": "The creation origin of this app",
                            "enum": [
                              "appcenter",
                              "hockeyapp",
                              "codepush"
                            ],
                            "type": "string"
                          },
                          "created_at": {
                            "description": "The created date of this app",
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The last updated date of this app",
                            "type": "string"
                          },
                          "member_permissions": {
                            "description": "The permissions of the calling user",
                            "type": "array",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer",
                                "tester"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/billing/allAccountsAggregated": {
      "get": {
        "tags": [
          "billing"
        ],
        "description": "Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.",
        "operationId": "billingAggregatedInformation_getAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "service",
            "description": "Type of service that should be included in the Billing Information",
            "type": "string",
            "enum": [
              "Test",
              "Build"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "period",
            "description": "Type of period that should be included in the Billing Information",
            "type": "string",
            "enum": [
              "Previous",
              "Current",
              "Next"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "showOriginalPlans",
            "description": "Controls whether the API should show the original plan when Azure Subscription is not enabled",
            "type": "boolean",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.",
            "schema": {
              "description": "Aggregated Billing Information for a user an the organizations in which the user is an admin.",
              "type": "object",
              "properties": {
                "aggregatedBillings": {
                  "description": "Aggregated Billing Information for a user or an organization",
                  "type": "object",
                  "properties": {
                    "version": {
                      "description": "Version of the Billing Information schema",
                      "type": "string"
                    },
                    "timestamp": {
                      "format": "dateTime",
                      "description": "The ISO 8601 datetime of last modification",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID of the user or organization",
                      "type": "string"
                    },
                    "billingPlans": {
                      "description": "Billing Plans section in the Billing Information",
                      "type": "object",
                      "properties": {
                        "buildService": {
                          "description": "Billing Plans for a single service",
                          "type": "object",
                          "properties": {
                            "canSelectTrialPlan": {
                              "description": "Can customer select trial plan for that service (if it exists)?",
                              "type": "boolean"
                            },
                            "lastTrialPlanExpirationTime": {
                              "format": "dateTime",
                              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                              "type": "string"
                            },
                            "currentBillingPeriod": {
                              "description": "Billing plans for a given period",
                              "properties": {
                                "startTime": {
                                  "format": "dateTime",
                                  "description": "Inclusive start of the period",
                                  "type": "string"
                                },
                                "endTime": {
                                  "format": "dateTime",
                                  "description": "Exclusive end of the period.",
                                  "type": "string"
                                },
                                "byAccount": {
                                  "description": "Selection of a billing plan",
                                  "properties": {
                                    "count": {
                                      "description": "Number of instances of the billing plan.",
                                      "type": "integer"
                                    },
                                    "plan": {
                                      "description": "Billing Plan",
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The Billing Plan ID",
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version of the Billing Plan schema",
                                          "type": "string"
                                        },
                                        "price": {
                                          "description": "Price of the Billing Plan",
                                          "type": "number"
                                        },
                                        "paymentSource": {
                                          "description": "Service that receives payments for this billing plan.",
                                          "enum": [
                                            "None",
                                            "AppCenter",
                                            "GitHub",
                                            "Xtc"
                                          ],
                                          "type": "string"
                                        },
                                        "service": {
                                          "description": "Name of the service that the plan applies to.",
                                          "enum": [
                                            "Build",
                                            "Test"
                                          ],
                                          "type": "string"
                                        },
                                        "limits": {
                                          "description": "A collection of named numeric values",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "number"
                                          }
                                        },
                                        "attributes": {
                                          "description": "Collection of attribute values.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "object"
                                          }
                                        },
                                        "parentId": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "testService": {
                          "description": "Billing Plans for a single service",
                          "type": "object",
                          "properties": {
                            "canSelectTrialPlan": {
                              "description": "Can customer select trial plan for that service (if it exists)?",
                              "type": "boolean"
                            },
                            "lastTrialPlanExpirationTime": {
                              "format": "dateTime",
                              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                              "type": "string"
                            },
                            "currentBillingPeriod": {
                              "description": "Billing plans for a given period",
                              "properties": {
                                "startTime": {
                                  "format": "dateTime",
                                  "description": "Inclusive start of the period",
                                  "type": "string"
                                },
                                "endTime": {
                                  "format": "dateTime",
                                  "description": "Exclusive end of the period.",
                                  "type": "string"
                                },
                                "byAccount": {
                                  "description": "Selection of a billing plan",
                                  "properties": {
                                    "count": {
                                      "description": "Number of instances of the billing plan.",
                                      "type": "integer"
                                    },
                                    "plan": {
                                      "description": "Billing Plan",
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The Billing Plan ID",
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version of the Billing Plan schema",
                                          "type": "string"
                                        },
                                        "price": {
                                          "description": "Price of the Billing Plan",
                                          "type": "number"
                                        },
                                        "paymentSource": {
                                          "description": "Service that receives payments for this billing plan.",
                                          "enum": [
                                            "None",
                                            "AppCenter",
                                            "GitHub",
                                            "Xtc"
                                          ],
                                          "type": "string"
                                        },
                                        "service": {
                                          "description": "Name of the service that the plan applies to.",
                                          "enum": [
                                            "Build",
                                            "Test"
                                          ],
                                          "type": "string"
                                        },
                                        "limits": {
                                          "description": "A collection of named numeric values",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "number"
                                          }
                                        },
                                        "attributes": {
                                          "description": "Collection of attribute values.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "object"
                                          }
                                        },
                                        "parentId": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "usage": {
                      "description": "Usage section in the Billing Information",
                      "type": "object",
                      "properties": {
                        "buildService": {
                          "description": "Resource usage for a single Mobile Center service",
                          "type": "object",
                          "properties": {
                            "currentUsagePeriod": {
                              "description": "Usage for a single period",
                              "type": "object",
                              "properties": {
                                "startTime": {
                                  "format": "dateTime",
                                  "description": "Inclusive start time of the usage period",
                                  "type": "string"
                                },
                                "endTime": {
                                  "format": "dateTime",
                                  "description": "Exclusive end time of the usage period.",
                                  "type": "string"
                                },
                                "byAccount": {
                                  "description": "A collection of named numeric values",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "number"
                                  }
                                },
                                "byApp": {
                                  "description": "A collection of  named numeric values grouped by app",
                                  "type": "object",
                                  "additionalProperties": {
                                    "description": "A collection of named numeric values",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "testService": {
                          "description": "Resource usage for a single Mobile Center service",
                          "type": "object",
                          "properties": {
                            "currentUsagePeriod": {
                              "description": "Usage for a single period",
                              "type": "object",
                              "properties": {
                                "startTime": {
                                  "format": "dateTime",
                                  "description": "Inclusive start time of the usage period",
                                  "type": "string"
                                },
                                "endTime": {
                                  "format": "dateTime",
                                  "description": "Exclusive end time of the usage period.",
                                  "type": "string"
                                },
                                "byAccount": {
                                  "description": "A collection of named numeric values",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "number"
                                  }
                                },
                                "byApp": {
                                  "description": "A collection of  named numeric values grouped by app",
                                  "type": "object",
                                  "additionalProperties": {
                                    "description": "A collection of named numeric values",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "azureSubscriptionId": {
                      "description": "Unique identifier for the Azure subscription used for billing",
                      "type": "string"
                    },
                    "azureSubscriptionState": {
                      "description": "State of the Azure subscription used for billing",
                      "enum": [
                        "Enabled",
                        "Disabled",
                        "NotSet"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/azure_subscriptions": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of azure subscriptions for the user",
        "operationId": "azureSubscription_listForUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "subscription_id",
                  "tenant_id",
                  "subscription_name"
                ],
                "properties": {
                  "subscription_id": {
                    "format": "uuid",
                    "description": "The azure subscription id",
                    "type": "string"
                  },
                  "tenant_id": {
                    "format": "uuid",
                    "description": "The tenant id of the azure subscription belongs to",
                    "type": "string"
                  },
                  "subscription_name": {
                    "description": "The name of the azure subscription",
                    "type": "string"
                  },
                  "is_billing": {
                    "description": "If the subscription is used for billing",
                    "type": "boolean"
                  },
                  "is_billable": {
                    "description": "If the subscription can be used for billing",
                    "type": "boolean"
                  },
                  "is_microsoft_internal": {
                    "description": "If the subscription is internal Microsoft subscription",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "default": {
            "description": "BadRequest",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/xcode_versions": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Gets the Xcode versions available to this app",
        "operationId": "builds_listXcodeVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A list of Xcode versions",
              "type": "array",
              "items": {
                "description": "The Xcode version",
                "properties": {
                  "name": {
                    "description": "The version name",
                    "type": "string"
                  },
                  "current": {
                    "description": "If the Xcode is latest stable",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Gets the Xamarin SDK bundles available to this app",
        "operationId": "builds_listXamarinSDKBundles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A list of Xamarin SDK bundles",
              "type": "array",
              "items": {
                "description": "The Xamarin SDK bundle",
                "properties": {
                  "monoVersion": {
                    "description": "The Mono version",
                    "type": "string"
                  },
                  "sdkBundle": {
                    "description": "The Xamarin SDK version",
                    "type": "string"
                  },
                  "current": {
                    "description": "If the SDK is latest stable",
                    "type": "boolean"
                  },
                  "stable": {
                    "description": "If the SDK is stable",
                    "type": "boolean"
                  },
                  "xcodeVersions": {
                    "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/webhooks": {
      "get": {
        "tags": [
          "alerting"
        ],
        "description": "Get web hooks configured for a particular app",
        "operationId": "webhooks_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "List of alerting webhooks wrapped as operation result",
              "required": [
                "values"
              ],
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "description": "Alerting webhook",
                    "required": [
                      "name",
                      "url",
                      "event_types"
                    ],
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The unique id (UUID) of the webhook",
                        "type": "string"
                      },
                      "name": {
                        "description": "display name of the webhook",
                        "maxLength": 512,
                        "type": "string"
                      },
                      "url": {
                        "description": "target url of the webhook",
                        "type": "string"
                      },
                      "enabled": {
                        "description": "Allows eanble/disable webhook",
                        "type": "boolean"
                      },
                      "event_types": {
                        "description": "Event types enabled for webhook",
                        "type": "array",
                        "items": {
                          "description": "Alerting EventTypes enum",
                          "enum": [
                            "newCrashGroupCreated",
                            "newAppReleased"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Alerting service error",
              "allOf": [
                {
                  "description": "Generic result for any alerting API operation",
                  "required": [
                    "request_id"
                  ],
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "description": "Unique request identifier for tracking",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                      "enum": [
                        400,
                        404,
                        409,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/versions": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a list of application versions.",
        "operationId": "crashes_getAppVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "app_version_id",
                  "app_id",
                  "display_name",
                  "app_version"
                ],
                "type": "object",
                "properties": {
                  "app_version_id": {
                    "type": "string"
                  },
                  "app_id": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "app_version": {
                    "type": "string"
                  },
                  "build_number": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}": {
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Removes the user from the app",
        "operationId": "apps_removeUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_email",
            "description": "The user email of the user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "BadRequest",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Update user permission for the app",
        "operationId": "apps_updateUserPermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_email",
            "description": "The user email of the user to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "user_app_permissions_data",
            "description": "The value to update the user permission for the app.",
            "schema": {
              "required": [
                "permissions"
              ],
              "properties": {
                "permissions": {
                  "description": "The permissions the user has for the app",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "BadRequest",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/users": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the users associated with the app specified with the given app name which belongs to the given owner.",
        "operationId": "users_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "display_name",
                  "email",
                  "name",
                  "origin"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id (UUID) of the user",
                    "type": "string"
                  },
                  "avatar_url": {
                    "description": "The avatar URL of the user",
                    "type": "string"
                  },
                  "can_change_password": {
                    "description": "User is required to send an old password in order to change the password.",
                    "type": "boolean"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  },
                  "permissions": {
                    "description": "The permissions the user has for the app",
                    "type": "array",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    }
                  },
                  "origin": {
                    "description": "The creation origin of this user",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Gets a device set belonging to the user",
        "operationId": "test_getDeviceSetOfUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the device set",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Device Set",
              "description": "The name and devices of the device set",
              "required": [
                "id",
                "name",
                "owner",
                "deviceConfigurations"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Identifier of the device set",
                  "type": "string"
                },
                "manufacturerCount": {
                  "description": "The number of manufacturers in the device set's device selection",
                  "type": "number"
                },
                "name": {
                  "description": "Name of the device set",
                  "type": "string"
                },
                "slug": {
                  "description": "Slug of the device set",
                  "type": "string"
                },
                "owner": {
                  "title": "Device Set Owner",
                  "description": "The owner of a device set",
                  "required": [
                    "type",
                    "id",
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of account",
                      "type": "string"
                    },
                    "id": {
                      "description": "Account ID",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display name of the account",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the account",
                      "type": "string"
                    }
                  }
                },
                "osVersionCount": {
                  "description": "The number of os versions in the device set's device selection",
                  "type": "number"
                },
                "deviceConfigurations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique id of the device configuration",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "thumb": {
                            "type": "string"
                          }
                        }
                      },
                      "model": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "formFactor": {
                            "type": "string"
                          }
                        }
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "test"
        ],
        "description": "Updates a device set belonging to the user",
        "operationId": "test_updateDeviceSetOfUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the device set",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deviceSet",
            "required": true,
            "schema": {
              "title": "Device Set update information",
              "description": "The name of the device set and the list of device IDs",
              "required": [
                "devices",
                "name"
              ],
              "properties": {
                "devices": {
                  "description": "List of device IDs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "The name of the device set",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Device Set",
              "description": "The name and devices of the device set",
              "required": [
                "id",
                "name",
                "owner",
                "deviceConfigurations"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Identifier of the device set",
                  "type": "string"
                },
                "manufacturerCount": {
                  "description": "The number of manufacturers in the device set's device selection",
                  "type": "number"
                },
                "name": {
                  "description": "Name of the device set",
                  "type": "string"
                },
                "slug": {
                  "description": "Slug of the device set",
                  "type": "string"
                },
                "owner": {
                  "title": "Device Set Owner",
                  "description": "The owner of a device set",
                  "required": [
                    "type",
                    "id",
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of account",
                      "type": "string"
                    },
                    "id": {
                      "description": "Account ID",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display name of the account",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the account",
                      "type": "string"
                    }
                  }
                },
                "osVersionCount": {
                  "description": "The number of os versions in the device set's device selection",
                  "type": "number"
                },
                "deviceConfigurations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique id of the device configuration",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "thumb": {
                            "type": "string"
                          }
                        }
                      },
                      "model": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "formFactor": {
                            "type": "string"
                          }
                        }
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid list of device IDs or conflicting name",
            "schema": {
              "title": "Test Cloud Error Details",
              "description": "Details of a failed operation",
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the operation",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable message that describes the error",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "test"
        ],
        "description": "Deletes a device set belonging to the user",
        "operationId": "test_deleteDeviceSetOfUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the device set",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/user/device_sets": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists device sets belonging to the user",
        "operationId": "test_listDeviceSetsOfUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "title": "Device Set",
                "description": "The name and devices of the device set",
                "required": [
                  "id",
                  "name",
                  "owner",
                  "deviceConfigurations"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Identifier of the device set",
                    "type": "string"
                  },
                  "manufacturerCount": {
                    "description": "The number of manufacturers in the device set's device selection",
                    "type": "number"
                  },
                  "name": {
                    "description": "Name of the device set",
                    "type": "string"
                  },
                  "slug": {
                    "description": "Slug of the device set",
                    "type": "string"
                  },
                  "owner": {
                    "title": "Device Set Owner",
                    "description": "The owner of a device set",
                    "required": [
                      "type",
                      "id",
                      "name"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Type of account",
                        "type": "string"
                      },
                      "id": {
                        "description": "Account ID",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "Display name of the account",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the account",
                        "type": "string"
                      }
                    }
                  },
                  "osVersionCount": {
                    "description": "The number of os versions in the device set's device selection",
                    "type": "number"
                  },
                  "deviceConfigurations": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id of the device configuration",
                          "type": "string"
                        },
                        "image": {
                          "properties": {
                            "thumb": {
                              "type": "string"
                            }
                          }
                        },
                        "model": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "manufacturer": {
                              "type": "string"
                            },
                            "releaseDate": {
                              "type": "string"
                            },
                            "formFactor": {
                              "type": "string"
                            }
                          }
                        },
                        "os": {
                          "type": "string"
                        },
                        "osName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "test"
        ],
        "description": "Creates a device set belonging to the user",
        "operationId": "test_createDeviceSetOfUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deviceSet",
            "required": true,
            "schema": {
              "title": "Device Set update information",
              "description": "The name of the device set and the list of device IDs",
              "required": [
                "devices",
                "name"
              ],
              "properties": {
                "devices": {
                  "description": "List of device IDs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "The name of the device set",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "title": "Device Set",
              "description": "The name and devices of the device set",
              "required": [
                "id",
                "name",
                "owner",
                "deviceConfigurations"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Identifier of the device set",
                  "type": "string"
                },
                "manufacturerCount": {
                  "description": "The number of manufacturers in the device set's device selection",
                  "type": "number"
                },
                "name": {
                  "description": "Name of the device set",
                  "type": "string"
                },
                "slug": {
                  "description": "Slug of the device set",
                  "type": "string"
                },
                "owner": {
                  "title": "Device Set Owner",
                  "description": "The owner of a device set",
                  "required": [
                    "type",
                    "id",
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of account",
                      "type": "string"
                    },
                    "id": {
                      "description": "Account ID",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display name of the account",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the account",
                      "type": "string"
                    }
                  }
                },
                "osVersionCount": {
                  "description": "The number of os versions in the device set's device selection",
                  "type": "number"
                },
                "deviceConfigurations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique id of the device configuration",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "thumb": {
                            "type": "string"
                          }
                        }
                      },
                      "model": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "formFactor": {
                            "type": "string"
                          }
                        }
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid list of device IDs or conflicting name",
            "schema": {
              "title": "Test Cloud Error Details",
              "description": "Details of a failed operation",
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the operation",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable message that describes the error",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/transfer_to_org": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Transfers ownership of an app to a new organization",
        "operationId": "apps_transferToOrg",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Transfers ownership of an app to a different user or organization",
        "operationId": "apps_transferOwnership",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "destination_owner_name",
            "description": "The name of the owner (user or organization) to which the app is being transferred",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/toolsets": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns available toolsets for application",
        "operationId": "builds_listToolsets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tools",
            "description": "Toolset name",
            "type": "string",
            "enum": [
              "xamarin",
              "xcode",
              "node"
            ]
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Set of toolsets available for app",
              "type": "object",
              "properties": {
                "xamarin": {
                  "description": "A list of Xamarin SDK bundles",
                  "type": "array",
                  "items": {
                    "description": "The Xamarin SDK bundle",
                    "properties": {
                      "monoVersion": {
                        "description": "The Mono version",
                        "type": "string"
                      },
                      "sdkBundle": {
                        "description": "The Xamarin SDK version",
                        "type": "string"
                      },
                      "current": {
                        "description": "If the SDK is latest stable",
                        "type": "boolean"
                      },
                      "stable": {
                        "description": "If the SDK is stable",
                        "type": "boolean"
                      },
                      "xcodeVersions": {
                        "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "xcode": {
                  "description": "A list of Xcode versions",
                  "type": "array",
                  "items": {
                    "description": "The Xcode version",
                    "properties": {
                      "name": {
                        "description": "The version name",
                        "type": "string"
                      },
                      "current": {
                        "description": "If the Xcode is latest stable",
                        "type": "boolean"
                      }
                    }
                  }
                },
                "node": {
                  "description": "A list of Node versions",
                  "type": "array",
                  "items": {
                    "description": "The Node version",
                    "properties": {
                      "name": {
                        "description": "The version name",
                        "type": "string"
                      },
                      "current": {
                        "description": "If the Node version is default for AppCenter",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}": {
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Delete the given tester from the all releases",
        "operationId": "releases_deleteTesterFromDestinations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tester_id",
            "description": "The id of the tester",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Tester can't be found\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/testers": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the testers associated with the app specified with the given app name which belongs to the given owner.",
        "operationId": "apps_listTesters",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "display_name",
                  "email",
                  "name",
                  "origin"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id (UUID) of the user",
                    "type": "string"
                  },
                  "avatar_url": {
                    "description": "The avatar URL of the user",
                    "type": "string"
                  },
                  "can_change_password": {
                    "description": "User is required to send an old password in order to change the password.",
                    "type": "boolean"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  },
                  "permissions": {
                    "description": "The permissions the user has for the app",
                    "type": "array",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    }
                  },
                  "origin": {
                    "description": "The creation origin of this user",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Returns list of all test runs for a given test series",
        "operationId": "test_getAllTestRunsForSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_series_slug",
            "description": "The slug of the test series",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "title": "Test Run",
                "description": "Summary single test run on Xamarin Test Cloud",
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id of the test upload",
                    "type": "string"
                  },
                  "date": {
                    "description": "The date and time the test was uploaded",
                    "type": "string"
                  },
                  "appVersion": {
                    "description": "The compiled version of the app binary",
                    "type": "string"
                  },
                  "testSeries": {
                    "description": "The name of the test series with which this test upload is associated",
                    "type": "string"
                  },
                  "platform": {
                    "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                    "type": "string"
                  },
                  "runStatus": {
                    "description": "The current status of the test run, in relation to the various phases",
                    "type": "string"
                  },
                  "resultStatus": {
                    "description": "The passed/failed state",
                    "type": "string"
                  },
                  "state": {
                    "description": "Deprecated. Use runStatus instead.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Deprecated. Use resultStatus instead.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Human readable explanation of the current test status",
                    "type": "string"
                  },
                  "stats": {
                    "title": "Test Run Statistics",
                    "description": "Summary single test run on Xamarin Test Cloud",
                    "type": "object",
                    "properties": {
                      "devices": {
                        "description": "Number of devices running the test",
                        "type": "number"
                      },
                      "devicesFinished": {
                        "description": "Number of finished devices",
                        "type": "number"
                      },
                      "devicesFailed": {
                        "description": "Number of failed devices",
                        "type": "number"
                      },
                      "total": {
                        "description": "Number of tests in total",
                        "type": "number"
                      },
                      "passed": {
                        "description": "Number of passed tests",
                        "type": "number"
                      },
                      "failed": {
                        "description": "Number of failed tests",
                        "type": "number"
                      },
                      "skipped": {
                        "description": "Number of skipped tests",
                        "type": "number"
                      },
                      "peakMemory": {
                        "description": "The max amount of MB used during the test run",
                        "type": "number"
                      },
                      "totalDeviceMinutes": {
                        "description": "The number of minutes of device time the test has been runnign",
                        "type": "number"
                      }
                    }
                  },
                  "testType": {
                    "description": "The name of the test framework used to run this test",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}": {
      "delete": {
        "tags": [
          "test"
        ],
        "description": "Deletes a single test series",
        "operationId": "test_deleteTestSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_series_slug",
            "description": "The slug of the test series",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Test series was successfully removed"
          },
          "404": {
            "description": "The test series was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "test"
        ],
        "description": "Updates name and slug of a test series",
        "operationId": "test_patchTestSeries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_series_slug",
            "description": "The slug of the test series",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "name",
            "required": true,
            "schema": {
              "title": "Name of the test series",
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the new test series",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test series was successfully patched",
            "schema": {
              "title": "Test Series",
              "description": "Summary of a single test series",
              "required": [
                "slug",
                "name"
              ],
              "type": "object",
              "properties": {
                "slug": {
                  "description": "Unique, human-readable identifier of the test series",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the test series",
                  "type": "string"
                },
                "mostRecentActivity": {
                  "format": "dateTime",
                  "description": "Date of the latest test run that used this test series",
                  "type": "string"
                },
                "testRuns": {
                  "description": "Most recent test runs",
                  "type": "array",
                  "items": {
                    "title": "Test Run Summary",
                    "description": "Most important information about a test run.",
                    "type": "object",
                    "properties": {
                      "date": {
                        "format": "dateTime",
                        "description": "Date of the test run.",
                        "type": "string"
                      },
                      "statusDescription": {
                        "description": "Human-readable status of the test run.",
                        "type": "string"
                      },
                      "failed": {
                        "description": "Number of failed tests",
                        "type": "number"
                      },
                      "passed": {
                        "description": "Number of passed tests",
                        "type": "number"
                      },
                      "completed": {
                        "description": "Tells whether the test run has completed",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The new test series name is incorrect"
          },
          "404": {
            "description": "Test series with the given slug name was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_series": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Returns list of all test series for an application",
        "operationId": "test_getAllTestSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "A query string to filter test series",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "title": "Test Series",
                "description": "Summary of a single test series",
                "required": [
                  "slug",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique, human-readable identifier of the test series",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the test series",
                    "type": "string"
                  },
                  "mostRecentActivity": {
                    "format": "dateTime",
                    "description": "Date of the latest test run that used this test series",
                    "type": "string"
                  },
                  "testRuns": {
                    "description": "Most recent test runs",
                    "type": "array",
                    "items": {
                      "title": "Test Run Summary",
                      "description": "Most important information about a test run.",
                      "type": "object",
                      "properties": {
                        "date": {
                          "format": "dateTime",
                          "description": "Date of the test run.",
                          "type": "string"
                        },
                        "statusDescription": {
                          "description": "Human-readable status of the test run.",
                          "type": "string"
                        },
                        "failed": {
                          "description": "Number of failed tests",
                          "type": "number"
                        },
                        "passed": {
                          "description": "Number of passed tests",
                          "type": "number"
                        },
                        "completed": {
                          "description": "Tells whether the test run has completed",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "test"
        ],
        "description": "Creates new test series for an application",
        "operationId": "test_createTestSeries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "testSeriesName",
            "required": true,
            "schema": {
              "title": "Name of the test series",
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the new test series",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Series",
              "description": "Summary of a single test series",
              "required": [
                "slug",
                "name"
              ],
              "type": "object",
              "properties": {
                "slug": {
                  "description": "Unique, human-readable identifier of the test series",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the test series",
                  "type": "string"
                },
                "mostRecentActivity": {
                  "format": "dateTime",
                  "description": "Date of the latest test run that used this test series",
                  "type": "string"
                },
                "testRuns": {
                  "description": "Most recent test runs",
                  "type": "array",
                  "items": {
                    "title": "Test Run Summary",
                    "description": "Most important information about a test run.",
                    "type": "object",
                    "properties": {
                      "date": {
                        "format": "dateTime",
                        "description": "Date of the test run.",
                        "type": "string"
                      },
                      "statusDescription": {
                        "description": "Human-readable status of the test run.",
                        "type": "string"
                      },
                      "failed": {
                        "description": "Number of failed tests",
                        "type": "number"
                      },
                      "passed": {
                        "description": "Number of passed tests",
                        "type": "number"
                      },
                      "completed": {
                        "description": "Tells whether the test run has completed",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid test series name",
            "schema": {
              "title": "Test Cloud Error Details",
              "description": "Details of a failed operation",
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the operation",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable message that describes the error",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop": {
      "put": {
        "tags": [
          "test"
        ],
        "description": "Stop a test run execution",
        "operationId": "test_stopTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run to be stopped",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Run",
              "description": "Summary single test run on Xamarin Test Cloud",
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id of the test upload",
                  "type": "string"
                },
                "date": {
                  "description": "The date and time the test was uploaded",
                  "type": "string"
                },
                "appVersion": {
                  "description": "The compiled version of the app binary",
                  "type": "string"
                },
                "testSeries": {
                  "description": "The name of the test series with which this test upload is associated",
                  "type": "string"
                },
                "platform": {
                  "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                  "type": "string"
                },
                "runStatus": {
                  "description": "The current status of the test run, in relation to the various phases",
                  "type": "string"
                },
                "resultStatus": {
                  "description": "The passed/failed state",
                  "type": "string"
                },
                "state": {
                  "description": "Deprecated. Use runStatus instead.",
                  "type": "string"
                },
                "status": {
                  "description": "Deprecated. Use resultStatus instead.",
                  "type": "string"
                },
                "description": {
                  "description": "Human readable explanation of the current test status",
                  "type": "string"
                },
                "stats": {
                  "title": "Test Run Statistics",
                  "description": "Summary single test run on Xamarin Test Cloud",
                  "type": "object",
                  "properties": {
                    "devices": {
                      "description": "Number of devices running the test",
                      "type": "number"
                    },
                    "devicesFinished": {
                      "description": "Number of finished devices",
                      "type": "number"
                    },
                    "devicesFailed": {
                      "description": "Number of failed devices",
                      "type": "number"
                    },
                    "total": {
                      "description": "Number of tests in total",
                      "type": "number"
                    },
                    "passed": {
                      "description": "Number of passed tests",
                      "type": "number"
                    },
                    "failed": {
                      "description": "Number of failed tests",
                      "type": "number"
                    },
                    "skipped": {
                      "description": "Number of skipped tests",
                      "type": "number"
                    },
                    "peakMemory": {
                      "description": "The max amount of MB used during the test run",
                      "type": "number"
                    },
                    "totalDeviceMinutes": {
                      "description": "The number of minutes of device time the test has been runnign",
                      "type": "number"
                    }
                  }
                },
                "testType": {
                  "description": "The name of the test framework used to run this test",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Test run with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Gets state of the test run",
        "operationId": "test_getTestRunState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Run State",
              "description": "Current status of a test run",
              "type": "object",
              "properties": {
                "message": {
                  "description": "Multi-line message that describes the status",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "wait_time": {
                  "description": "Time (in seconds) that the client should wait for before checking the status again",
                  "type": "integer"
                },
                "exit_code": {
                  "description": "The exit code that the client should use when exiting. Used for indicating status to the caller of the client.\n0: test run completes with no failing tests\n1: test run completes with at least one failing test\n2: test run failed to complete. Status for test run is unknown\n",
                  "type": "integer"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start": {
      "post": {
        "tags": [
          "test"
        ],
        "description": "Starts test run",
        "operationId": "test_startTestRun",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "startOptions",
            "description": "Option required to start the test run",
            "required": true,
            "schema": {
              "title": "Test Cloud Start Test Run Options",
              "description": "Options required to start the test run",
              "required": [
                "test_framework",
                "device_selection"
              ],
              "type": "object",
              "properties": {
                "test_framework": {
                  "description": "Test framework used by tests.",
                  "type": "string"
                },
                "device_selection": {
                  "description": "Device selection string.",
                  "type": "string"
                },
                "language": {
                  "description": "Language that should be used to run tests.",
                  "type": "string"
                },
                "locale": {
                  "description": "Locale that should be used to run tests.",
                  "type": "string"
                },
                "test_series": {
                  "description": "Name of the test series.",
                  "type": "string"
                },
                "test_parameters": {
                  "description": "A JSON dictionary with additional test parameters",
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Cloud Test Run Start Result",
              "description": "Result of starting a test run",
              "type": "object",
              "properties": {
                "accepted_devices": {
                  "description": "List with names of accepted devices",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "rejected_devices": {
                  "description": "List with names and descriptions of rejected devices",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Returns a single test report",
        "operationId": "test_getTestReport",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "required": [
                "app_upload_id",
                "date",
                "testType",
                "platform",
                "stats",
                "id",
                "schema_version",
                "revision",
                "features",
                "finished_device_snapshots",
                "device_logs",
                "date_finished"
              ],
              "properties": {
                "app_upload_id": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "testType": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "stats": {
                  "required": [
                    "os",
                    "devices",
                    "filesize",
                    "totalDeviceMinutes",
                    "devices_not_runned",
                    "failed",
                    "skipped",
                    "passed",
                    "total",
                    "devices_finished",
                    "devices_failed",
                    "devices_skipped",
                    "step_count"
                  ],
                  "type": "object",
                  "properties": {
                    "os": {
                      "type": "number"
                    },
                    "devices": {
                      "type": "number"
                    },
                    "filesize": {
                      "type": "number"
                    },
                    "totalDeviceMinutes": {
                      "type": "number"
                    },
                    "devices_not_runned": {
                      "type": "number"
                    },
                    "failed": {
                      "type": "number"
                    },
                    "skipped": {
                      "type": "number"
                    },
                    "passed": {
                      "type": "number"
                    },
                    "total": {
                      "type": "number"
                    },
                    "devices_finished": {
                      "type": "number"
                    },
                    "devices_failed": {
                      "type": "number"
                    },
                    "devices_skipped": {
                      "type": "number"
                    },
                    "step_count": {
                      "type": "number"
                    },
                    "artifacts": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "id": {
                  "type": "string"
                },
                "schema_version": {
                  "type": "number"
                },
                "revision": {
                  "type": "number"
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "tests": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "testName": {
                              "type": "string"
                            },
                            "runs": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "number": {
                                    "type": "number"
                                  },
                                  "steps": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "stepName": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "stepExecutions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "device_snapshot_id": {
                                                "type": "string"
                                              },
                                              "status": {
                                                "type": "string"
                                              },
                                              "timestamp": {
                                                "type": "number"
                                              }
                                            }
                                          }
                                        },
                                        "failed": {
                                          "type": "number"
                                        },
                                        "skipped": {
                                          "type": "number"
                                        },
                                        "step_report_url": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "failed": {
                                    "type": "number"
                                  },
                                  "skipped": {
                                    "type": "number"
                                  },
                                  "report_url": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "peakMemory": {
                              "type": "number"
                            },
                            "peakDuration": {
                              "type": "number"
                            }
                          }
                        }
                      },
                      "failed": {
                        "type": "number"
                      },
                      "skipped": {
                        "type": "number"
                      },
                      "peakMemory": {
                        "type": "number"
                      },
                      "peakDuration": {
                        "type": "number"
                      }
                    }
                  }
                },
                "finished_device_snapshots": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "device_logs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "device_snapshot_id": {
                        "type": "string"
                      },
                      "device_log": {
                        "type": "string"
                      },
                      "test_log": {
                        "type": "string"
                      },
                      "appium_log": {
                        "type": "string"
                      }
                    }
                  }
                },
                "date_finished": {
                  "type": "string"
                },
                "errorMessage": {
                  "type": "string"
                },
                "snapshot_fatal_errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "device_snapshot_id": {
                        "type": "string"
                      },
                      "error_message": {
                        "type": "string"
                      },
                      "error_title": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch": {
      "post": {
        "tags": [
          "test"
        ],
        "description": "Adds file with the given hash to a test run",
        "operationId": "test_uploadHashesBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "file_info",
            "description": "File hash information",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "title": "Test Cloud File Hash",
                "description": "Hash, type, path and byte range of a file that is required in test run",
                "required": [
                  "fileType",
                  "checksum",
                  "relativePath"
                ],
                "type": "object",
                "properties": {
                  "fileType": {
                    "description": "Type of the file",
                    "enum": [
                      "dsym-file",
                      "app-file",
                      "test-file"
                    ],
                    "type": "string"
                  },
                  "checksum": {
                    "description": "SHA256 hash of the file",
                    "type": "string"
                  },
                  "relativePath": {
                    "description": "Relative path of the file",
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "title": "Test Cloud File Hash Response",
                "description": "Response message for single uploaded file hash",
                "required": [
                  "fileType",
                  "checksum",
                  "uploadStatus"
                ],
                "type": "object",
                "properties": {
                  "fileType": {
                    "description": "Type of the file",
                    "enum": [
                      "dsym-file",
                      "app-file",
                      "test-file"
                    ],
                    "type": "string"
                  },
                  "checksum": {
                    "description": "SHA256 hash of the file",
                    "type": "string"
                  },
                  "relativePath": {
                    "description": "Relative path of the file",
                    "type": "string"
                  },
                  "uploadStatus": {
                    "title": "Test Cloud Hash Upload Status",
                    "description": "Status of the upload",
                    "required": [
                      "statusCode"
                    ],
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "description": "HTTP status code that represent result of upload",
                        "type": "number"
                      },
                      "location": {
                        "description": "URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes": {
      "post": {
        "tags": [
          "test"
        ],
        "description": "Adds file with the given hash to a test run",
        "operationId": "test_uploadHash",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "file_info",
            "description": "File hash information",
            "required": true,
            "schema": {
              "title": "Test Cloud File Hash",
              "description": "Hash, type, path and byte range of a file that is required in test run",
              "required": [
                "file_type",
                "checksum",
                "relative_path"
              ],
              "type": "object",
              "properties": {
                "file_type": {
                  "description": "Type of the file",
                  "enum": [
                    "dsym-file",
                    "app-file",
                    "test-file"
                  ],
                  "type": "string"
                },
                "checksum": {
                  "description": "SHA256 hash of the file",
                  "type": "string"
                },
                "relative_path": {
                  "description": "Relative path of the file",
                  "type": "string"
                },
                "byte_range": {
                  "description": "Range of bytes required to verify ownership of the file",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "Byte range verification required for given SHA256 hash",
            "headers": {
              "X-Challenge-Bytes": {
                "description": "Byte range required to authenticate the request",
                "type": "string"
              }
            }
          },
          "412": {
            "description": "File with given SHA256 hash doesn't exist and must be uploaded"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files": {
      "post": {
        "tags": [
          "test"
        ],
        "description": "Uploads file for a test run",
        "operationId": "test_startUploadingFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "File was created and can be uploaded",
            "headers": {
              "Location": {
                "description": "Relative URL that points to the upload endpoint",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Returns a single test runs",
        "operationId": "test_getTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Run",
              "description": "Summary single test run on Xamarin Test Cloud",
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id of the test upload",
                  "type": "string"
                },
                "date": {
                  "description": "The date and time the test was uploaded",
                  "type": "string"
                },
                "appVersion": {
                  "description": "The compiled version of the app binary",
                  "type": "string"
                },
                "testSeries": {
                  "description": "The name of the test series with which this test upload is associated",
                  "type": "string"
                },
                "platform": {
                  "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                  "type": "string"
                },
                "runStatus": {
                  "description": "The current status of the test run, in relation to the various phases",
                  "type": "string"
                },
                "resultStatus": {
                  "description": "The passed/failed state",
                  "type": "string"
                },
                "state": {
                  "description": "Deprecated. Use runStatus instead.",
                  "type": "string"
                },
                "status": {
                  "description": "Deprecated. Use resultStatus instead.",
                  "type": "string"
                },
                "description": {
                  "description": "Human readable explanation of the current test status",
                  "type": "string"
                },
                "stats": {
                  "title": "Test Run Statistics",
                  "description": "Summary single test run on Xamarin Test Cloud",
                  "type": "object",
                  "properties": {
                    "devices": {
                      "description": "Number of devices running the test",
                      "type": "number"
                    },
                    "devicesFinished": {
                      "description": "Number of finished devices",
                      "type": "number"
                    },
                    "devicesFailed": {
                      "description": "Number of failed devices",
                      "type": "number"
                    },
                    "total": {
                      "description": "Number of tests in total",
                      "type": "number"
                    },
                    "passed": {
                      "description": "Number of passed tests",
                      "type": "number"
                    },
                    "failed": {
                      "description": "Number of failed tests",
                      "type": "number"
                    },
                    "skipped": {
                      "description": "Number of skipped tests",
                      "type": "number"
                    },
                    "peakMemory": {
                      "description": "The max amount of MB used during the test run",
                      "type": "number"
                    },
                    "totalDeviceMinutes": {
                      "description": "The number of minutes of device time the test has been runnign",
                      "type": "number"
                    }
                  }
                },
                "testType": {
                  "description": "The name of the test framework used to run this test",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "test"
        ],
        "description": "Logically deletes a test run",
        "operationId": "test_archiveTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "test_run_id",
            "description": "The ID of the test run",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Run",
              "description": "Summary single test run on Xamarin Test Cloud",
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id of the test upload",
                  "type": "string"
                },
                "date": {
                  "description": "The date and time the test was uploaded",
                  "type": "string"
                },
                "appVersion": {
                  "description": "The compiled version of the app binary",
                  "type": "string"
                },
                "testSeries": {
                  "description": "The name of the test series with which this test upload is associated",
                  "type": "string"
                },
                "platform": {
                  "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                  "type": "string"
                },
                "runStatus": {
                  "description": "The current status of the test run, in relation to the various phases",
                  "type": "string"
                },
                "resultStatus": {
                  "description": "The passed/failed state",
                  "type": "string"
                },
                "state": {
                  "description": "Deprecated. Use runStatus instead.",
                  "type": "string"
                },
                "status": {
                  "description": "Deprecated. Use resultStatus instead.",
                  "type": "string"
                },
                "description": {
                  "description": "Human readable explanation of the current test status",
                  "type": "string"
                },
                "stats": {
                  "title": "Test Run Statistics",
                  "description": "Summary single test run on Xamarin Test Cloud",
                  "type": "object",
                  "properties": {
                    "devices": {
                      "description": "Number of devices running the test",
                      "type": "number"
                    },
                    "devicesFinished": {
                      "description": "Number of finished devices",
                      "type": "number"
                    },
                    "devicesFailed": {
                      "description": "Number of failed devices",
                      "type": "number"
                    },
                    "total": {
                      "description": "Number of tests in total",
                      "type": "number"
                    },
                    "passed": {
                      "description": "Number of passed tests",
                      "type": "number"
                    },
                    "failed": {
                      "description": "Number of failed tests",
                      "type": "number"
                    },
                    "skipped": {
                      "description": "Number of skipped tests",
                      "type": "number"
                    },
                    "peakMemory": {
                      "description": "The max amount of MB used during the test run",
                      "type": "number"
                    },
                    "totalDeviceMinutes": {
                      "description": "The number of minutes of device time the test has been runnign",
                      "type": "number"
                    }
                  }
                },
                "testType": {
                  "description": "The name of the test framework used to run this test",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Test run with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Returns a list of test runs",
        "operationId": "test_getTestRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "title": "Test Run",
                "description": "Summary single test run on Xamarin Test Cloud",
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id of the test upload",
                    "type": "string"
                  },
                  "date": {
                    "description": "The date and time the test was uploaded",
                    "type": "string"
                  },
                  "appVersion": {
                    "description": "The compiled version of the app binary",
                    "type": "string"
                  },
                  "testSeries": {
                    "description": "The name of the test series with which this test upload is associated",
                    "type": "string"
                  },
                  "platform": {
                    "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                    "type": "string"
                  },
                  "runStatus": {
                    "description": "The current status of the test run, in relation to the various phases",
                    "type": "string"
                  },
                  "resultStatus": {
                    "description": "The passed/failed state",
                    "type": "string"
                  },
                  "state": {
                    "description": "Deprecated. Use runStatus instead.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Deprecated. Use resultStatus instead.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Human readable explanation of the current test status",
                    "type": "string"
                  },
                  "stats": {
                    "title": "Test Run Statistics",
                    "description": "Summary single test run on Xamarin Test Cloud",
                    "type": "object",
                    "properties": {
                      "devices": {
                        "description": "Number of devices running the test",
                        "type": "number"
                      },
                      "devicesFinished": {
                        "description": "Number of finished devices",
                        "type": "number"
                      },
                      "devicesFailed": {
                        "description": "Number of failed devices",
                        "type": "number"
                      },
                      "total": {
                        "description": "Number of tests in total",
                        "type": "number"
                      },
                      "passed": {
                        "description": "Number of passed tests",
                        "type": "number"
                      },
                      "failed": {
                        "description": "Number of failed tests",
                        "type": "number"
                      },
                      "skipped": {
                        "description": "Number of skipped tests",
                        "type": "number"
                      },
                      "peakMemory": {
                        "description": "The max amount of MB used during the test run",
                        "type": "number"
                      },
                      "totalDeviceMinutes": {
                        "description": "The number of minutes of device time the test has been runnign",
                        "type": "number"
                      }
                    }
                  },
                  "testType": {
                    "description": "The name of the test framework used to run this test",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "test"
        ],
        "description": "Creates a new test run",
        "operationId": "test_createTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Location": {
                "description": "Relative URL that points to the test run",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists test run data",
        "operationId": "test_gdprExportTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "app_hash_file_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "locale": {
                  "type": "string"
                },
                "dsym_hash_file_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "app_hash_file_url": {
                  "type": "string"
                },
                "dsym_hash_file_url": {
                  "type": "string"
                },
                "app_icon_url": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists pipeline test data",
        "operationId": "test_gdprExportPipelineTest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "app_upload_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "test_parameters": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists hash file data",
        "operationId": "test_gdprExportHashFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists file set file data",
        "operationId": "test_gdprExportFileSetFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "hash_file_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "app_upload_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "hash_file_url": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/apps": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists app data",
        "operationId": "test_gdprExportApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "hash_files_url": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists all the endpoints available for Test apps data",
        "operationId": "test_gdprExportApps",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rel": {
                        "type": "string"
                      },
                      "path": {
                        "format": "URL",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/teams": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns the details of all teams that have access to the app.",
        "operationId": "apps_getTeams",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "required": [
                      "id",
                      "name",
                      "display_name"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The internal unique id (UUID) of the team.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the team",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the team",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the team",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "permissions": {
                        "description": "The permissions the team has for the app",
                        "type": "array",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Returns a particular symbol by id (uuid) for the provided application",
        "operationId": "symbols_getStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_id",
            "description": "The ID of the symbol (uuid of the symbol)",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A response containing information pertaining to a symbol status",
              "required": [
                "symbol_id",
                "app_id",
                "status"
              ],
              "properties": {
                "symbol_id": {
                  "description": "The unique id for this symbol (uuid)",
                  "type": "string"
                },
                "app_id": {
                  "description": "The application that this symbol belongs to",
                  "type": "string"
                },
                "status": {
                  "description": "Whether the symbol is ignored.",
                  "enum": [
                    "available",
                    "ignored",
                    "missing"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets the URL to download the symbol",
        "operationId": "symbols_getLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_id",
            "description": "The ID of the symbol (uuid of the symbol)",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Location for downloading symbol",
              "required": [
                "uri"
              ],
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore": {
      "post": {
        "tags": [
          "crash"
        ],
        "description": "Marks a symbol by id (uuid) as ignored",
        "operationId": "symbols_ignore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_id",
            "description": "The ID of the symbol (uuid of the symbol)",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "symbol_id",
                "platform",
                "type",
                "app_id",
                "url",
                "origin",
                "alternate_symbol_ids",
                "status",
                "symbol_upload_id"
              ],
              "properties": {
                "symbol_id": {
                  "description": "The unique id for this symbol (uuid)",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the symbol for the current symbol upload",
                  "enum": [
                    "Apple",
                    "JavaScript",
                    "Breakpad",
                    "AndroidProguard",
                    "UWP"
                  ],
                  "type": "string"
                },
                "app_id": {
                  "description": "The application that this symbol belongs to",
                  "type": "string"
                },
                "platform": {
                  "description": "The platform that this symbol is associated with",
                  "type": "string"
                },
                "url": {
                  "description": "The path name of the symbol file in blob storage",
                  "type": "string"
                },
                "origin": {
                  "description": "The origin of the symbol file",
                  "enum": [
                    "System",
                    "User"
                  ],
                  "type": "string"
                },
                "alternate_symbol_ids": {
                  "description": "The other symbols in the same file",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "status": {
                  "description": "Whether the symbol is ignored.",
                  "enum": [
                    "available",
                    "ignored"
                  ],
                  "type": "string"
                },
                "version": {
                  "description": "The version number. Optional for Apple. Required for Android.",
                  "type": "string"
                },
                "build": {
                  "description": "The build number. Optional for Apple. Required for Android.",
                  "type": "string"
                },
                "symbol_upload_id": {
                  "description": "The id of the symbol upload this symbol belongs to.",
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Returns a particular symbol by id (uuid) for the provided application",
        "operationId": "symbols_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_id",
            "description": "The ID of the symbol (uuid of the symbol)",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "symbol_id",
                "platform",
                "type",
                "app_id",
                "url",
                "origin",
                "alternate_symbol_ids",
                "status",
                "symbol_upload_id"
              ],
              "properties": {
                "symbol_id": {
                  "description": "The unique id for this symbol (uuid)",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the symbol for the current symbol upload",
                  "enum": [
                    "Apple",
                    "JavaScript",
                    "Breakpad",
                    "AndroidProguard",
                    "UWP"
                  ],
                  "type": "string"
                },
                "app_id": {
                  "description": "The application that this symbol belongs to",
                  "type": "string"
                },
                "platform": {
                  "description": "The platform that this symbol is associated with",
                  "type": "string"
                },
                "url": {
                  "description": "The path name of the symbol file in blob storage",
                  "type": "string"
                },
                "origin": {
                  "description": "The origin of the symbol file",
                  "enum": [
                    "System",
                    "User"
                  ],
                  "type": "string"
                },
                "alternate_symbol_ids": {
                  "description": "The other symbols in the same file",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "status": {
                  "description": "Whether the symbol is ignored.",
                  "enum": [
                    "available",
                    "ignored"
                  ],
                  "type": "string"
                },
                "version": {
                  "description": "The version number. Optional for Apple. Required for Android.",
                  "type": "string"
                },
                "build": {
                  "description": "The build number. Optional for Apple. Required for Android.",
                  "type": "string"
                },
                "symbol_upload_id": {
                  "description": "The id of the symbol upload this symbol belongs to.",
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Returns the list of all symbols for the provided application",
        "operationId": "symbols_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A response containing the list of symbols matching the specified filter (if any was provided)",
              "type": "array",
              "items": {
                "required": [
                  "symbol_id",
                  "platform",
                  "type",
                  "app_id",
                  "url",
                  "origin",
                  "alternate_symbol_ids",
                  "status",
                  "symbol_upload_id"
                ],
                "properties": {
                  "symbol_id": {
                    "description": "The unique id for this symbol (uuid)",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the symbol for the current symbol upload",
                    "enum": [
                      "Apple",
                      "JavaScript",
                      "Breakpad",
                      "AndroidProguard",
                      "UWP"
                    ],
                    "type": "string"
                  },
                  "app_id": {
                    "description": "The application that this symbol belongs to",
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform that this symbol is associated with",
                    "type": "string"
                  },
                  "url": {
                    "description": "The path name of the symbol file in blob storage",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The origin of the symbol file",
                    "enum": [
                      "System",
                      "User"
                    ],
                    "type": "string"
                  },
                  "alternate_symbol_ids": {
                    "description": "The other symbols in the same file",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "status": {
                    "description": "Whether the symbol is ignored.",
                    "enum": [
                      "available",
                      "ignored"
                    ],
                    "type": "string"
                  },
                  "version": {
                    "description": "The version number. Optional for Apple. Required for Android.",
                    "type": "string"
                  },
                  "build": {
                    "description": "The build number. Optional for Apple. Required for Android.",
                    "type": "string"
                  },
                  "symbol_upload_id": {
                    "description": "The id of the symbol upload this symbol belongs to.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets the URL to download the symbol upload",
        "operationId": "symbolUploads_getLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_upload_id",
            "description": "The ID of the symbol upload",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Location for downloading symbol upload",
              "required": [
                "uri"
              ],
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a symbol upload by id for the specified application",
        "operationId": "symbolUploads_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_upload_id",
            "description": "The ID of the symbol upload",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A single symbol upload entity",
              "required": [
                "symbol_upload_id",
                "app_id",
                "status",
                "symbol_type"
              ],
              "properties": {
                "symbol_upload_id": {
                  "description": "The id for the current symbol upload",
                  "type": "string"
                },
                "app_id": {
                  "description": "The application that this symbol upload belongs to",
                  "type": "string"
                },
                "user": {
                  "description": "User information of the one who intitiated the symbol upload",
                  "properties": {
                    "email": {
                      "description": "The email of the user",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    }
                  }
                },
                "status": {
                  "description": "The current status for the symbol upload",
                  "enum": [
                    "created",
                    "committed",
                    "aborted",
                    "processing",
                    "indexed",
                    "failed"
                  ],
                  "type": "string"
                },
                "symbol_type": {
                  "description": "The type of the symbol for the current symbol upload",
                  "enum": [
                    "Apple",
                    "JavaScript",
                    "Breakpad",
                    "AndroidProguard",
                    "UWP"
                  ],
                  "type": "string"
                },
                "symbols_uploaded": {
                  "description": "The symbols found in the upload. This may be empty until the status is indexed",
                  "type": "array",
                  "items": {
                    "required": [
                      "symbol_id",
                      "platform"
                    ],
                    "properties": {
                      "symbol_id": {
                        "description": "The symbol id of the symbol binary",
                        "type": "string"
                      },
                      "platform": {
                        "description": "The platform the symbol is associated with",
                        "type": "string"
                      }
                    }
                  }
                },
                "origin": {
                  "description": "The origin of the symbol upload",
                  "enum": [
                    "User",
                    "System"
                  ],
                  "type": "string"
                },
                "file_name": {
                  "description": "The file name for the symbol upload",
                  "type": "string"
                },
                "file_size": {
                  "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                  "type": "number"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "When the symbol upload was committed, or last transaction time if not committed",
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "crash"
        ],
        "description": "Commits or aborts the symbol upload process for a new set of symbols for the specified application",
        "operationId": "symbolUploads_complete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_upload_id",
            "description": "The ID of the symbol upload",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The symbol information",
            "required": true,
            "schema": {
              "description": "A request containing information pertaining to completing a symbol upload process",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "description": "The desired operation for the symbol upload",
                  "enum": [
                    "committed",
                    "aborted"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A single symbol upload entity",
              "required": [
                "symbol_upload_id",
                "app_id",
                "status",
                "symbol_type"
              ],
              "properties": {
                "symbol_upload_id": {
                  "description": "The id for the current symbol upload",
                  "type": "string"
                },
                "app_id": {
                  "description": "The application that this symbol upload belongs to",
                  "type": "string"
                },
                "user": {
                  "description": "User information of the one who intitiated the symbol upload",
                  "properties": {
                    "email": {
                      "description": "The email of the user",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    }
                  }
                },
                "status": {
                  "description": "The current status for the symbol upload",
                  "enum": [
                    "created",
                    "committed",
                    "aborted",
                    "processing",
                    "indexed",
                    "failed"
                  ],
                  "type": "string"
                },
                "symbol_type": {
                  "description": "The type of the symbol for the current symbol upload",
                  "enum": [
                    "Apple",
                    "JavaScript",
                    "Breakpad",
                    "AndroidProguard",
                    "UWP"
                  ],
                  "type": "string"
                },
                "symbols_uploaded": {
                  "description": "The symbols found in the upload. This may be empty until the status is indexed",
                  "type": "array",
                  "items": {
                    "required": [
                      "symbol_id",
                      "platform"
                    ],
                    "properties": {
                      "symbol_id": {
                        "description": "The symbol id of the symbol binary",
                        "type": "string"
                      },
                      "platform": {
                        "description": "The platform the symbol is associated with",
                        "type": "string"
                      }
                    }
                  }
                },
                "origin": {
                  "description": "The origin of the symbol upload",
                  "enum": [
                    "User",
                    "System"
                  ],
                  "type": "string"
                },
                "file_name": {
                  "description": "The file name for the symbol upload",
                  "type": "string"
                },
                "file_size": {
                  "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                  "type": "number"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "When the symbol upload was committed, or last transaction time if not committed",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "crash"
        ],
        "description": "Deletes a symbol upload by id for the specified application",
        "operationId": "symbolUploads_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_upload_id",
            "description": "The ID of the symbol upload",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A single symbol upload entity",
              "required": [
                "symbol_upload_id",
                "app_id",
                "status",
                "symbol_type"
              ],
              "properties": {
                "symbol_upload_id": {
                  "description": "The id for the current symbol upload",
                  "type": "string"
                },
                "app_id": {
                  "description": "The application that this symbol upload belongs to",
                  "type": "string"
                },
                "user": {
                  "description": "User information of the one who intitiated the symbol upload",
                  "properties": {
                    "email": {
                      "description": "The email of the user",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    }
                  }
                },
                "status": {
                  "description": "The current status for the symbol upload",
                  "enum": [
                    "created",
                    "committed",
                    "aborted",
                    "processing",
                    "indexed",
                    "failed"
                  ],
                  "type": "string"
                },
                "symbol_type": {
                  "description": "The type of the symbol for the current symbol upload",
                  "enum": [
                    "Apple",
                    "JavaScript",
                    "Breakpad",
                    "AndroidProguard",
                    "UWP"
                  ],
                  "type": "string"
                },
                "symbols_uploaded": {
                  "description": "The symbols found in the upload. This may be empty until the status is indexed",
                  "type": "array",
                  "items": {
                    "required": [
                      "symbol_id",
                      "platform"
                    ],
                    "properties": {
                      "symbol_id": {
                        "description": "The symbol id of the symbol binary",
                        "type": "string"
                      },
                      "platform": {
                        "description": "The platform the symbol is associated with",
                        "type": "string"
                      }
                    }
                  }
                },
                "origin": {
                  "description": "The origin of the symbol upload",
                  "enum": [
                    "User",
                    "System"
                  ],
                  "type": "string"
                },
                "file_name": {
                  "description": "The file name for the symbol upload",
                  "type": "string"
                },
                "file_size": {
                  "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                  "type": "number"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "When the symbol upload was committed, or last transaction time if not committed",
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a list of all uploads for the specified application",
        "operationId": "symbolUploads_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "top",
            "description": "The maximum number of results to return.",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.\n",
            "type": "string",
            "enum": [
              "all",
              "uploaded",
              "processed"
            ]
          },
          {
            "in": "query",
            "name": "symbol_type",
            "description": "The type of symbols",
            "type": "string",
            "enum": [
              "AndroidProguard",
              "Apple",
              "Breakpad",
              "JavaScript",
              "UWP"
            ]
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A set of symbol upload entities",
              "type": "array",
              "items": {
                "description": "A single symbol upload entity",
                "required": [
                  "symbol_upload_id",
                  "app_id",
                  "status",
                  "symbol_type"
                ],
                "properties": {
                  "symbol_upload_id": {
                    "description": "The id for the current symbol upload",
                    "type": "string"
                  },
                  "app_id": {
                    "description": "The application that this symbol upload belongs to",
                    "type": "string"
                  },
                  "user": {
                    "description": "User information of the one who intitiated the symbol upload",
                    "properties": {
                      "email": {
                        "description": "The email of the user",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The full name of the user. Might for example be first and last name",
                        "type": "string"
                      }
                    }
                  },
                  "status": {
                    "description": "The current status for the symbol upload",
                    "enum": [
                      "created",
                      "committed",
                      "aborted",
                      "processing",
                      "indexed",
                      "failed"
                    ],
                    "type": "string"
                  },
                  "symbol_type": {
                    "description": "The type of the symbol for the current symbol upload",
                    "enum": [
                      "Apple",
                      "JavaScript",
                      "Breakpad",
                      "AndroidProguard",
                      "UWP"
                    ],
                    "type": "string"
                  },
                  "symbols_uploaded": {
                    "description": "The symbols found in the upload. This may be empty until the status is indexed",
                    "type": "array",
                    "items": {
                      "required": [
                        "symbol_id",
                        "platform"
                      ],
                      "properties": {
                        "symbol_id": {
                          "description": "The symbol id of the symbol binary",
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform the symbol is associated with",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "origin": {
                    "description": "The origin of the symbol upload",
                    "enum": [
                      "User",
                      "System"
                    ],
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The file name for the symbol upload",
                    "type": "string"
                  },
                  "file_size": {
                    "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                    "type": "number"
                  },
                  "timestamp": {
                    "format": "date-time",
                    "description": "When the symbol upload was committed, or last transaction time if not committed",
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "crash"
        ],
        "description": "Begins the symbol upload process for a new set of symbols for the specified application",
        "operationId": "symbolUploads_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The symbol information",
            "required": true,
            "schema": {
              "description": "A request containing information pertaining to starting a symbol upload process",
              "required": [
                "symbol_type"
              ],
              "properties": {
                "symbol_type": {
                  "description": "The type of the symbol for the current symbol upload",
                  "enum": [
                    "Apple",
                    "JavaScript",
                    "Breakpad",
                    "AndroidProguard",
                    "UWP"
                  ],
                  "type": "string"
                },
                "client_callback": {
                  "description": "The callback URL that the client can optionally provide to get status updates for the current symbol upload",
                  "type": "string"
                },
                "file_name": {
                  "description": "The file name for the symbol upload",
                  "type": "string"
                },
                "build": {
                  "description": "The build number. Optional for Apple. Required for Android.",
                  "type": "string"
                },
                "version": {
                  "description": "The version number. Optional for Apple. Required for Android.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A response containing information pertaining to starting a symbol upload process",
              "required": [
                "symbol_upload_id",
                "upload_url",
                "expiration_date"
              ],
              "properties": {
                "symbol_upload_id": {
                  "description": "The id for the current upload",
                  "type": "string"
                },
                "upload_url": {
                  "description": "The URL where the client needs to upload the symbol blob to",
                  "type": "string"
                },
                "expiration_date": {
                  "format": "date-time",
                  "description": "Describes how long the upload_url is valid",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/subscriptions": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Get information about the currently active subscriptions, if any",
        "operationId": "test_getSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Subscription",
              "description": "Subscription information",
              "type": "object",
              "properties": {
                "startsAt": {
                  "format": "dateTime",
                  "description": "The date the subscription began",
                  "type": "string"
                },
                "endsAt": {
                  "format": "dateTime",
                  "description": "The date the subscription will end or ended",
                  "type": "string"
                },
                "daysLeft": {
                  "description": "The number of days left in the subscription",
                  "type": "number"
                },
                "tier": {
                  "title": "Subscription Tier",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the tier",
                      "type": "string"
                    }
                  }
                },
                "active": {
                  "description": "Is the subscription currently active?",
                  "type": "boolean"
                },
                "id": {
                  "format": "uuid",
                  "description": "Id of the subscription",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "test"
        ],
        "description": "Accept a free trial subscription",
        "operationId": "test_createSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "title": "Subscription",
              "description": "Subscription information",
              "type": "object",
              "properties": {
                "startsAt": {
                  "format": "dateTime",
                  "description": "The date the subscription began",
                  "type": "string"
                },
                "endsAt": {
                  "format": "dateTime",
                  "description": "The date the subscription will end or ended",
                  "type": "string"
                },
                "daysLeft": {
                  "description": "The number of days left in the subscription",
                  "type": "number"
                },
                "tier": {
                  "title": "Subscription Tier",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the tier",
                      "type": "string"
                    }
                  }
                },
                "active": {
                  "description": "Is the subscription currently active?",
                  "type": "boolean"
                },
                "id": {
                  "format": "uuid",
                  "description": "Id of the subscription",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/store_service_status": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Application specific store service status",
        "operationId": "storeNotifications_getNotificationByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Availability for store service status is stored in response schema.",
            "schema": {
              "properties": {
                "service": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "valid_until": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Gets the repositories available from the source code host",
        "operationId": "repositories_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "source_host",
            "description": "The source host",
            "required": true,
            "type": "string",
            "enum": [
              "github",
              "bitbucket",
              "vsts",
              "gitlab"
            ]
          },
          {
            "in": "query",
            "name": "vstsAccountName",
            "description": "Filter repositories only for specified account and project, \"vstsProjectId\" is required",
            "type": "string"
          },
          {
            "in": "query",
            "name": "vstsProjectId",
            "description": "Filter repositories only for specified account and project, \"vstsAccountName\" is required",
            "type": "string"
          },
          {
            "in": "query",
            "name": "service_connection_id",
            "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
            "type": "string"
          },
          {
            "in": "query",
            "name": "form",
            "description": "The selected form of the object",
            "type": "string",
            "enum": [
              "lite",
              "full"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A list of source repositories",
              "type": "array",
              "items": {
                "description": "The source repository",
                "properties": {
                  "name": {
                    "description": "The repository name",
                    "type": "string"
                  },
                  "clone_url": {
                    "description": "URL used to clone the repository",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/repo_config": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns the repository build configuration status of the app",
        "operationId": "repositoryConfigurations_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "includeInactive",
            "description": "Include inactive configurations if none are active",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of repository configurations",
            "schema": {
              "description": "A list of repo configurations",
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "type",
                  "state",
                  "repo_url"
                ],
                "allOf": [
                  {
                    "required": [
                      "repo_url"
                    ],
                    "allOf": [
                      {
                        "properties": {
                          "repo_url": {
                            "description": "The repository's git url, must be a HTTPS URL",
                            "type": "string",
                            "example": "https://github.com/foo/bar.git"
                          },
                          "repo_id": {
                            "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                            "type": "string"
                          },
                          "external_user_id": {
                            "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                            "type": "string"
                          },
                          "service_connection_id": {
                            "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                            "type": "string"
                          }
                        }
                      }
                    ],
                    "properties": {
                      "installation_id": {
                        "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                        "type": "string"
                      }
                    }
                  }
                ],
                "properties": {
                  "id": {
                    "description": "Repository configuration identifier",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of repository",
                    "type": "string"
                  },
                  "state": {
                    "description": "State of the configuration",
                    "enum": [
                      "unauthorized",
                      "inactive",
                      "active"
                    ],
                    "type": "string"
                  },
                  "user_email": {
                    "description": "Email of the user who linked the repository",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "build"
        ],
        "description": "Configures the repository for build",
        "operationId": "repositoryConfigurations_createOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "repo",
            "description": "The repository information",
            "required": true,
            "schema": {
              "required": [
                "repo_url"
              ],
              "allOf": [
                {
                  "properties": {
                    "repo_url": {
                      "description": "The repository's git url, must be a HTTPS URL",
                      "type": "string",
                      "example": "https://github.com/foo/bar.git"
                    },
                    "repo_id": {
                      "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                      "type": "string"
                    },
                    "external_user_id": {
                      "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                      "type": "string"
                    },
                    "service_connection_id": {
                      "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                      "type": "string"
                    }
                  }
                }
              ],
              "properties": {
                "installation_id": {
                  "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      },
      "delete": {
        "tags": [
          "build"
        ],
        "description": "Removes the configuration for the repository",
        "operationId": "repositoryConfigurations_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns the resign status to the caller",
        "operationId": "devices_getReleaseUpdateDevicesStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resign_id",
            "description": "The ID of the resign operation.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include_provisioning_profile",
            "description": "A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "The status of the resign operation.",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "description": "The status of the resign",
                  "type": "string"
                },
                "error_code": {
                  "description": "Error code for any error that occured during the resigning operation.",
                  "type": "string"
                },
                "error_message": {
                  "description": "Error message for any error that occured during the resigning operation.",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "<b>not_found</b>: A distribution group can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}": {
      "put": {
        "tags": [
          "distribute"
        ],
        "description": "Update details about the specified tester associated with the release",
        "operationId": "releases_putDistributionTester",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "tester_id",
            "description": "The id of the tester",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "destination_tester_update_details",
            "schema": {
              "required": [
                "mandatory_update"
              ],
              "type": "object",
              "properties": {
                "mandatory_update": {
                  "description": "Whether a release is mandatory for the given destination",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "A destination can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Delete the given tester from the release",
        "operationId": "releases_deleteDistributionTester",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "tester_id",
            "description": "The id of the tester",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Tester can't be found\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers": {
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Distributes a release to a user",
        "operationId": "releases_addTesters",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information.",
            "required": true,
            "schema": {
              "required": [
                "email"
              ],
              "type": "object",
              "properties": {
                "mandatory_update": {
                  "description": "Flag to mark the release for the provided destinations as mandatory",
                  "type": "boolean"
                },
                "email": {
                  "description": "Tester's email address",
                  "type": "string"
                },
                "notify_testers": {
                  "description": "Flag to enable or disable notifications to testers",
                  "default": true,
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Unique id for the release destination",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "mandatory_update"
                  ],
                  "type": "object",
                  "properties": {
                    "mandatory_update": {
                      "description": "Flag to mark the release for the provided destinations as mandatory",
                      "type": "boolean"
                    },
                    "provisioning_status_url": {
                      "description": "The url to check provisioning status.",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Release not found",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}": {
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Delete the given distribution store from the release",
        "operationId": "releases_deleteDistributionStore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "store_id",
            "description": "The id of the distribution store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Distribution store destination can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores": {
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Distributes a release to a store",
        "operationId": "releases_addStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information.",
            "required": true,
            "schema": {
              "required": [
                "id"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "Unique id of the release destination",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "required": [
                "id"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Unique id for the release destination",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Release not found",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return information about the provisioning profile. Only available for iOS.",
        "operationId": "provisioning_profile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The release_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProvisioningProfileResponse"
            }
          },
          "400": {
            "description": "The app's OS is not iOS.",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}": {
      "put": {
        "tags": [
          "distribute"
        ],
        "description": "Update details about the specified distribution group associated with the release",
        "operationId": "releases_putDistributionGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "group_id",
            "description": "The id of the releases destination",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "destination_group_update_details",
            "schema": {
              "required": [
                "mandatory_update"
              ],
              "type": "object",
              "properties": {
                "mandatory_update": {
                  "description": "Whether a release is mandatory for the given destination",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "A destination can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Delete the given distribution group from the release",
        "operationId": "releases_deleteDistributionGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "group_id",
            "description": "The id of the distribution group",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Distribution group destination can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups": {
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Distributes a release to a group",
        "operationId": "releases_addDistributionGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information.",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "Unique id of the release destination",
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "mandatory_update": {
                      "description": "Flag to mark the release for the provided destinations as mandatory",
                      "type": "boolean"
                    },
                    "notify_testers": {
                      "description": "Flag to enable or disable notifications to testers",
                      "default": true,
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Unique id for the release destination",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "mandatory_update"
                  ],
                  "type": "object",
                  "properties": {
                    "mandatory_update": {
                      "description": "Flag to mark the release for the provided destinations as mandatory",
                      "type": "boolean"
                    },
                    "provisioning_status_url": {
                      "description": "The url to check provisioning status.",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Release not found",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).",
        "operationId": "releases_getLatestByUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "udid",
            "description": "when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Details of an uploaded release",
              "required": [
                "id",
                "app_name",
                "app_display_name",
                "uploaded_at",
                "version",
                "short_version",
                "app_icon_url",
                "enabled"
              ],
              "properties": {
                "id": {
                  "description": "ID identifying this unique release.",
                  "type": "integer"
                },
                "app_name": {
                  "description": "The app's name (extracted from the uploaded release).",
                  "type": "string"
                },
                "app_display_name": {
                  "description": "The app's display name.",
                  "type": "string"
                },
                "app_os": {
                  "description": "The app's OS.",
                  "type": "string"
                },
                "version": {
                  "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                  "type": "string"
                },
                "origin": {
                  "description": "The release's origin",
                  "enum": [
                    "hockeyapp",
                    "appcenter"
                  ],
                  "type": "string"
                },
                "short_version": {
                  "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                  "type": "string"
                },
                "release_notes": {
                  "description": "The release's release notes.",
                  "type": "string"
                },
                "provisioning_profile_name": {
                  "description": "The release's provisioning profile name.",
                  "type": "string"
                },
                "provisioning_profile_type": {
                  "description": "The type of the provisioning profile for the requested app version.",
                  "enum": [
                    "adhoc",
                    "enterprise",
                    "other"
                  ],
                  "type": "string"
                },
                "provisioning_profile_expiry_date": {
                  "description": "expiration date of provisioning profile in UTC format.",
                  "type": "string"
                },
                "is_provisioning_profile_syncing": {
                  "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                  "type": "boolean"
                },
                "size": {
                  "description": "The release's size in bytes.",
                  "type": "integer"
                },
                "min_os": {
                  "description": "The release's minimum required operating system.",
                  "type": "string"
                },
                "device_family": {
                  "description": "The release's device family.",
                  "type": "string"
                },
                "android_min_api_level": {
                  "description": "The release's minimum required Android API level.",
                  "type": "string"
                },
                "bundle_identifier": {
                  "description": "The identifier of the apps bundle.",
                  "type": "string"
                },
                "package_hashes": {
                  "description": "Hashes for the packages.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "fingerprint": {
                  "description": "MD5 checksum of the release binary.",
                  "type": "string"
                },
                "uploaded_at": {
                  "description": "UTC time in ISO 8601 format of the uploaded time.",
                  "type": "string"
                },
                "download_url": {
                  "description": "The URL that hosts the binary for this release.",
                  "type": "string"
                },
                "app_icon_url": {
                  "description": "A URL to the app's icon.",
                  "type": "string"
                },
                "install_url": {
                  "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                  "type": "string"
                },
                "destination_type": {
                  "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                  "enum": [
                    "group",
                    "store",
                    "tester"
                  ],
                  "type": "string"
                },
                "distribution_groups": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution group.",
                        "type": "string"
                      }
                    }
                  }
                },
                "distribution_stores": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution store.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution store.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                        "enum": [
                          "intune",
                          "googleplay",
                          "apple",
                          "none"
                        ],
                        "type": "string"
                      },
                      "publishing_status": {
                        "description": "publishing status of the release in the store.",
                        "type": "string"
                      }
                    }
                  }
                },
                "destinations": {
                  "description": "A list of distribution groups or stores.",
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution group.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution group.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution store.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution store.",
                                "type": "string"
                              },
                              "type": {
                                "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                "enum": [
                                  "intune",
                                  "googleplay",
                                  "apple",
                                  "none"
                                ],
                                "type": "string"
                              },
                              "publishing_status": {
                                "description": "publishing status of the release in the store.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution store.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "destination_type": {
                            "description": "Destination can be either store or group.",
                            "enum": [
                              "group",
                              "store",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "display_name": {
                            "description": "Display name for the group or tester",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "is_udid_provisioned": {
                  "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                  "type": "boolean"
                },
                "can_resign": {
                  "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                  "type": "boolean"
                },
                "build": {
                  "description": "Contains metadata about the build that produced the release being uploaded",
                  "type": "object",
                  "properties": {
                    "branch_name": {
                      "description": "The branch name of the build producing the release",
                      "type": "string"
                    },
                    "commit_hash": {
                      "description": "The commit hash of the build producing the release",
                      "type": "string"
                    },
                    "commit_message": {
                      "description": "The commit message of the build producing the release",
                      "type": "string"
                    }
                  }
                },
                "enabled": {
                  "description": "This value determines the whether a release currently is enabled or disabled.",
                  "type": "boolean"
                },
                "status": {
                  "description": "Status of the release.",
                  "type": "string"
                },
                "is_external_build": {
                  "description": "This value determines if a release is external or not.",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "`release_id` is not an integer or the string `latest`.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Error codes:\n- `not_found` - A release or an app can't be found.\n- `no_releases_for_user` - No releases available for that user (will only be returned when `release_id` is `latest`)\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "distribute"
        ],
        "description": "Update details of a release.",
        "operationId": "releases_updateDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information.",
            "required": true,
            "schema": {
              "description": "A request containing information for updating details of a release",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Toggle this release to be enable distribute/download or not.",
                  "type": "boolean"
                },
                "release_notes": {
                  "description": "Release notes for this release.",
                  "type": "string"
                },
                "build": {
                  "description": "Contains metadata about the build that produced the release being uploaded",
                  "type": "object",
                  "properties": {
                    "branch_name": {
                      "description": "The branch name of the build producing the release",
                      "type": "string"
                    },
                    "commit_hash": {
                      "description": "The commit hash of the build producing the release",
                      "type": "string"
                    },
                    "commit_message": {
                      "description": "The commit message of the build producing the release",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Response for updating a release",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "mandatory_update": {
                  "type": "boolean"
                },
                "release_notes": {
                  "type": "string"
                },
                "provisioning_status_url": {
                  "type": "string"
                },
                "destinations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "allOf": [
                {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "release_notes": {
                      "type": "string"
                    },
                    "mandatory_update": {
                      "type": "boolean"
                    },
                    "destinations": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "code": {
                            "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "404": {
            "description": "Release not found",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "distribute"
        ],
        "description": "Updates a release.",
        "operationId": "releases_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information.",
            "required": true,
            "schema": {
              "description": "A request containing information for updating a release.",
              "properties": {
                "distribution_group_name": {
                  "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.\n",
                  "type": "string"
                },
                "distribution_group_id": {
                  "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.\n",
                  "type": "string"
                },
                "destination_name": {
                  "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.\n",
                  "type": "string"
                },
                "destination_id": {
                  "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.\n",
                  "type": "string"
                },
                "destination_type": {
                  "description": "Not used anymore.",
                  "type": "string"
                },
                "release_notes": {
                  "description": "Release notes for this release.",
                  "type": "string"
                },
                "mandatory_update": {
                  "description": "A boolean which determines whether this version should be a mandatory update or not.",
                  "type": "boolean"
                },
                "destinations": {
                  "description": "Distribute this release under the following list of destinations (store groups or distribution groups).",
                  "type": "array",
                  "items": {
                    "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                        "type": "string"
                      }
                    }
                  }
                },
                "build": {
                  "description": "Contains metadata about the build that produced the release being uploaded",
                  "type": "object",
                  "properties": {
                    "branch_name": {
                      "description": "The branch name of the build producing the release",
                      "type": "string"
                    },
                    "commit_hash": {
                      "description": "The commit hash of the build producing the release",
                      "type": "string"
                    },
                    "commit_message": {
                      "description": "The commit message of the build producing the release",
                      "type": "string"
                    }
                  }
                },
                "notify_testers": {
                  "description": "A boolean which determines whether to notify testers of a new release, default to true.",
                  "default": true,
                  "type": "boolean"
                },
                "metadata": {
                  "description": "An object containing all the release metadata.",
                  "type": "object",
                  "properties": {
                    "dsa_signature": {
                      "description": "dsa signature of the release for the sparkle feed.",
                      "type": "string"
                    },
                    "ed_signature": {
                      "description": "edDSA signature of the release for the sparkle feed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Response for updating release details",
              "properties": {
                "release_notes": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "allOf": [
                {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "release_notes": {
                      "type": "string"
                    },
                    "mandatory_update": {
                      "type": "boolean"
                    },
                    "destinations": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "code": {
                            "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "404": {
            "description": "Release not found",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Deletes a release.",
        "operationId": "releases_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the release",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "An app or a release couldn't be found\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "An internal error. if delete has partially failed **partially_deleted** error_code will be returned.\n- `partially_deleted`: Release was removed from all distribution groups, but couldn't be deleted from App Center.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return detailed information about releases avaiable to a tester.",
        "operationId": "releases_availableToTester",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "published_only",
            "description": "when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Basic information on a release",
                "required": [
                  "id",
                  "version",
                  "enabled",
                  "uploaded_at",
                  "short_version"
                ],
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "integer"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The release's origin",
                    "enum": [
                      "hockeyapp",
                      "appcenter"
                    ],
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "This value determines the whether a release currently is enabled or disabled.",
                    "type": "boolean"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "destination_type": {
                    "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
                    "enum": [
                      "group",
                      "store",
                      "tester"
                    ],
                    "type": "string"
                  },
                  "distribution_groups": {
                    "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution group.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution group.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution group.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "distribution_stores": {
                    "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution store.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution store.",
                              "type": "string"
                            },
                            "type": {
                              "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                              "enum": [
                                "intune",
                                "googleplay",
                                "apple",
                                "none"
                              ],
                              "type": "string"
                            },
                            "publishing_status": {
                              "description": "publishing status of the release in the store.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution store.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "destinations": {
                    "description": "A list of distribution groups or stores.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution group.",
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution group.",
                                  "type": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                  "enum": [
                                    "intune",
                                    "googleplay",
                                    "apple",
                                    "none"
                                  ],
                                  "type": "string"
                                },
                                "publishing_status": {
                                  "description": "publishing status of the release in the store.",
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution store.",
                                  "type": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                              "type": "string"
                            },
                            "id": {
                              "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "destination_type": {
                              "description": "Destination can be either store or group.",
                              "enum": [
                                "group",
                                "store",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "display_name": {
                              "description": "Display name for the group or tester",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "build": {
                    "description": "Build information for the release\n",
                    "type": "object",
                    "properties": {
                      "branch_name": {
                        "description": "The branch name of the build producing the release",
                        "type": "string"
                      },
                      "commit_hash": {
                        "description": "The commit hash of the build producing the release",
                        "type": "string"
                      },
                      "commit_message": {
                        "description": "The commit message of the build producing the release",
                        "type": "string"
                      }
                    }
                  },
                  "is_external_build": {
                    "description": "This value determines if a release is external or not.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return basic information about releases.",
        "operationId": "releases_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "published_only",
            "description": "When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "scope",
            "description": "When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Basic information on a release",
                "required": [
                  "id",
                  "version",
                  "enabled",
                  "uploaded_at",
                  "short_version"
                ],
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "integer"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The release's origin",
                    "enum": [
                      "hockeyapp",
                      "appcenter"
                    ],
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "This value determines the whether a release currently is enabled or disabled.",
                    "type": "boolean"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "destination_type": {
                    "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
                    "enum": [
                      "group",
                      "store",
                      "tester"
                    ],
                    "type": "string"
                  },
                  "distribution_groups": {
                    "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution group.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution group.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution group.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "distribution_stores": {
                    "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution store.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution store.",
                              "type": "string"
                            },
                            "type": {
                              "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                              "enum": [
                                "intune",
                                "googleplay",
                                "apple",
                                "none"
                              ],
                              "type": "string"
                            },
                            "publishing_status": {
                              "description": "publishing status of the release in the store.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution store.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "destinations": {
                    "description": "A list of distribution groups or stores.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution group.",
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution group.",
                                  "type": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                  "enum": [
                                    "intune",
                                    "googleplay",
                                    "apple",
                                    "none"
                                  ],
                                  "type": "string"
                                },
                                "publishing_status": {
                                  "description": "publishing status of the release in the store.",
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution store.",
                                  "type": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                              "type": "string"
                            },
                            "id": {
                              "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "destination_type": {
                              "description": "Destination can be either store or group.",
                              "enum": [
                                "group",
                                "store",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "display_name": {
                              "description": "Display name for the group or tester",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "build": {
                    "description": "Build information for the release\n",
                    "type": "object",
                    "properties": {
                      "branch_name": {
                        "description": "The branch name of the build producing the release",
                        "type": "string"
                      },
                      "commit_hash": {
                        "description": "The commit hash of the build producing the release",
                        "type": "string"
                      },
                      "commit_message": {
                        "description": "The commit message of the build producing the release",
                        "type": "string"
                      }
                    }
                  },
                  "is_external_build": {
                    "description": "This value determines if a release is external or not.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}": {
      "patch": {
        "tags": [
          "distribute"
        ],
        "description": "Commits or aborts the upload process for a release for the specified application",
        "operationId": "releaseUploads_complete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "upload_id",
            "description": "The ID of the upload",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information",
            "required": true,
            "schema": {
              "description": "A request containing information pertaining to complete a release upload process",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "description": "The desired operation for the upload",
                  "enum": [
                    "committed",
                    "aborted"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A response containing information about the uploaded release.",
              "properties": {
                "release_id": {
                  "description": "The ID of the release.",
                  "type": "number"
                },
                "release_url": {
                  "description": "A URL to the new release. If upload was aborted will be null.",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Unknown upload_id or status was committed but the upload hasn't finished."
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/release_uploads": {
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Begins the upload process for a new release for the specified application.",
        "operationId": "releaseUploads_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The release information",
            "required": true,
            "schema": {
              "description": "A request containing information pertaining to begin a release upload process",
              "properties": {
                "release_id": {
                  "description": "Optional value for explicitly specifying the ID of existing release.",
                  "type": "number"
                },
                "build_version": {
                  "description": "The build version of the uploaded binary, used for macOS, Windows and Custom app support.",
                  "type": "string"
                },
                "build_number": {
                  "description": "The build number of the uploaded binary, used with build_version for macOS app support.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "description": "A response containing information pertaining to starting a release upload process",
              "required": [
                "upload_id",
                "upload_url"
              ],
              "properties": {
                "upload_id": {
                  "description": "The ID for the current upload",
                  "type": "string"
                },
                "upload_url": {
                  "description": "The URL where the client needs to upload the release to",
                  "type": "string"
                },
                "asset_id": {
                  "description": "The ID for the current upload, reserved for future use",
                  "type": "string"
                },
                "asset_domain": {
                  "description": "The URL for the current upload, reserved for future use",
                  "type": "string"
                },
                "asset_token": {
                  "description": "The token for the current upload, reserved for future use",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/recent_releases": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Get the latest release from every distribution group associated with an application.",
        "operationId": "releases_listLatest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Basic information on a release",
                "required": [
                  "id",
                  "version",
                  "enabled",
                  "uploaded_at",
                  "short_version"
                ],
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "integer"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The release's origin",
                    "enum": [
                      "hockeyapp",
                      "appcenter"
                    ],
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "This value determines the whether a release currently is enabled or disabled.",
                    "type": "boolean"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "destination_type": {
                    "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
                    "enum": [
                      "group",
                      "store",
                      "tester"
                    ],
                    "type": "string"
                  },
                  "distribution_groups": {
                    "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution group.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution group.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution group.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "distribution_stores": {
                    "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution store.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution store.",
                              "type": "string"
                            },
                            "type": {
                              "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                              "enum": [
                                "intune",
                                "googleplay",
                                "apple",
                                "none"
                              ],
                              "type": "string"
                            },
                            "publishing_status": {
                              "description": "publishing status of the release in the store.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution store.",
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "destinations": {
                    "description": "A list of distribution groups or stores.",
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution group.",
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution group.",
                                  "type": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                  "enum": [
                                    "intune",
                                    "googleplay",
                                    "apple",
                                    "none"
                                  ],
                                  "type": "string"
                                },
                                "publishing_status": {
                                  "description": "publishing status of the release in the store.",
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution store.",
                                  "type": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                              "type": "string"
                            },
                            "id": {
                              "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "destination_type": {
                              "description": "Destination can be either store or group.",
                              "enum": [
                                "group",
                                "store",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "display_name": {
                              "description": "Display name for the group or tester",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "build": {
                    "description": "Build information for the release\n",
                    "type": "object",
                    "properties": {
                      "branch_name": {
                        "description": "The branch name of the build producing the release",
                        "type": "string"
                      },
                      "commit_hash": {
                        "description": "The commit hash of the build producing the release",
                        "type": "string"
                      },
                      "commit_message": {
                        "description": "The commit message of the build producing the release",
                        "type": "string"
                      }
                    }
                  },
                  "is_external_build": {
                    "description": "This value determines if a release is external or not.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/push/notifications_config": {
      "head": {
        "tags": [
          "push"
        ],
        "description": "Returns whether a push configuration exists for the selected app.",
        "operationId": "Push_ConfigExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Push config exists."
          },
          "404": {
            "description": "Push config does not exist."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "push"
        ],
        "description": "Get the push configuration for the selected app.",
        "operationId": "Push_GetConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Get push configuration.",
            "schema": {
              "description": "Generic notification configuration result.",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string"
                }
              },
              "discriminator": "type"
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "push"
        ],
        "description": "Set the push configuration for the selected app.",
        "operationId": "Push_SetConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "properties",
            "description": "Notification configurations.",
            "required": true,
            "schema": {
              "description": "Type of notification config (NotificationConfigAppleToken, NotificationConfigGoogle, NotificationConfigWindows). The 'type' property must be set to a valid value and the object must include the correct properties for the specified type.",
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "apns_token_config",
                    "gcm_config",
                    "wns_config"
                  ],
                  "type": "string"
                }
              },
              "discriminator": "type"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration was successfully set.",
            "schema": {
              "description": "Generic notification configuration result.",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string"
                }
              },
              "discriminator": "type"
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "push"
        ],
        "description": "Delete the push configuration for the selected app.",
        "operationId": "Push_DeleteConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration was successfully deleted."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/push/notifications/{notification_id}": {
      "get": {
        "tags": [
          "push"
        ],
        "description": "Get details about a specific notification.",
        "operationId": "Push_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "notification_id",
            "description": "The id of the notification.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification details",
            "schema": {
              "description": "Notification statistics",
              "required": [
                "notification_id",
                "state",
                "notification_content"
              ],
              "allOf": [
                {
                  "description": "Notification statistics",
                  "required": [
                    "notification_id",
                    "state"
                  ],
                  "type": "object",
                  "properties": {
                    "notification_id": {
                      "description": "Notification id.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Notification name",
                      "maxLength": 64,
                      "type": "string"
                    },
                    "notification_target": {
                      "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
                      "required": [
                        "type"
                      ],
                      "type": "object",
                      "properties": {
                        "type": {
                          "enum": [
                            "audiences_target",
                            "devices_target",
                            "user_ids_target",
                            "account_ids_target",
                            "broadcast_target"
                          ],
                          "type": "string"
                        }
                      },
                      "discriminator": "type"
                    },
                    "send_time": {
                      "format": "date-time",
                      "description": "Notification send time",
                      "type": "string"
                    },
                    "pns_send_failure": {
                      "format": "long",
                      "description": "Number of the notifications failed to send to the push provider.",
                      "type": "integer"
                    },
                    "pns_send_success": {
                      "format": "long",
                      "description": "Number of the notifications successfully sent to push the provider.",
                      "type": "integer"
                    },
                    "state": {
                      "description": "State of the notification.",
                      "enum": [
                        "Queued",
                        "Sending",
                        "Completed",
                        "Failed",
                        "NoTargetFound"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "name": "notification_states",
                        "modelAsString": true
                      }
                    }
                  }
                }
              ],
              "properties": {
                "notification_content": {
                  "description": "Notification definition object",
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Notification name",
                      "maxLength": 64,
                      "minLength": 3,
                      "type": "string"
                    },
                    "title": {
                      "description": "Notification title",
                      "maxLength": 128,
                      "type": "string"
                    },
                    "body": {
                      "description": "Notification body",
                      "maxLength": 4000,
                      "minLength": 1,
                      "type": "string"
                    },
                    "custom_data": {
                      "description": "Notification custom data (such as badge, color, sound, etc.)",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "failure_outcomes": {
                  "description": "Failture outcome counts",
                  "type": "array",
                  "items": {
                    "description": "Notification failure outcome count",
                    "type": "object",
                    "properties": {
                      "failure_reason": {
                        "description": "The reason of the notification failure",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "count of this type of failure",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/push/notifications": {
      "get": {
        "tags": [
          "push"
        ],
        "description": "Get a list of notifications from the service.",
        "operationId": "Push_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$skiptoken",
            "description": "The value identifies a starting point in the collection of entities. This parameter along with limit is used to perform pagination.",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$orderby",
            "description": "controls the sorting order and sorting based on which column",
            "type": "string",
            "default": "count desc",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$inlinecount",
            "description": "Controls whether or not to include a count of all the items across all pages.",
            "type": "string",
            "default": "none",
            "enum": [
              "allpages",
              "none"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "include_archived",
            "description": "Include arhived push notifications",
            "type": "boolean",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifications",
            "schema": {
              "description": "List of notifications",
              "required": [
                "values"
              ],
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "description": "Notification statistics",
                    "required": [
                      "notification_id",
                      "state"
                    ],
                    "type": "object",
                    "properties": {
                      "notification_id": {
                        "description": "Notification id.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Notification name",
                        "maxLength": 64,
                        "type": "string"
                      },
                      "notification_target": {
                        "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
                        "required": [
                          "type"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "enum": [
                              "audiences_target",
                              "devices_target",
                              "user_ids_target",
                              "account_ids_target",
                              "broadcast_target"
                            ],
                            "type": "string"
                          }
                        },
                        "discriminator": "type"
                      },
                      "send_time": {
                        "format": "date-time",
                        "description": "Notification send time",
                        "type": "string"
                      },
                      "pns_send_failure": {
                        "format": "long",
                        "description": "Number of the notifications failed to send to the push provider.",
                        "type": "integer"
                      },
                      "pns_send_success": {
                        "format": "long",
                        "description": "Number of the notifications successfully sent to push the provider.",
                        "type": "integer"
                      },
                      "state": {
                        "description": "State of the notification.",
                        "enum": [
                          "Queued",
                          "Sending",
                          "Completed",
                          "Failed",
                          "NoTargetFound"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "notification_states",
                          "modelAsString": true
                        }
                      }
                    }
                  }
                },
                "total": {
                  "format": "int64",
                  "description": "the total count of notifications",
                  "type": "integer"
                },
                "nextLink": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "push"
        ],
        "description": "Send a notification to one or more devices.",
        "operationId": "Push_Send",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "properties",
            "description": "Notification specifications.",
            "required": true,
            "schema": {
              "description": "Notification definition object",
              "required": [
                "notification_content"
              ],
              "type": "object",
              "properties": {
                "notification_target": {
                  "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
                  "required": [
                    "type"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "enum": [
                        "audiences_target",
                        "devices_target",
                        "user_ids_target",
                        "account_ids_target",
                        "broadcast_target"
                      ],
                      "type": "string"
                    }
                  },
                  "discriminator": "type"
                },
                "notification_content": {
                  "description": "Notification definition object",
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Notification name",
                      "maxLength": 64,
                      "minLength": 3,
                      "type": "string"
                    },
                    "title": {
                      "description": "Notification title",
                      "maxLength": 128,
                      "type": "string"
                    },
                    "body": {
                      "description": "Notification body",
                      "maxLength": 4000,
                      "minLength": 1,
                      "type": "string"
                    },
                    "custom_data": {
                      "description": "Notification custom data (such as badge, color, sound, etc.)",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "example": {
                "notification_target": {
                  "type": "devices_target",
                  "devices": [
                    "146fbdde-0aaf-444d-bcc0-6d84520c9080",
                    "746fbdde-0aaf-444d-bcc0-6d84520c9111"
                  ]
                },
                "notification_content": {
                  "name": "Transaction 23-09814",
                  "title": "Sales Order Update",
                  "body": "Sales order 18987 for customer Acme Dynamite status changed to SHIPPED"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "description": "Notification sent request successfully received.",
            "schema": {
              "description": "Notification send succeeded.",
              "required": [
                "notification_id"
              ],
              "properties": {
                "notification_id": {
                  "description": "The unique notification identifier.",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Link to get details about the notification.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "push"
        ],
        "description": "Delete a notification.",
        "operationId": "Push_Delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "notification_ids",
            "description": "List of notification ids",
            "required": true,
            "schema": {
              "description": "List of notification Ids",
              "required": [
                "values"
              ],
              "properties": {
                "values": {
                  "description": "List of notification Ids.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications were successfully deleted."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/push/devices/{install_id}": {
      "delete": {
        "tags": [
          "push"
        ],
        "description": "Delete a device with the selected installId.",
        "operationId": "Push_DeleteInstallId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "install_id",
            "description": "device install id",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "delete operation succeeded"
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/push/device_exports/{export_id}": {
      "get": {
        "tags": [
          "push"
        ],
        "description": "Get the status of an export operation.",
        "operationId": "Push_ExportDevicesStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "export_id",
            "description": "The id of the export.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Get export operation status.",
            "schema": {
              "description": "Export status",
              "required": [
                "export_id",
                "status"
              ],
              "type": "object",
              "properties": {
                "export_id": {
                  "description": "The unique export identifier.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the export.",
                  "enum": [
                    "InProgress",
                    "Completed",
                    "Failed"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportStatus"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/push/device_exports": {
      "post": {
        "tags": [
          "push"
        ],
        "description": "Exports information for all devices using Push to Azure Blob Storage",
        "operationId": "Push_ExportDevices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "properties",
            "description": "Export configurations.",
            "required": true,
            "schema": {
              "description": "Generic export configuration.",
              "required": [
                "blob_container_sas_uri"
              ],
              "type": "object",
              "properties": {
                "blob_container_sas_uri": {
                  "description": "A shared access signature (SAS) URI with Read, Write and Delete permissions on a container.",
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "description": "Export operation successfully started",
            "schema": {
              "description": "Export started.",
              "required": [
                "export_id"
              ],
              "properties": {
                "export_id": {
                  "description": "The unique export identifier.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Gets a device set belonging to the owner",
        "operationId": "test_getDeviceSetOfOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the device set",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Device Set",
              "description": "The name and devices of the device set",
              "required": [
                "id",
                "name",
                "owner",
                "deviceConfigurations"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Identifier of the device set",
                  "type": "string"
                },
                "manufacturerCount": {
                  "description": "The number of manufacturers in the device set's device selection",
                  "type": "number"
                },
                "name": {
                  "description": "Name of the device set",
                  "type": "string"
                },
                "slug": {
                  "description": "Slug of the device set",
                  "type": "string"
                },
                "owner": {
                  "title": "Device Set Owner",
                  "description": "The owner of a device set",
                  "required": [
                    "type",
                    "id",
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of account",
                      "type": "string"
                    },
                    "id": {
                      "description": "Account ID",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display name of the account",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the account",
                      "type": "string"
                    }
                  }
                },
                "osVersionCount": {
                  "description": "The number of os versions in the device set's device selection",
                  "type": "number"
                },
                "deviceConfigurations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique id of the device configuration",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "thumb": {
                            "type": "string"
                          }
                        }
                      },
                      "model": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "formFactor": {
                            "type": "string"
                          }
                        }
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "test"
        ],
        "description": "Updates a device set belonging to the owner",
        "operationId": "test_updateDeviceSetOfOwner",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the device set",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deviceSet",
            "required": true,
            "schema": {
              "title": "Device Set update information",
              "description": "The name of the device set and the list of device IDs",
              "required": [
                "devices",
                "name"
              ],
              "properties": {
                "devices": {
                  "description": "List of device IDs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "The name of the device set",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Device Set",
              "description": "The name and devices of the device set",
              "required": [
                "id",
                "name",
                "owner",
                "deviceConfigurations"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Identifier of the device set",
                  "type": "string"
                },
                "manufacturerCount": {
                  "description": "The number of manufacturers in the device set's device selection",
                  "type": "number"
                },
                "name": {
                  "description": "Name of the device set",
                  "type": "string"
                },
                "slug": {
                  "description": "Slug of the device set",
                  "type": "string"
                },
                "owner": {
                  "title": "Device Set Owner",
                  "description": "The owner of a device set",
                  "required": [
                    "type",
                    "id",
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of account",
                      "type": "string"
                    },
                    "id": {
                      "description": "Account ID",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display name of the account",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the account",
                      "type": "string"
                    }
                  }
                },
                "osVersionCount": {
                  "description": "The number of os versions in the device set's device selection",
                  "type": "number"
                },
                "deviceConfigurations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique id of the device configuration",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "thumb": {
                            "type": "string"
                          }
                        }
                      },
                      "model": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "formFactor": {
                            "type": "string"
                          }
                        }
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid list of device IDs or conflicting name",
            "schema": {
              "title": "Test Cloud Error Details",
              "description": "Details of a failed operation",
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the operation",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable message that describes the error",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "test"
        ],
        "description": "Deletes a device set belonging to the owner",
        "operationId": "test_deleteDeviceSetOfOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the device set",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists device sets belonging to the owner",
        "operationId": "test_listDeviceSetsOfOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "title": "Device Set",
                "description": "The name and devices of the device set",
                "required": [
                  "id",
                  "name",
                  "owner",
                  "deviceConfigurations"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Identifier of the device set",
                    "type": "string"
                  },
                  "manufacturerCount": {
                    "description": "The number of manufacturers in the device set's device selection",
                    "type": "number"
                  },
                  "name": {
                    "description": "Name of the device set",
                    "type": "string"
                  },
                  "slug": {
                    "description": "Slug of the device set",
                    "type": "string"
                  },
                  "owner": {
                    "title": "Device Set Owner",
                    "description": "The owner of a device set",
                    "required": [
                      "type",
                      "id",
                      "name"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Type of account",
                        "type": "string"
                      },
                      "id": {
                        "description": "Account ID",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "Display name of the account",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the account",
                        "type": "string"
                      }
                    }
                  },
                  "osVersionCount": {
                    "description": "The number of os versions in the device set's device selection",
                    "type": "number"
                  },
                  "deviceConfigurations": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id of the device configuration",
                          "type": "string"
                        },
                        "image": {
                          "properties": {
                            "thumb": {
                              "type": "string"
                            }
                          }
                        },
                        "model": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "manufacturer": {
                              "type": "string"
                            },
                            "releaseDate": {
                              "type": "string"
                            },
                            "formFactor": {
                              "type": "string"
                            }
                          }
                        },
                        "os": {
                          "type": "string"
                        },
                        "osName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "test"
        ],
        "description": "Creates a device set belonging to the owner",
        "operationId": "test_createDeviceSetOfOwner",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deviceSet",
            "required": true,
            "schema": {
              "title": "Device Set update information",
              "description": "The name of the device set and the list of device IDs",
              "required": [
                "devices",
                "name"
              ],
              "properties": {
                "devices": {
                  "description": "List of device IDs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "description": "The name of the device set",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "title": "Device Set",
              "description": "The name and devices of the device set",
              "required": [
                "id",
                "name",
                "owner",
                "deviceConfigurations"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Identifier of the device set",
                  "type": "string"
                },
                "manufacturerCount": {
                  "description": "The number of manufacturers in the device set's device selection",
                  "type": "number"
                },
                "name": {
                  "description": "Name of the device set",
                  "type": "string"
                },
                "slug": {
                  "description": "Slug of the device set",
                  "type": "string"
                },
                "owner": {
                  "title": "Device Set Owner",
                  "description": "The owner of a device set",
                  "required": [
                    "type",
                    "id",
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of account",
                      "type": "string"
                    },
                    "id": {
                      "description": "Account ID",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display name of the account",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the account",
                      "type": "string"
                    }
                  }
                },
                "osVersionCount": {
                  "description": "The number of os versions in the device set's device selection",
                  "type": "number"
                },
                "deviceConfigurations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique id of the device configuration",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "thumb": {
                            "type": "string"
                          }
                        }
                      },
                      "model": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "formFactor": {
                            "type": "string"
                          }
                        }
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid list of device IDs or conflicting name",
            "schema": {
              "title": "Test Cloud Error Details",
              "description": "Details of a failed operation",
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the operation",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable message that describes the error",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings": {
      "get": {
        "tags": [
          "alerting"
        ],
        "description": "Get Email notification settings of user for a particular app",
        "operationId": "notifications_getAppEmailSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Alerting Email Settings of the user for a particular app",
              "required": [
                "user_enabled"
              ],
              "type": "object",
              "allOf": [
                {
                  "description": "Alerting Default Email Settings of the user",
                  "type": "object",
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "required": [
                        "request_id"
                      ],
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      }
                    },
                    {
                      "required": [
                        "enabled",
                        "settings"
                      ],
                      "properties": {
                        "eTag": {
                          "description": "The ETag of the entity",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Allows to forcefully disable emails on app or user level",
                          "type": "boolean"
                        },
                        "userId": {
                          "description": "The unique id (UUID) of the user",
                          "type": "string"
                        },
                        "settings": {
                          "description": "The settings the user has for the app",
                          "type": "array",
                          "items": {
                            "description": "Event Setting",
                            "required": [
                              "event_type",
                              "value"
                            ],
                            "type": "object",
                            "properties": {
                              "event_type": {
                                "description": "Event Name",
                                "enum": [
                                  "crash_newCrashGroupCreated"
                                ],
                                "type": "string"
                              },
                              "value": {
                                "description": "Frequency of event",
                                "enum": [
                                  "Disabled",
                                  "Individual",
                                  "Daily",
                                  "DailyAndIndividual",
                                  "Default"
                                ],
                                "type": "string"
                              },
                              "default_value": {
                                "description": "Default frequency of event",
                                "enum": [
                                  "Disabled",
                                  "Individual",
                                  "Daily",
                                  "DailyAndIndividual"
                                ],
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "properties": {
                    "request_id": {
                      "description": "Unique request",
                      "type": "string"
                    },
                    "appId": {
                      "description": "Application ID",
                      "type": "string"
                    },
                    "user_enabled": {
                      "description": "A flag indicating if settings are enabled at user/global level",
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Alerting service error",
              "allOf": [
                {
                  "description": "Generic result for any alerting API operation",
                  "required": [
                    "request_id"
                  ],
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "description": "Unique request identifier for tracking",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                      "enum": [
                        400,
                        404,
                        409,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Invites a new or existing user to an app",
        "operationId": "appInvitations_createByEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_email",
            "description": "The email of the user to invite",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Update pending invitation permission",
        "operationId": "appInvitations_updatePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_email",
            "description": "The email of the user to invite",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "user_invitation_permissions_data",
            "description": "The value to update the user permission in the invite.",
            "schema": {
              "required": [
                "permissions"
              ],
              "properties": {
                "permissions": {
                  "description": "The permissions the user has for the app in the invitation",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Removes a user's invitation to an app",
        "operationId": "appInvitations_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "user_email",
            "description": "The email of the user to invite",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/invitations": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Invites a new or existing user to an app",
        "operationId": "appInvitations_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "user_email",
            "description": "The email of the user to invite",
            "schema": {
              "required": [
                "user_email"
              ],
              "properties": {
                "user_email": {
                  "description": "The user's email address",
                  "type": "string"
                },
                "role": {
                  "description": "The user's role",
                  "enum": [
                    "admin",
                    "collaborator",
                    "member"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Gets the pending invitations for the app",
        "operationId": "appInvitations_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "email",
                "is_existing_user",
                "invited_by",
                "invite_type",
                "app"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID (UUID) of the invitation",
                  "type": "string"
                },
                "app": {
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique ID (UUID) of the app",
                          "type": "string"
                        },
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "properties": {
                            "id": {
                              "format": "uuid",
                              "description": "The unique id (UUID) of the owner",
                              "type": "string"
                            },
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "properties": {
                            "subscription_id": {
                              "format": "uuid",
                              "description": "The azure subscription id",
                              "type": "string"
                            },
                            "tenant_id": {
                              "format": "uuid",
                              "description": "The tenant id of the azure subscription belongs to",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            }
                          }
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "type": "array",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  ]
                },
                "email": {
                  "description": "The email address of the invited user",
                  "type": "string"
                },
                "invite_type": {
                  "description": "The invitation type",
                  "enum": [
                    "developer",
                    "tester"
                  ],
                  "type": "string"
                },
                "invited_by": {
                  "required": [
                    "id",
                    "display_name",
                    "email",
                    "name",
                    "origin"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique id (UUID) of the user",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The avatar URL of the user",
                      "type": "string"
                    },
                    "can_change_password": {
                      "description": "User is required to send an old password in order to change the password.",
                      "type": "boolean"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "permissions": {
                      "description": "The permissions the user has for the app",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    },
                    "origin": {
                      "description": "The creation origin of this user",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    }
                  }
                },
                "is_existing_user": {
                  "description": "Indicates whether the invited user already exists",
                  "type": "boolean"
                },
                "permissions": {
                  "description": "The permissions the user has for the app",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                },
                "app_count": {
                  "description": "The number of apps in the group",
                  "type": "number"
                },
                "distribution_group": {
                  "description": "The organization that owns the distribution group, if it exists",
                  "type": "object",
                  "properties": {
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/file_asset": {
      "post": {
        "tags": [
          "build"
        ],
        "description": "Create a new asset to upload a file",
        "operationId": "fileAssets_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "location": {
                  "type": "string"
                },
                "token": {
                  "type": "string"
                },
                "uploadDomain": {
                  "type": "string"
                },
                "uploadWindowLocation": {
                  "type": "string"
                },
                "urlEncodedToken": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable": {
      "post": {
        "tags": [
          "export"
        ],
        "description": "Enable export configuration.",
        "operationId": "ExportConfigurations_Enable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "export_configuration_id",
            "description": "The id of the export configuration.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration was successfully enabled."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable": {
      "post": {
        "tags": [
          "export"
        ],
        "description": "Disable export configuration.",
        "operationId": "ExportConfigurations_Disable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "export_configuration_id",
            "description": "The id of the export configuration.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration was successfully disabled."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}": {
      "get": {
        "tags": [
          "export"
        ],
        "description": "Get export configuration.",
        "operationId": "ExportConfigurations_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "export_configuration_id",
            "description": "The id of the export configuration.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Get export configuration.",
            "schema": {
              "description": "Export configuration result",
              "required": [
                "id",
                "export_type",
                "creation_time",
                "state"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Export configuration id",
                  "type": "string"
                },
                "export_type": {
                  "description": "Target resource type of export configuration",
                  "enum": [
                    "BlobStorage",
                    "AppInsights"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportType",
                    "modelAsString": false
                  }
                },
                "creation_time": {
                  "description": "Creation time in ISO 8601 format",
                  "type": "string"
                },
                "last_run_time": {
                  "description": "Latest time in ISO 8601 format when export completed successfully",
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "state": {
                  "description": "State of the export job",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "Pending",
                    "Deleted",
                    "Invalid"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportState",
                    "modelAsString": false
                  }
                },
                "state_info": {
                  "description": "Additional information about export configuration state",
                  "type": "string"
                },
                "resource_group": {
                  "description": "resource group for the storage account/App Insights resource",
                  "type": "string"
                },
                "resource_name": {
                  "description": "Storage accout or Appinsights resource name",
                  "type": "string"
                },
                "export_configuration": {
                  "description": "Export configuration",
                  "required": [
                    "type"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of export configuration",
                      "enum": [
                        "blob_storage_connection_string",
                        "application_insights_instrumentation_key",
                        "blob_storage_linked_subscription",
                        "application_insights_linked_subscription"
                      ],
                      "type": "string"
                    },
                    "export_entities": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "ExportEntity",
                          "modelAsString": false
                        }
                      }
                    },
                    "resource_name": {
                      "description": "The resource name on azure",
                      "type": "string"
                    },
                    "resource_group": {
                      "description": "The resource group name on azure",
                      "type": "string"
                    },
                    "backfill": {
                      "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                      "type": "boolean"
                    }
                  },
                  "discriminator": "type"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "export"
        ],
        "description": "Partially update export configuration.",
        "operationId": "ExportConfigurations_PartialUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "export_configuration_id",
            "description": "The id of the export configuration.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "properties",
            "description": "Export configurations.",
            "required": true,
            "schema": {
              "description": "Export configuration",
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of export configuration",
                  "enum": [
                    "blob_storage_connection_string",
                    "application_insights_instrumentation_key",
                    "blob_storage_linked_subscription",
                    "application_insights_linked_subscription"
                  ],
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "resource_name": {
                  "description": "The resource name on azure",
                  "type": "string"
                },
                "resource_group": {
                  "description": "The resource group name on azure",
                  "type": "string"
                },
                "backfill": {
                  "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                  "type": "boolean"
                }
              },
              "discriminator": "type"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration updated successfully.",
            "schema": {
              "description": "Export configuration result",
              "required": [
                "id",
                "export_type",
                "creation_time",
                "state"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Export configuration id",
                  "type": "string"
                },
                "export_type": {
                  "description": "Target resource type of export configuration",
                  "enum": [
                    "BlobStorage",
                    "AppInsights"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportType",
                    "modelAsString": false
                  }
                },
                "creation_time": {
                  "description": "Creation time in ISO 8601 format",
                  "type": "string"
                },
                "last_run_time": {
                  "description": "Latest time in ISO 8601 format when export completed successfully",
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "state": {
                  "description": "State of the export job",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "Pending",
                    "Deleted",
                    "Invalid"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportState",
                    "modelAsString": false
                  }
                },
                "state_info": {
                  "description": "Additional information about export configuration state",
                  "type": "string"
                },
                "resource_group": {
                  "description": "resource group for the storage account/App Insights resource",
                  "type": "string"
                },
                "resource_name": {
                  "description": "Storage accout or Appinsights resource name",
                  "type": "string"
                },
                "export_configuration": {
                  "description": "Export configuration",
                  "required": [
                    "type"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of export configuration",
                      "enum": [
                        "blob_storage_connection_string",
                        "application_insights_instrumentation_key",
                        "blob_storage_linked_subscription",
                        "application_insights_linked_subscription"
                      ],
                      "type": "string"
                    },
                    "export_entities": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "ExportEntity",
                          "modelAsString": false
                        }
                      }
                    },
                    "resource_name": {
                      "description": "The resource name on azure",
                      "type": "string"
                    },
                    "resource_group": {
                      "description": "The resource group name on azure",
                      "type": "string"
                    },
                    "backfill": {
                      "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                      "type": "boolean"
                    }
                  },
                  "discriminator": "type"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "export"
        ],
        "description": "Delete export configuration.",
        "operationId": "ExportConfigurations_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "export_configuration_id",
            "description": "The id of the export configuration.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration was successfully deleted."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations": {
      "get": {
        "tags": [
          "export"
        ],
        "description": "List export configurations.",
        "operationId": "ExportConfigurations_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List export configurations.",
            "schema": {
              "description": "List of export configurations",
              "required": [
                "values"
              ],
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "description": "Export configuration result",
                    "required": [
                      "id",
                      "export_type",
                      "creation_time",
                      "state"
                    ],
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Export configuration id",
                        "type": "string"
                      },
                      "export_type": {
                        "description": "Target resource type of export configuration",
                        "enum": [
                          "BlobStorage",
                          "AppInsights"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "ExportType",
                          "modelAsString": false
                        }
                      },
                      "creation_time": {
                        "description": "Creation time in ISO 8601 format",
                        "type": "string"
                      },
                      "last_run_time": {
                        "description": "Latest time in ISO 8601 format when export completed successfully",
                        "type": "string"
                      },
                      "export_entities": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "crashes",
                            "errors",
                            "attachments",
                            "no_logs"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "name": "ExportEntity",
                            "modelAsString": false
                          }
                        }
                      },
                      "state": {
                        "description": "State of the export job",
                        "enum": [
                          "Enabled",
                          "Disabled",
                          "Pending",
                          "Deleted",
                          "Invalid"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "ExportState",
                          "modelAsString": false
                        }
                      },
                      "state_info": {
                        "description": "Additional information about export configuration state",
                        "type": "string"
                      },
                      "resource_group": {
                        "description": "resource group for the storage account/App Insights resource",
                        "type": "string"
                      },
                      "resource_name": {
                        "description": "Storage accout or Appinsights resource name",
                        "type": "string"
                      },
                      "export_configuration": {
                        "description": "Export configuration",
                        "required": [
                          "type"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "Type of export configuration",
                            "enum": [
                              "blob_storage_connection_string",
                              "application_insights_instrumentation_key",
                              "blob_storage_linked_subscription",
                              "application_insights_linked_subscription"
                            ],
                            "type": "string"
                          },
                          "export_entities": {
                            "type": "array",
                            "items": {
                              "enum": [
                                "crashes",
                                "errors",
                                "attachments",
                                "no_logs"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "name": "ExportEntity",
                                "modelAsString": false
                              }
                            }
                          },
                          "resource_name": {
                            "description": "The resource name on azure",
                            "type": "string"
                          },
                          "resource_group": {
                            "description": "The resource group name on azure",
                            "type": "string"
                          },
                          "backfill": {
                            "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                            "type": "boolean"
                          }
                        },
                        "discriminator": "type"
                      }
                    }
                  }
                },
                "total": {
                  "format": "int64",
                  "description": "the total count of exports",
                  "type": "integer"
                },
                "nextLink": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "export"
        ],
        "description": "Create new export configuration",
        "operationId": "ExportConfigurations_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "properties",
            "description": "Export configurations.",
            "required": true,
            "schema": {
              "description": "Export configuration",
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of export configuration",
                  "enum": [
                    "blob_storage_connection_string",
                    "application_insights_instrumentation_key",
                    "blob_storage_linked_subscription",
                    "application_insights_linked_subscription"
                  ],
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "resource_name": {
                  "description": "The resource name on azure",
                  "type": "string"
                },
                "resource_group": {
                  "description": "The resource group name on azure",
                  "type": "string"
                },
                "backfill": {
                  "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                  "type": "boolean"
                }
              },
              "discriminator": "type"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "description": "Create export configuration request successfully received.",
            "schema": {
              "description": "Export configuration result",
              "required": [
                "id",
                "export_type",
                "creation_time",
                "state"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Export configuration id",
                  "type": "string"
                },
                "export_type": {
                  "description": "Target resource type of export configuration",
                  "enum": [
                    "BlobStorage",
                    "AppInsights"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportType",
                    "modelAsString": false
                  }
                },
                "creation_time": {
                  "description": "Creation time in ISO 8601 format",
                  "type": "string"
                },
                "last_run_time": {
                  "description": "Latest time in ISO 8601 format when export completed successfully",
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "state": {
                  "description": "State of the export job",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "Pending",
                    "Deleted",
                    "Invalid"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportState",
                    "modelAsString": false
                  }
                },
                "state_info": {
                  "description": "Additional information about export configuration state",
                  "type": "string"
                },
                "resource_group": {
                  "description": "resource group for the storage account/App Insights resource",
                  "type": "string"
                },
                "resource_name": {
                  "description": "Storage accout or Appinsights resource name",
                  "type": "string"
                },
                "export_configuration": {
                  "description": "Export configuration",
                  "required": [
                    "type"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of export configuration",
                      "enum": [
                        "blob_storage_connection_string",
                        "application_insights_instrumentation_key",
                        "blob_storage_linked_subscription",
                        "application_insights_linked_subscription"
                      ],
                      "type": "string"
                    },
                    "export_entities": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "ExportEntity",
                          "modelAsString": false
                        }
                      }
                    },
                    "resource_name": {
                      "description": "The resource name on azure",
                      "type": "string"
                    },
                    "resource_group": {
                      "description": "The resource group name on azure",
                      "type": "string"
                    },
                    "backfill": {
                      "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                      "type": "boolean"
                    }
                  },
                  "discriminator": "type"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Get session logs by error ID",
        "operationId": "Errors_ListSessionLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of data requested",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Session logs of specific error",
            "schema": {
              "required": [
                "logs"
              ],
              "type": "object",
              "properties": {
                "exceeded_max_limit": {
                  "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                  "type": "boolean"
                },
                "last_received_log_timestamp": {
                  "format": "date-time",
                  "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                  "type": "string"
                },
                "logs": {
                  "description": "the list of logs",
                  "minItems": 0,
                  "type": "array",
                  "items": {
                    "description": "Generic log.",
                    "required": [
                      "type",
                      "timestamp",
                      "install_id",
                      "device"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Log type.\n",
                        "enum": [
                          "event",
                          "page",
                          "start_session",
                          "error",
                          "push_installation",
                          "start_service",
                          "custom_properties"
                        ],
                        "type": "string"
                      },
                      "timestamp": {
                        "format": "date-time",
                        "description": "Log creation timestamp.\n",
                        "type": "string"
                      },
                      "install_id": {
                        "format": "uuid",
                        "description": "Install ID.\n",
                        "type": "string"
                      },
                      "session_id": {
                        "format": "uuid",
                        "description": "Session ID.\n",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Event ID.\n",
                        "type": "string"
                      },
                      "event_name": {
                        "description": "Event name.\n",
                        "type": "string"
                      },
                      "message_id": {
                        "description": "Message ID.\n",
                        "type": "string"
                      },
                      "properties": {
                        "description": "event specific properties.\n",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "device": {
                        "description": "Device characteristics.",
                        "required": [
                          "sdk_name",
                          "sdk_version",
                          "os_name",
                          "os_version",
                          "locale",
                          "time_zone_offset",
                          "app_version",
                          "app_build"
                        ],
                        "type": "object",
                        "properties": {
                          "sdk_name": {
                            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                            "type": "string"
                          },
                          "sdk_version": {
                            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                            "type": "string"
                          },
                          "wrapper_sdk_version": {
                            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                            "type": "string"
                          },
                          "wrapper_sdk_name": {
                            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                            "type": "string"
                          },
                          "model": {
                            "description": "Device model (example: iPad2,3).\n",
                            "type": "string"
                          },
                          "oem_name": {
                            "description": "Device manufacturer (example: HTC).\n",
                            "type": "string"
                          },
                          "os_name": {
                            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                            "type": "string"
                          },
                          "os_version": {
                            "description": "OS version (example: 9.3.0).\n",
                            "type": "string"
                          },
                          "os_build": {
                            "description": "OS build code (example: LMY47X).\n",
                            "type": "string"
                          },
                          "os_api_level": {
                            "description": "API level when applicable like in Android (example: 15).\n",
                            "type": "integer"
                          },
                          "locale": {
                            "description": "Language code (example: en_US).\n",
                            "type": "string"
                          },
                          "time_zone_offset": {
                            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                            "maximum": 840,
                            "minimum": -840,
                            "type": "integer"
                          },
                          "screen_size": {
                            "description": "Screen size of the device in pixels (example: 640x480).\n",
                            "type": "string"
                          },
                          "app_version": {
                            "description": "Application version name, e.g. 1.1.0\n",
                            "type": "string"
                          },
                          "carrier_name": {
                            "description": "Carrier name (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_code": {
                            "description": "Carrier country code (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_country": {
                            "description": "Carrier country.\n",
                            "type": "string"
                          },
                          "app_build": {
                            "description": "The app's build number, e.g. 42.\n",
                            "type": "string"
                          },
                          "app_namespace": {
                            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                            "type": "string"
                          },
                          "live_update_release_label": {
                            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                            "type": "string"
                          },
                          "live_update_deployment_key": {
                            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                            "type": "string"
                          },
                          "live_update_package_hash": {
                            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                            "type": "string"
                          },
                          "wrapper_runtime_version": {
                            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error attachment text.",
        "operationId": "Errors_ErrorAttachmentText",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "Error attachment id.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error attachment text.",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error attachment location.",
        "operationId": "Errors_ErrorAttachmentLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "attachmentId",
            "description": "Error attachment id.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error attachment location.",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "List error attachments.",
        "operationId": "Errors_ErrorAttachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of error attachments.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "appId": {
                    "type": "string"
                  },
                  "attachmentId": {
                    "type": "string"
                  },
                  "crashId": {
                    "type": "string"
                  },
                  "blobLocation": {
                    "type": "string"
                  },
                  "contentType": {
                    "type": "string"
                  },
                  "fileName": {
                    "type": "string"
                  },
                  "createdTime": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "size": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/search": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Errors list based on search parameters",
        "operationId": "Errors_ErrorSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "description": "A filter as specified in OData notation",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "q",
            "description": "A query string",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It controls the order of sorting",
            "type": "string",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It controls the sort based on specified field",
            "type": "string",
            "default": "timestamp",
            "enum": [
              "timestamp",
              "errorGroupId",
              "exceptionClassName",
              "exceptionFile",
              "exceptionLine",
              "exceptionMessage",
              "exceptionMethod",
              "deviceName",
              "osVersion",
              "userId"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 100,
            "minimum": 1,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "type": "integer",
            "format": "int64",
            "default": 0,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of errors",
            "schema": {
              "type": "object",
              "properties": {
                "hasMoreResults": {
                  "type": "boolean"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "errorId": {
                        "type": "string"
                      },
                      "timestamp": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "deviceName": {
                        "type": "string"
                      },
                      "osVersion": {
                        "type": "string"
                      },
                      "osType": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "hasBreadcrumbs": {
                        "type": "boolean"
                      },
                      "hasAttachments": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings": {
      "put": {
        "tags": [
          "errors"
        ],
        "summary": "Creates and updates the retention settings in days",
        "description": "Creates and updates the retention settings in days",
        "operationId": "errors_putRetentionSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "errorRetentionInDays",
            "description": "The amount of days to keep the crashes for this application. retention_in_days is an enum value, can only be 28 or 90.",
            "required": true,
            "schema": {
              "required": [
                "retention_in_days"
              ],
              "type": "object",
              "properties": {
                "retention_in_days": {
                  "enum": [
                    28,
                    90
                  ],
                  "type": "integer"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "retention_in_days"
              ],
              "type": "object",
              "properties": {
                "retention_in_days": {
                  "enum": [
                    28,
                    90
                  ],
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "errors"
        ],
        "summary": "gets the retention settings in days",
        "description": "gets the retention settings in days",
        "operationId": "errors_getRetentionSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "retention_in_days"
              ],
              "type": "object",
              "properties": {
                "retention_in_days": {
                  "enum": [
                    28,
                    90
                  ],
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices",
        "operationId": "Errors_ErrorFreeDevicePercentages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "app_build",
            "description": "app build",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "errorType",
            "description": "Type of error (handled vs unhandled), excluding All",
            "type": "string",
            "enum": [
              "unhandledError",
              "handledError"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Percentage of error-free devices by day in the time range and overall percentage of the entire time range.",
            "schema": {
              "type": "object",
              "properties": {
                "averagePercentage": {
                  "format": "double",
                  "description": "Average percentage",
                  "type": "number"
                },
                "dailyPercentages": {
                  "description": "The error-free percentage per day.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "the ISO 8601 datetime",
                        "type": "string"
                      },
                      "percentage": {
                        "format": "double",
                        "description": "percentage of the object",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Gets the stack trace for the error group.",
        "operationId": "Errors_GroupErrorStackTrace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the stack trace for the error group.",
            "schema": {
              "$ref": "#/definitions/DiagnosticsStackTrace"
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Top OSes of the selected error group.",
        "operationId": "Errors_GroupOperatingSystemCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Top OSes with percentage in descending order",
            "schema": {
              "type": "object",
              "properties": {
                "errorCount": {
                  "format": "int64",
                  "type": "integer"
                },
                "operatingSystems": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "operatingSystemName": {
                        "description": "OS name",
                        "type": "string"
                      },
                      "errorCount": {
                        "format": "int64",
                        "description": "count of OS",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Top models of the selected error group.",
        "operationId": "Errors_GroupModelCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Top Models with percentage in descending order",
            "schema": {
              "type": "object",
              "properties": {
                "errorCount": {
                  "format": "int64",
                  "type": "integer"
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "modelName": {
                        "description": "model name",
                        "type": "string"
                      },
                      "modelCode": {
                        "description": "model code",
                        "type": "string"
                      },
                      "errorCount": {
                        "format": "int64",
                        "description": "count of errors in a model",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error Stacktrace details.",
        "operationId": "Errors_ErrorStackTrace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error stacktrace details.",
            "schema": {
              "$ref": "#/definitions/DiagnosticsStackTrace"
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error location.",
        "operationId": "Errors_ErrorLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error location.",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Download details for a specific error.",
        "operationId": "Errors_ErrorDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "format",
            "description": "the format of the crash log",
            "type": "string",
            "enum": [
              "json",
              "txt"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error details.",
            "schema": {
              "format": "file",
              "type": "object"
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error details.",
        "operationId": "Errors_GetErrorDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error details.",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string"
                    },
                    "timestamp": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "deviceName": {
                      "type": "string"
                    },
                    "osVersion": {
                      "type": "string"
                    },
                    "osType": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "hasBreadcrumbs": {
                      "type": "boolean"
                    },
                    "hasAttachments": {
                      "type": "boolean"
                    }
                  }
                }
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "reasonFrames": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "className": {
                        "description": "name of the class",
                        "type": "string"
                      },
                      "method": {
                        "description": "name of the method",
                        "type": "string"
                      },
                      "classMethod": {
                        "description": "is a class method",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "name of the file",
                        "type": "string"
                      },
                      "line": {
                        "description": "line number",
                        "type": "integer"
                      },
                      "appCode": {
                        "description": "this line isn't from any framework",
                        "type": "boolean"
                      },
                      "frameworkName": {
                        "description": "Name of the framework",
                        "type": "string"
                      },
                      "codeFormatted": {
                        "description": "Formatted frame string",
                        "type": "string"
                      },
                      "codeRaw": {
                        "description": "Unformatted Frame string",
                        "type": "string"
                      },
                      "language": {
                        "description": "programming language of the frame",
                        "enum": [
                          "JavaScript",
                          "CSharp",
                          "Objective-C",
                          "Objective-Cpp",
                          "Cpp",
                          "C",
                          "Swift",
                          "Java",
                          "Unknown"
                        ],
                        "type": "string"
                      },
                      "methodParams": {
                        "description": "parameters of the frames method",
                        "type": "string"
                      },
                      "exceptionType": {
                        "description": "Exception type.",
                        "type": "string"
                      },
                      "osExceptionType": {
                        "description": "OS exception type. (aka. SIGNAL)",
                        "type": "string"
                      }
                    }
                  }
                },
                "appLaunchTimestamp": {
                  "format": "date-time",
                  "description": "Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.\n",
                  "type": "string"
                },
                "carrierName": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "jailbreak": {
                  "description": "Flag indicating if device is jailbroken\n",
                  "type": "boolean"
                },
                "properties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "errors"
        ],
        "description": "Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.",
        "operationId": "Errors_DeleteError",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "errorId",
            "description": "The id of the error",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "properties": {
                "appId": {
                  "type": "string"
                },
                "errorGroupId": {
                  "type": "string"
                },
                "errorId": {
                  "type": "string"
                },
                "errorsDeleted": {
                  "type": "integer"
                },
                "attachmentsDeleted": {
                  "type": "integer"
                },
                "blobsSucceeded": {
                  "type": "integer"
                },
                "blobsFailed": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Latest error details.",
        "operationId": "Errors_LatestErrorDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Latest error details.",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string"
                    },
                    "timestamp": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "deviceName": {
                      "type": "string"
                    },
                    "osVersion": {
                      "type": "string"
                    },
                    "osType": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "hasBreadcrumbs": {
                      "type": "boolean"
                    },
                    "hasAttachments": {
                      "type": "boolean"
                    }
                  }
                }
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "reasonFrames": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "className": {
                        "description": "name of the class",
                        "type": "string"
                      },
                      "method": {
                        "description": "name of the method",
                        "type": "string"
                      },
                      "classMethod": {
                        "description": "is a class method",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "name of the file",
                        "type": "string"
                      },
                      "line": {
                        "description": "line number",
                        "type": "integer"
                      },
                      "appCode": {
                        "description": "this line isn't from any framework",
                        "type": "boolean"
                      },
                      "frameworkName": {
                        "description": "Name of the framework",
                        "type": "string"
                      },
                      "codeFormatted": {
                        "description": "Formatted frame string",
                        "type": "string"
                      },
                      "codeRaw": {
                        "description": "Unformatted Frame string",
                        "type": "string"
                      },
                      "language": {
                        "description": "programming language of the frame",
                        "enum": [
                          "JavaScript",
                          "CSharp",
                          "Objective-C",
                          "Objective-Cpp",
                          "Cpp",
                          "C",
                          "Swift",
                          "Java",
                          "Unknown"
                        ],
                        "type": "string"
                      },
                      "methodParams": {
                        "description": "parameters of the frames method",
                        "type": "string"
                      },
                      "exceptionType": {
                        "description": "Exception type.",
                        "type": "string"
                      },
                      "osExceptionType": {
                        "description": "OS exception type. (aka. SIGNAL)",
                        "type": "string"
                      }
                    }
                  }
                },
                "appLaunchTimestamp": {
                  "format": "date-time",
                  "description": "Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.\n",
                  "type": "string"
                },
                "carrierName": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "jailbreak": {
                  "description": "Flag indicating if device is jailbroken\n",
                  "type": "boolean"
                },
                "properties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Get all errors for group",
        "operationId": "Errors_ListForGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "model",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "os",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all errors for group",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string"
                },
                "errors": {
                  "description": "Errors list.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "errorId": {
                        "type": "string"
                      },
                      "timestamp": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "deviceName": {
                        "type": "string"
                      },
                      "osVersion": {
                        "type": "string"
                      },
                      "osType": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "hasBreadcrumbs": {
                        "type": "boolean"
                      },
                      "hasAttachments": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices",
        "operationId": "Errors_GroupErrorFreeDevicePercentages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Percentage of error-free devices by day in the time range and overall percentage of the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "averagePercentage": {
                  "format": "double",
                  "description": "Average percentage",
                  "type": "number"
                },
                "dailyPercentages": {
                  "description": "The error-free percentage per day.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "the ISO 8601 datetime",
                        "type": "string"
                      },
                      "percentage": {
                        "format": "double",
                        "description": "percentage of the object",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Count of errors by day in the time range of the selected error group with selected version",
        "operationId": "Errors_GroupCountsPerDay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of errors by day in the time range and total errors over the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "format": "int64",
                  "description": "total error count",
                  "type": "integer"
                },
                "errors": {
                  "description": "the total error count for day",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "the ISO 8601 datetime",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "count of the object",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error group details",
        "operationId": "Errors_GroupDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error group details",
            "schema": {
              "required": [
                "errorGroupId",
                "appVersion",
                "state",
                "count",
                "deviceCount",
                "firstOccurrence",
                "lastOccurrence"
              ],
              "type": "object",
              "allOf": [
                {
                  "required": [
                    "state"
                  ],
                  "type": "object",
                  "properties": {
                    "state": {
                      "enum": [
                        "open",
                        "closed",
                        "ignored"
                      ],
                      "type": "string"
                    },
                    "annotation": {
                      "type": "string"
                    }
                  }
                }
              ],
              "properties": {
                "errorGroupId": {
                  "type": "string"
                },
                "appVersion": {
                  "type": "string"
                },
                "appBuild": {
                  "type": "string"
                },
                "count": {
                  "format": "int64",
                  "type": "integer"
                },
                "deviceCount": {
                  "format": "int64",
                  "type": "integer"
                },
                "firstOccurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "lastOccurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "exceptionType": {
                  "type": "string"
                },
                "exceptionMessage": {
                  "type": "string"
                },
                "exceptionClassName": {
                  "type": "string"
                },
                "exceptionClassMethod": {
                  "type": "boolean"
                },
                "exceptionMethod": {
                  "type": "string"
                },
                "exceptionAppCode": {
                  "type": "boolean"
                },
                "exceptionFile": {
                  "type": "string"
                },
                "exceptionLine": {
                  "type": "string"
                },
                "codeRaw": {
                  "type": "string"
                },
                "reasonFrames": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "className": {
                        "description": "name of the class",
                        "type": "string"
                      },
                      "method": {
                        "description": "name of the method",
                        "type": "string"
                      },
                      "classMethod": {
                        "description": "is a class method",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "name of the file",
                        "type": "string"
                      },
                      "line": {
                        "description": "line number",
                        "type": "integer"
                      },
                      "appCode": {
                        "description": "this line isn't from any framework",
                        "type": "boolean"
                      },
                      "frameworkName": {
                        "description": "Name of the framework",
                        "type": "string"
                      },
                      "codeFormatted": {
                        "description": "Formatted frame string",
                        "type": "string"
                      },
                      "codeRaw": {
                        "description": "Unformatted Frame string",
                        "type": "string"
                      },
                      "language": {
                        "description": "programming language of the frame",
                        "enum": [
                          "JavaScript",
                          "CSharp",
                          "Objective-C",
                          "Objective-Cpp",
                          "Cpp",
                          "C",
                          "Swift",
                          "Java",
                          "Unknown"
                        ],
                        "type": "string"
                      },
                      "methodParams": {
                        "description": "parameters of the frames method",
                        "type": "string"
                      },
                      "exceptionType": {
                        "description": "Exception type.",
                        "type": "string"
                      },
                      "osExceptionType": {
                        "description": "OS exception type. (aka. SIGNAL)",
                        "type": "string"
                      }
                    }
                  }
                },
                "hidden": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "errors"
        ],
        "description": "Update error group state",
        "operationId": "Errors_UpdateState",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "errorGroupId",
            "description": "The id of the error group",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "errorGroupState",
            "description": "The state of the error group",
            "required": true,
            "schema": {
              "required": [
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "enum": [
                    "open",
                    "closed",
                    "ignored"
                  ],
                  "type": "string"
                },
                "annotation": {
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Error group details",
            "schema": {
              "required": [
                "errorGroupId",
                "appVersion",
                "state",
                "count",
                "deviceCount",
                "firstOccurrence",
                "lastOccurrence"
              ],
              "type": "object",
              "allOf": [
                {
                  "required": [
                    "state"
                  ],
                  "type": "object",
                  "properties": {
                    "state": {
                      "enum": [
                        "open",
                        "closed",
                        "ignored"
                      ],
                      "type": "string"
                    },
                    "annotation": {
                      "type": "string"
                    }
                  }
                }
              ],
              "properties": {
                "errorGroupId": {
                  "type": "string"
                },
                "appVersion": {
                  "type": "string"
                },
                "appBuild": {
                  "type": "string"
                },
                "count": {
                  "format": "int64",
                  "type": "integer"
                },
                "deviceCount": {
                  "format": "int64",
                  "type": "integer"
                },
                "firstOccurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "lastOccurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "exceptionType": {
                  "type": "string"
                },
                "exceptionMessage": {
                  "type": "string"
                },
                "exceptionClassName": {
                  "type": "string"
                },
                "exceptionClassMethod": {
                  "type": "boolean"
                },
                "exceptionMethod": {
                  "type": "string"
                },
                "exceptionAppCode": {
                  "type": "boolean"
                },
                "exceptionFile": {
                  "type": "string"
                },
                "exceptionLine": {
                  "type": "string"
                },
                "codeRaw": {
                  "type": "string"
                },
                "reasonFrames": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "className": {
                        "description": "name of the class",
                        "type": "string"
                      },
                      "method": {
                        "description": "name of the method",
                        "type": "string"
                      },
                      "classMethod": {
                        "description": "is a class method",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "name of the file",
                        "type": "string"
                      },
                      "line": {
                        "description": "line number",
                        "type": "integer"
                      },
                      "appCode": {
                        "description": "this line isn't from any framework",
                        "type": "boolean"
                      },
                      "frameworkName": {
                        "description": "Name of the framework",
                        "type": "string"
                      },
                      "codeFormatted": {
                        "description": "Formatted frame string",
                        "type": "string"
                      },
                      "codeRaw": {
                        "description": "Unformatted Frame string",
                        "type": "string"
                      },
                      "language": {
                        "description": "programming language of the frame",
                        "enum": [
                          "JavaScript",
                          "CSharp",
                          "Objective-C",
                          "Objective-Cpp",
                          "Cpp",
                          "C",
                          "Swift",
                          "Java",
                          "Unknown"
                        ],
                        "type": "string"
                      },
                      "methodParams": {
                        "description": "parameters of the frames method",
                        "type": "string"
                      },
                      "exceptionType": {
                        "description": "Exception type.",
                        "type": "string"
                      },
                      "osExceptionType": {
                        "description": "OS exception type. (aka. SIGNAL)",
                        "type": "string"
                      }
                    }
                  }
                },
                "hidden": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Error groups list based on search parameters",
        "operationId": "Errors_ErrorGroupsSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "description": "A filter as specified in OData notation",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "q",
            "description": "A query string",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It controls the order of sorting",
            "type": "string",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It controls the sort based on specified field",
            "type": "string",
            "default": "matchingReportsCount",
            "enum": [
              "matchingReportsCount",
              "exceptionClassName",
              "exceptionMessage",
              "exceptionMethod",
              "lastOccurrence"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return",
            "type": "integer",
            "format": "int64",
            "default": 100,
            "maximum": 100,
            "minimum": 1,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "type": "integer",
            "format": "int64",
            "default": 0,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of error groups",
            "schema": {
              "type": "object",
              "properties": {
                "hasMoreResults": {
                  "type": "boolean"
                },
                "errorGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "required": [
                          "errorGroupId",
                          "appVersion",
                          "state",
                          "count",
                          "deviceCount",
                          "firstOccurrence",
                          "lastOccurrence"
                        ],
                        "type": "object",
                        "allOf": [
                          {
                            "required": [
                              "state"
                            ],
                            "type": "object",
                            "properties": {
                              "state": {
                                "enum": [
                                  "open",
                                  "closed",
                                  "ignored"
                                ],
                                "type": "string"
                              },
                              "annotation": {
                                "type": "string"
                              }
                            }
                          }
                        ],
                        "properties": {
                          "errorGroupId": {
                            "type": "string"
                          },
                          "appVersion": {
                            "type": "string"
                          },
                          "appBuild": {
                            "type": "string"
                          },
                          "count": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "deviceCount": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "firstOccurrence": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastOccurrence": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "exceptionType": {
                            "type": "string"
                          },
                          "exceptionMessage": {
                            "type": "string"
                          },
                          "exceptionClassName": {
                            "type": "string"
                          },
                          "exceptionClassMethod": {
                            "type": "boolean"
                          },
                          "exceptionMethod": {
                            "type": "string"
                          },
                          "exceptionAppCode": {
                            "type": "boolean"
                          },
                          "exceptionFile": {
                            "type": "string"
                          },
                          "exceptionLine": {
                            "type": "string"
                          },
                          "codeRaw": {
                            "type": "string"
                          },
                          "reasonFrames": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "className": {
                                  "description": "name of the class",
                                  "type": "string"
                                },
                                "method": {
                                  "description": "name of the method",
                                  "type": "string"
                                },
                                "classMethod": {
                                  "description": "is a class method",
                                  "type": "boolean"
                                },
                                "file": {
                                  "description": "name of the file",
                                  "type": "string"
                                },
                                "line": {
                                  "description": "line number",
                                  "type": "integer"
                                },
                                "appCode": {
                                  "description": "this line isn't from any framework",
                                  "type": "boolean"
                                },
                                "frameworkName": {
                                  "description": "Name of the framework",
                                  "type": "string"
                                },
                                "codeFormatted": {
                                  "description": "Formatted frame string",
                                  "type": "string"
                                },
                                "codeRaw": {
                                  "description": "Unformatted Frame string",
                                  "type": "string"
                                },
                                "language": {
                                  "description": "programming language of the frame",
                                  "enum": [
                                    "JavaScript",
                                    "CSharp",
                                    "Objective-C",
                                    "Objective-Cpp",
                                    "Cpp",
                                    "C",
                                    "Swift",
                                    "Java",
                                    "Unknown"
                                  ],
                                  "type": "string"
                                },
                                "methodParams": {
                                  "description": "parameters of the frames method",
                                  "type": "string"
                                },
                                "exceptionType": {
                                  "description": "Exception type.",
                                  "type": "string"
                                },
                                "osExceptionType": {
                                  "description": "OS exception type. (aka. SIGNAL)",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "hidden": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "List of error groups",
        "operationId": "Errors_GroupList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "app_build",
            "description": "app build",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "groupState",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$orderby",
            "description": "controls the sorting order and sorting based on which column",
            "type": "string",
            "default": "count desc",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "errorType",
            "description": "Type of error (handled vs unhandled), including All",
            "type": "string",
            "enum": [
              "all",
              "unhandledError",
              "handledError"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of error groups",
            "schema": {
              "type": "object",
              "properties": {
                "nextLink": {
                  "type": "string"
                },
                "errorGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "required": [
                          "errorGroupId",
                          "appVersion",
                          "state",
                          "count",
                          "deviceCount",
                          "firstOccurrence",
                          "lastOccurrence"
                        ],
                        "type": "object",
                        "allOf": [
                          {
                            "required": [
                              "state"
                            ],
                            "type": "object",
                            "properties": {
                              "state": {
                                "enum": [
                                  "open",
                                  "closed",
                                  "ignored"
                                ],
                                "type": "string"
                              },
                              "annotation": {
                                "type": "string"
                              }
                            }
                          }
                        ],
                        "properties": {
                          "errorGroupId": {
                            "type": "string"
                          },
                          "appVersion": {
                            "type": "string"
                          },
                          "appBuild": {
                            "type": "string"
                          },
                          "count": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "deviceCount": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "firstOccurrence": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastOccurrence": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "exceptionType": {
                            "type": "string"
                          },
                          "exceptionMessage": {
                            "type": "string"
                          },
                          "exceptionClassName": {
                            "type": "string"
                          },
                          "exceptionClassMethod": {
                            "type": "boolean"
                          },
                          "exceptionMethod": {
                            "type": "string"
                          },
                          "exceptionAppCode": {
                            "type": "boolean"
                          },
                          "exceptionFile": {
                            "type": "string"
                          },
                          "exceptionLine": {
                            "type": "string"
                          },
                          "codeRaw": {
                            "type": "string"
                          },
                          "reasonFrames": {
                            "type": "array",
                            "items": {
                              "properties": {
                                "className": {
                                  "description": "name of the class",
                                  "type": "string"
                                },
                                "method": {
                                  "description": "name of the method",
                                  "type": "string"
                                },
                                "classMethod": {
                                  "description": "is a class method",
                                  "type": "boolean"
                                },
                                "file": {
                                  "description": "name of the file",
                                  "type": "string"
                                },
                                "line": {
                                  "description": "line number",
                                  "type": "integer"
                                },
                                "appCode": {
                                  "description": "this line isn't from any framework",
                                  "type": "boolean"
                                },
                                "frameworkName": {
                                  "description": "Name of the framework",
                                  "type": "string"
                                },
                                "codeFormatted": {
                                  "description": "Formatted frame string",
                                  "type": "string"
                                },
                                "codeRaw": {
                                  "description": "Unformatted Frame string",
                                  "type": "string"
                                },
                                "language": {
                                  "description": "programming language of the frame",
                                  "enum": [
                                    "JavaScript",
                                    "CSharp",
                                    "Objective-C",
                                    "Objective-Cpp",
                                    "Cpp",
                                    "C",
                                    "Swift",
                                    "Java",
                                    "Unknown"
                                  ],
                                  "type": "string"
                                },
                                "methodParams": {
                                  "description": "parameters of the frames method",
                                  "type": "string"
                                },
                                "exceptionType": {
                                  "description": "Exception type.",
                                  "type": "string"
                                },
                                "osExceptionType": {
                                  "description": "OS exception type. (aka. SIGNAL)",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "hidden": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.",
        "operationId": "Errors_CountsPerDay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "app_build",
            "description": "app build",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "errorType",
            "description": "Type of error (handled vs unhandled), excluding All",
            "type": "string",
            "enum": [
              "unhandledError",
              "handledError"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of crashes or errors by day in the time range, and total over the entire time range.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "format": "int64",
                  "description": "total error count",
                  "type": "integer"
                },
                "errors": {
                  "description": "the total error count for day",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "the ISO 8601 datetime",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "count of the object",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "Get all available versions in the time range.",
        "operationId": "Errors_AvailableVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "type": "integer",
            "format": "int64",
            "default": 0,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "A filter as specified in https://github.com/microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.",
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$inlinecount",
            "description": "Controls whether or not to include a count of all the items across all pages.",
            "type": "string",
            "default": "none",
            "enum": [
              "allpages",
              "none"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "errorType",
            "description": "Type of error (handled vs unhandled), including All",
            "type": "string",
            "enum": [
              "all",
              "unhandledError",
              "handledError"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of available versions in the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "versions": {
                  "description": "List of available versions.",
                  "type": "array",
                  "items": {
                    "format": "string",
                    "description": "Version name.",
                    "type": "string"
                  }
                },
                "total_count": {
                  "format": "int64",
                  "description": "The full number of versions across all pages.",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds": {
      "get": {
        "tags": [
          "errors"
        ],
        "description": "List of app builds",
        "operationId": "Errors_AppBuildsList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "errorType",
            "description": "Type of error (handled vs unhandled), including All",
            "type": "string",
            "enum": [
              "all",
              "unhandledError",
              "handledError"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of App builds",
            "schema": {
              "type": "object",
              "properties": {
                "appBuilds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return the Real time Status publishing of release from store.",
        "operationId": "storeReleases_getRealTimeStatusByReleaseId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "The id of the release",
            "required": true,
            "type": "number"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "status of the app from store",
              "properties": {
                "release_id": {
                  "description": "release id",
                  "type": "string"
                },
                "app_id": {
                  "description": "app id",
                  "type": "string"
                },
                "status": {
                  "description": "Status Data from store",
                  "properties": {
                    "status": {
                      "description": "status from store",
                      "type": "string"
                    },
                    "storetype": {
                      "description": "store type",
                      "type": "string"
                    },
                    "track": {
                      "description": "track information from store",
                      "type": "string"
                    },
                    "version": {
                      "description": "version of the app from store",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns publish logs for a particular release published to a particular store",
        "operationId": "storeReleasePublishLogs_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID of the realease",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return the Error Details of release which failed in publishing.",
        "operationId": "storeReleases_getPublishError",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "The id of the release",
            "required": true,
            "type": "number"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "ReleasePublishErrorResponse",
              "properties": {
                "message": {
                  "description": "error Details",
                  "type": "string"
                },
                "is_log_available": {
                  "description": "boolean property to tell if logs are available for download",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return releases published in a store for releaseId and storeId",
        "operationId": "storeReleases_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Details of an uploaded release",
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "number"
                  },
                  "status": {
                    "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
                    "enum": [
                      "available",
                      "unavailable"
                    ],
                    "type": "string"
                  },
                  "app_name": {
                    "description": "The app's name (extracted from the uploaded release).",
                    "type": "string"
                  },
                  "app_display_name": {
                    "description": "The app's display name.",
                    "type": "string"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "release_notes": {
                    "description": "The release's release notes.",
                    "type": "string"
                  },
                  "size": {
                    "description": "The release's size in bytes.",
                    "type": "number"
                  },
                  "min_os": {
                    "description": "The release's minimum required operating system.",
                    "type": "string"
                  },
                  "android_min_api_level": {
                    "description": "The release's minimum required Android API level.",
                    "type": "string"
                  },
                  "bundle_identifier": {
                    "description": "The identifier of the apps bundle.",
                    "type": "string"
                  },
                  "fingerprint": {
                    "description": "MD5 checksum of the release binary.",
                    "type": "string"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "download_url": {
                    "description": "The URL that hosts the binary for this release.",
                    "type": "string"
                  },
                  "install_url": {
                    "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                    "enum": [
                      "group",
                      "store"
                    ],
                    "type": "string"
                  },
                  "distribution_stores": {
                    "description": "a list of distribution stores that are associated with this release.",
                    "type": "array",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution store.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution store.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the distribution store currently stores type can be intune or googleplay.",
                          "enum": [
                            "intune",
                            "googleplay"
                          ],
                          "type": "string"
                        },
                        "publishing_status": {
                          "description": "publishing status of the release in the store.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "delete the release with release Id",
        "operationId": "storeReleases_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "The id of the release",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return all releases published  in a store",
        "operationId": "storeReleases_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Basic information on a release",
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "number"
                  },
                  "version": {
                    "description": "The release's version.\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "destination_type": {
                    "description": "Destination for this release.",
                    "enum": [
                      "group",
                      "store",
                      "tester"
                    ],
                    "type": "string"
                  },
                  "distribution_stores": {
                    "description": "a list of distribution stores that are associated with this release.",
                    "type": "array",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution store.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution store.",
                          "type": "string"
                        },
                        "type": {
                          "description": "A type identifying the type of distribution store.",
                          "enum": [
                            "googleplay",
                            "intune",
                            "apple"
                          ],
                          "type": "string"
                        },
                        "publishing_status": {
                          "description": "A status identifying the status of release in the distribution store.",
                          "type": "string"
                        },
                        "is_latest": {
                          "description": "Is the containing release the latest one in this distribution store.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns the latest release published in a store.",
        "operationId": "storeReleases_getLatest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Details of an uploaded release",
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "number"
                  },
                  "status": {
                    "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
                    "enum": [
                      "available",
                      "unavailable"
                    ],
                    "type": "string"
                  },
                  "app_name": {
                    "description": "The app's name (extracted from the uploaded release).",
                    "type": "string"
                  },
                  "app_display_name": {
                    "description": "The app's display name.",
                    "type": "string"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "release_notes": {
                    "description": "The release's release notes.",
                    "type": "string"
                  },
                  "size": {
                    "description": "The release's size in bytes.",
                    "type": "number"
                  },
                  "min_os": {
                    "description": "The release's minimum required operating system.",
                    "type": "string"
                  },
                  "android_min_api_level": {
                    "description": "The release's minimum required Android API level.",
                    "type": "string"
                  },
                  "bundle_identifier": {
                    "description": "The identifier of the apps bundle.",
                    "type": "string"
                  },
                  "fingerprint": {
                    "description": "MD5 checksum of the release binary.",
                    "type": "string"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "download_url": {
                    "description": "The URL that hosts the binary for this release.",
                    "type": "string"
                  },
                  "install_url": {
                    "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                    "enum": [
                      "group",
                      "store"
                    ],
                    "type": "string"
                  },
                  "distribution_stores": {
                    "description": "a list of distribution stores that are associated with this release.",
                    "type": "array",
                    "items": {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution store.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution store.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the distribution store currently stores type can be intune or googleplay.",
                          "enum": [
                            "intune",
                            "googleplay"
                          ],
                          "type": "string"
                        },
                        "publishing_status": {
                          "description": "publishing status of the release in the store.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return the store details for specified store name.",
        "operationId": "stores_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "ExternalStoreResponse",
              "properties": {
                "id": {
                  "description": "Store id",
                  "type": "string"
                },
                "name": {
                  "description": "Store Name",
                  "type": "string"
                },
                "type": {
                  "description": "Store Type",
                  "type": "string"
                },
                "track": {
                  "description": "Store track",
                  "enum": [
                    "production",
                    "alpha",
                    "beta",
                    "testflight-internal",
                    "testflight-external"
                  ],
                  "type": "string"
                },
                "intune_details": {
                  "description": "Store details for intune",
                  "properties": {
                    "target_audience": {
                      "properties": {
                        "name": {
                          "description": "display name for the target audience/group",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID for the target audience/group.",
                          "type": "string"
                        }
                      }
                    },
                    "app_category": {
                      "properties": {
                        "name": {
                          "description": "display name for the app category",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID for the category.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "service_connection_id": {
                  "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
                  "type": "string"
                },
                "created_by": {
                  "description": "The ID of the principal that created the store.",
                  "type": "string"
                },
                "created_by_principal_type": {
                  "description": "The type of the principal that created the store.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "distribute"
        ],
        "description": "Update the store.",
        "operationId": "stores_patch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Store update request",
            "required": true,
            "schema": {
              "required": [
                "service_connection_id"
              ],
              "properties": {
                "service_connection_id": {
                  "description": "Service connection id to updated.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "delete the store based on specific store name.",
        "operationId": "stores_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "store_name",
            "description": "The name of the store",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores": {
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Create a new external store for the specified application.",
        "operationId": "stores_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The store request",
            "required": true,
            "schema": {
              "description": "ExternalStoreRequest",
              "properties": {
                "type": {
                  "description": "store Type",
                  "enum": [
                    "googleplay",
                    "intune",
                    "apple"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "name of the store. In case of googleplay, and Apple store this is fixed to Production.",
                  "type": "string"
                },
                "track": {
                  "description": "track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.",
                  "enum": [
                    "production",
                    "alpha",
                    "beta",
                    "testflight-internal",
                    "testflight-external"
                  ],
                  "type": "string"
                },
                "intune_details": {
                  "properties": {
                    "secret_json": {
                      "properties": {
                        "id_token": {
                          "description": "the id token of user",
                          "type": "string"
                        },
                        "refresh_token": {
                          "description": "the refresh token for user",
                          "type": "string"
                        },
                        "refresh_token_expiry": {
                          "description": "the expiry of refresh token",
                          "type": "string"
                        }
                      }
                    },
                    "target_audience": {
                      "properties": {
                        "name": {
                          "description": "display name for the target audience/group",
                          "type": "string"
                        }
                      }
                    },
                    "app_category": {
                      "properties": {
                        "name": {
                          "description": "display name for the app category",
                          "type": "string"
                        }
                      }
                    },
                    "tenant_id": {
                      "description": "tenant id of the intune store",
                      "type": "string"
                    }
                  }
                },
                "service_connection_id": {
                  "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "description": "ExternalStoreResponse",
              "properties": {
                "id": {
                  "description": "Store id",
                  "type": "string"
                },
                "name": {
                  "description": "Store Name",
                  "type": "string"
                },
                "type": {
                  "description": "Store Type",
                  "type": "string"
                },
                "track": {
                  "description": "Store track",
                  "enum": [
                    "production",
                    "alpha",
                    "beta",
                    "testflight-internal",
                    "testflight-external"
                  ],
                  "type": "string"
                },
                "intune_details": {
                  "description": "Store details for intune",
                  "properties": {
                    "target_audience": {
                      "properties": {
                        "name": {
                          "description": "display name for the target audience/group",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID for the target audience/group.",
                          "type": "string"
                        }
                      }
                    },
                    "app_category": {
                      "properties": {
                        "name": {
                          "description": "display name for the app category",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID for the category.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "service_connection_id": {
                  "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
                  "type": "string"
                },
                "created_by": {
                  "description": "The ID of the principal that created the store.",
                  "type": "string"
                },
                "created_by_principal_type": {
                  "description": "The type of the principal that created the store.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Get all the store details from Storage store table for a particular application.",
        "operationId": "stores_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "ExternalStoreResponse",
                "properties": {
                  "id": {
                    "description": "Store id",
                    "type": "string"
                  },
                  "name": {
                    "description": "Store Name",
                    "type": "string"
                  },
                  "type": {
                    "description": "Store Type",
                    "type": "string"
                  },
                  "track": {
                    "description": "Store track",
                    "enum": [
                      "production",
                      "alpha",
                      "beta",
                      "testflight-internal",
                      "testflight-external"
                    ],
                    "type": "string"
                  },
                  "intune_details": {
                    "description": "Store details for intune",
                    "properties": {
                      "target_audience": {
                        "properties": {
                          "name": {
                            "description": "display name for the target audience/group",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID for the target audience/group.",
                            "type": "string"
                          }
                        }
                      },
                      "app_category": {
                        "properties": {
                          "name": {
                            "description": "display name for the app category",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID for the category.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "service_connection_id": {
                    "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
                    "type": "string"
                  },
                  "created_by": {
                    "description": "The ID of the principal that created the store.",
                    "type": "string"
                  },
                  "created_by_principal_type": {
                    "description": "The type of the principal that created the store.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Resend distribution group app invite notification to previously invited testers",
        "operationId": "distributionGroups_resendInvite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "members",
            "description": "The list of members to add",
            "required": true,
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return detailed information about a distributed release in a given distribution group.",
        "operationId": "releases_getLatestByDistributionGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the app owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the app",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "Also supports the constant `latest`, which will return the latest release in the distribution group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Details of an uploaded release",
              "required": [
                "id",
                "app_name",
                "app_display_name",
                "uploaded_at",
                "version",
                "short_version",
                "app_icon_url",
                "enabled"
              ],
              "properties": {
                "id": {
                  "description": "ID identifying this unique release.",
                  "type": "integer"
                },
                "app_name": {
                  "description": "The app's name (extracted from the uploaded release).",
                  "type": "string"
                },
                "app_display_name": {
                  "description": "The app's display name.",
                  "type": "string"
                },
                "app_os": {
                  "description": "The app's OS.",
                  "type": "string"
                },
                "version": {
                  "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                  "type": "string"
                },
                "origin": {
                  "description": "The release's origin",
                  "enum": [
                    "hockeyapp",
                    "appcenter"
                  ],
                  "type": "string"
                },
                "short_version": {
                  "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                  "type": "string"
                },
                "release_notes": {
                  "description": "The release's release notes.",
                  "type": "string"
                },
                "provisioning_profile_name": {
                  "description": "The release's provisioning profile name.",
                  "type": "string"
                },
                "provisioning_profile_type": {
                  "description": "The type of the provisioning profile for the requested app version.",
                  "enum": [
                    "adhoc",
                    "enterprise",
                    "other"
                  ],
                  "type": "string"
                },
                "provisioning_profile_expiry_date": {
                  "description": "expiration date of provisioning profile in UTC format.",
                  "type": "string"
                },
                "is_provisioning_profile_syncing": {
                  "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                  "type": "boolean"
                },
                "size": {
                  "description": "The release's size in bytes.",
                  "type": "integer"
                },
                "min_os": {
                  "description": "The release's minimum required operating system.",
                  "type": "string"
                },
                "device_family": {
                  "description": "The release's device family.",
                  "type": "string"
                },
                "android_min_api_level": {
                  "description": "The release's minimum required Android API level.",
                  "type": "string"
                },
                "bundle_identifier": {
                  "description": "The identifier of the apps bundle.",
                  "type": "string"
                },
                "package_hashes": {
                  "description": "Hashes for the packages.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "fingerprint": {
                  "description": "MD5 checksum of the release binary.",
                  "type": "string"
                },
                "uploaded_at": {
                  "description": "UTC time in ISO 8601 format of the uploaded time.",
                  "type": "string"
                },
                "download_url": {
                  "description": "The URL that hosts the binary for this release.",
                  "type": "string"
                },
                "app_icon_url": {
                  "description": "A URL to the app's icon.",
                  "type": "string"
                },
                "install_url": {
                  "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                  "type": "string"
                },
                "destination_type": {
                  "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                  "enum": [
                    "group",
                    "store",
                    "tester"
                  ],
                  "type": "string"
                },
                "distribution_groups": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution group.",
                        "type": "string"
                      }
                    }
                  }
                },
                "distribution_stores": {
                  "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                  "type": "array",
                  "items": {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution store.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution store.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                        "enum": [
                          "intune",
                          "googleplay",
                          "apple",
                          "none"
                        ],
                        "type": "string"
                      },
                      "publishing_status": {
                        "description": "publishing status of the release in the store.",
                        "type": "string"
                      }
                    }
                  }
                },
                "destinations": {
                  "description": "A list of distribution groups or stores.",
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution group.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution group.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "ID identifying a unique distribution store.",
                                "type": "string"
                              },
                              "name": {
                                "description": "A name identifying a unique distribution store.",
                                "type": "string"
                              },
                              "type": {
                                "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                "enum": [
                                  "intune",
                                  "googleplay",
                                  "apple",
                                  "none"
                                ],
                                "type": "string"
                              },
                              "publishing_status": {
                                "description": "publishing status of the release in the store.",
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "is_latest": {
                                "description": "Is the containing release the latest one in this distribution store.",
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "destination_type": {
                            "description": "Destination can be either store or group.",
                            "enum": [
                              "group",
                              "store",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "display_name": {
                            "description": "Display name for the group or tester",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "is_udid_provisioned": {
                  "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                  "type": "boolean"
                },
                "can_resign": {
                  "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                  "type": "boolean"
                },
                "build": {
                  "description": "Contains metadata about the build that produced the release being uploaded",
                  "type": "object",
                  "properties": {
                    "branch_name": {
                      "description": "The branch name of the build producing the release",
                      "type": "string"
                    },
                    "commit_hash": {
                      "description": "The commit hash of the build producing the release",
                      "type": "string"
                    },
                    "commit_message": {
                      "description": "The commit message of the build producing the release",
                      "type": "string"
                    }
                  }
                },
                "enabled": {
                  "description": "This value determines the whether a release currently is enabled or disabled.",
                  "type": "boolean"
                },
                "status": {
                  "description": "Status of the release.",
                  "type": "string"
                },
                "is_external_build": {
                  "description": "This value determines if a release is external or not.",
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Error Codes:\n- `not_found` - Distribution group or the app doesn't exist\n- `no_releases_for_app` - App has no releases.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "501": {
            "description": "Requesting a specific release_id is not supported.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Deletes a release with id 'release_id' in a given distribution group.",
        "operationId": "releases_deleteWithDistributionGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the app owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the app",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "release_id",
            "description": "The ID identifying the unique release.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Error codes:\n- `distribution_group_not_found` - Distribution group or the app doesn't exist.\n- `not_found` - release isn't found.\n"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Return basic information about distributed releases in a given distribution group.",
        "operationId": "releases_listByDistributionGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Response for getting a list of releases in a distribution group",
              "type": "array",
              "items": {
                "description": "Response for getting a list of releases in a distribution group",
                "required": [
                  "id",
                  "version",
                  "enabled",
                  "uploaded_at",
                  "short_version",
                  "mandatory_update"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "integer"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The release's origin",
                    "enum": [
                      "hockeyapp",
                      "appcenter"
                    ],
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "mandatory_update": {
                    "description": "A boolean which determines whether the release is a mandatory update or not.",
                    "type": "boolean"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "This value determines the whether a release currently is enabled or disabled.",
                    "type": "boolean"
                  },
                  "is_external_build": {
                    "description": "This value determines if a release is external or not.",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "404": {
            "description": "A distribution group can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Remove the users from the distribution group",
        "operationId": "distributionGroups_removeUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "members",
            "description": "The list of members to add",
            "required": true,
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "status"
                ],
                "properties": {
                  "code": {
                    "description": "The code of the result",
                    "type": "string"
                  },
                  "message": {
                    "description": "The message of the result",
                    "type": "integer"
                  },
                  "status": {
                    "description": "The status code of the result",
                    "type": "integer"
                  },
                  "user_email": {
                    "description": "The email of the user",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of member details in the distribution group specified",
        "operationId": "distributionGroups_listUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "exclude_pending_invitations",
            "description": "Whether to exclude pending invitations in the response",
            "type": "boolean",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "email"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id (UUID) of the user",
                    "type": "string"
                  },
                  "avatar_url": {
                    "description": "The avatar URL of the user",
                    "type": "string"
                  },
                  "can_change_password": {
                    "description": "User is required to send an old password in order to change the password.",
                    "type": "boolean"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "invite_pending": {
                    "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Adds the members to the specified distribution group",
        "operationId": "distributionGroups_addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "members",
            "description": "The list of members to add",
            "required": true,
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "status"
                ],
                "properties": {
                  "code": {
                    "description": "The code of the result",
                    "type": "string"
                  },
                  "invite_pending": {
                    "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "The message of the result",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status code of the result",
                    "type": "integer"
                  },
                  "user_email": {
                    "description": "The email of the user",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns all devices associated with the given distribution group.",
        "operationId": "devices_listCsvFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unprovisioned_only",
            "description": "when true, filters out provisioned devices",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "udids",
            "description": "multiple UDIDs which should be part of the resulting CSV.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "<b>not_found</b>: A distribution group can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "An internal error.",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Returns all devices associated with the given distribution group",
        "operationId": "devices_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "release_id",
            "description": "when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.",
            "type": "number"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "The information for a single iOS device",
                "required": [
                  "udid",
                  "model",
                  "device_name",
                  "os_build",
                  "os_version",
                  "status"
                ],
                "properties": {
                  "udid": {
                    "description": "The Unique Device IDentifier of the device",
                    "type": "string"
                  },
                  "model": {
                    "description": "The model identifier of the device, in the format iDeviceM,N",
                    "type": "string"
                  },
                  "device_name": {
                    "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                    "type": "string"
                  },
                  "full_device_name": {
                    "description": "A combination of the device model name and the owner name.",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "The last known OS version running on the device",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "The last known OS version running on the device",
                    "type": "string"
                  },
                  "serial": {
                    "description": "The device's serial number. Always empty or undefined at present.",
                    "type": "string"
                  },
                  "imei": {
                    "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                    "type": "string"
                  },
                  "owner_id": {
                    "description": "The user ID of the device owner.",
                    "type": "string"
                  },
                  "status": {
                    "description": "The provisioning status of the device.",
                    "type": "string"
                  },
                  "registered_at": {
                    "description": "Timestamp of when the device was registered in ISO format.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "<b>not_found</b>: A distribution group can't be found.\n",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a single distribution group for a given distribution group name",
        "operationId": "distributionGroups_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "origin",
                "is_public"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID of the distribution group",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group used in URLs",
                  "type": "string"
                },
                "display_name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this distribution group",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Updates the attributes of distribution group",
        "operationId": "distributionGroups_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "distribution_group",
            "description": "The attributes to update for the distribution group",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "origin",
                "is_public"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID of the distribution group",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group used in URLs",
                  "type": "string"
                },
                "display_name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this distribution group",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Deletes a distribution group",
        "operationId": "distributionGroups_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "distribution_group_name",
            "description": "The name of the distribution group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of distribution groups in the app specified",
        "operationId": "distributionGroups_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "name",
                  "origin",
                  "is_public"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique ID of the distribution group",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the distribution group used in URLs",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The name of the distribution group",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The creation origin of this distribution group",
                    "enum": [
                      "appcenter",
                      "hockeyapp"
                    ],
                    "type": "string"
                  },
                  "is_public": {
                    "description": "Whether the distribution group is public",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a new distribution group and returns it to the caller",
        "operationId": "distributionGroups_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "distribution_group",
            "description": "The attributes to update for the distribution group",
            "required": true,
            "schema": {
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the distribution group. If not specified, the name will be used.",
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "name",
                "origin",
                "is_public"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID of the distribution group",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group used in URLs",
                  "type": "string"
                },
                "display_name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this distribution group",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "is_public": {
                  "description": "Whether the distribution group is public",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info": {
      "get": {
        "tags": [
          "crash"
        ],
        "summary": "Gets application level statistics for all missing symbol groups",
        "description": "Gets application level statistics for all missing symbol groups",
        "operationId": "missingSymbolGroups_info",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "missing symbol groups",
              "required": [
                "total_crash_count"
              ],
              "properties": {
                "total_crash_count": {
                  "description": "total number of crashes for all missing symbol groups",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "description": "failure response object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}": {
      "get": {
        "tags": [
          "crash"
        ],
        "summary": "Gets missing symbol crash group by its id",
        "description": "Gets missing symbol crash group by its id",
        "operationId": "missingSymbolGroups_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol_group_id",
            "description": "missing symbol crash group id",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "grouped by missing symbols crashes response object",
              "required": [
                "total_crash_count",
                "groups"
              ],
              "properties": {
                "total_crash_count": {
                  "description": "total number of crashes for all the groups",
                  "type": "integer"
                },
                "groups": {
                  "description": "list of crash groups formed by missing symbols combination",
                  "type": "array",
                  "items": {
                    "description": "missing symbol crash group object",
                    "required": [
                      "symbol_group_id",
                      "app_id",
                      "app_ver",
                      "app_build",
                      "last_modified",
                      "missing_symbols",
                      "status"
                    ],
                    "properties": {
                      "symbol_group_id": {
                        "description": "id of the symbol group",
                        "type": "string"
                      },
                      "crash_count": {
                        "description": "number of crashes that belong to this group",
                        "type": "integer"
                      },
                      "error_count": {
                        "description": "number of errors that belong to this group",
                        "type": "integer"
                      },
                      "app_id": {
                        "description": "application id",
                        "type": "string"
                      },
                      "app_ver": {
                        "description": "application version",
                        "type": "string"
                      },
                      "app_build": {
                        "description": "application build",
                        "type": "string"
                      },
                      "last_modified": {
                        "format": "date-time",
                        "description": "last update date for the group",
                        "type": "string"
                      },
                      "missing_symbols": {
                        "description": "list of missing symbols",
                        "type": "array",
                        "items": {
                          "description": "missing symbol",
                          "required": [
                            "symbol_id",
                            "name",
                            "status"
                          ],
                          "properties": {
                            "symbol_id": {
                              "description": "symbol id",
                              "type": "string"
                            },
                            "name": {
                              "description": "symbol name",
                              "type": "string"
                            },
                            "platform": {
                              "description": "symbol plarform",
                              "type": "string"
                            },
                            "status": {
                              "description": "symbol status",
                              "enum": [
                                "missing",
                                "ignored",
                                "available"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      },
                      "status": {
                        "description": "group status",
                        "enum": [
                          "active",
                          "pending",
                          "closed"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "description": "failure response object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups": {
      "get": {
        "tags": [
          "crash"
        ],
        "summary": "Gets top N (ordered by crash count) of crash groups by missing symbol",
        "description": "Gets top N (ordered by crash count) of crash groups by missing symbol",
        "operationId": "missingSymbolGroups_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "top",
            "description": "top N elements",
            "required": true,
            "type": "integer",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "query filter",
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "grouped by missing symbols crashes response object",
              "required": [
                "total_crash_count",
                "groups"
              ],
              "properties": {
                "total_crash_count": {
                  "description": "total number of crashes for all the groups",
                  "type": "integer"
                },
                "groups": {
                  "description": "list of crash groups formed by missing symbols combination",
                  "type": "array",
                  "items": {
                    "description": "missing symbol crash group object",
                    "required": [
                      "symbol_group_id",
                      "app_id",
                      "app_ver",
                      "app_build",
                      "last_modified",
                      "missing_symbols",
                      "status"
                    ],
                    "properties": {
                      "symbol_group_id": {
                        "description": "id of the symbol group",
                        "type": "string"
                      },
                      "crash_count": {
                        "description": "number of crashes that belong to this group",
                        "type": "integer"
                      },
                      "error_count": {
                        "description": "number of errors that belong to this group",
                        "type": "integer"
                      },
                      "app_id": {
                        "description": "application id",
                        "type": "string"
                      },
                      "app_ver": {
                        "description": "application version",
                        "type": "string"
                      },
                      "app_build": {
                        "description": "application build",
                        "type": "string"
                      },
                      "last_modified": {
                        "format": "date-time",
                        "description": "last update date for the group",
                        "type": "string"
                      },
                      "missing_symbols": {
                        "description": "list of missing symbols",
                        "type": "array",
                        "items": {
                          "description": "missing symbol",
                          "required": [
                            "symbol_id",
                            "name",
                            "status"
                          ],
                          "properties": {
                            "symbol_id": {
                              "description": "symbol id",
                              "type": "string"
                            },
                            "name": {
                              "description": "symbol name",
                              "type": "string"
                            },
                            "platform": {
                              "description": "symbol plarform",
                              "type": "string"
                            },
                            "status": {
                              "description": "symbol status",
                              "enum": [
                                "missing",
                                "ignored",
                                "available"
                              ],
                              "type": "string"
                            }
                          }
                        }
                      },
                      "status": {
                        "description": "group status",
                        "enum": [
                          "active",
                          "pending",
                          "closed"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "description": "failure response object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}": {
      "put": {
        "tags": [
          "analytics"
        ],
        "description": "**Warning, this operation is not reversible.**\n\n A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.\n",
        "operationId": "Devices_BlockLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "install_id",
            "description": "The id of the device",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "format": "string",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs": {
      "put": {
        "tags": [
          "analytics"
        ],
        "description": "**Warning, this operation is not reversible.** \n\nA successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.\n",
        "operationId": "App_BlockLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "format": "string",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/device_selection": {
      "post": {
        "tags": [
          "test"
        ],
        "description": "Creates a short ID for a list of devices",
        "operationId": "test_createDeviceSelection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deviceList",
            "required": true,
            "schema": {
              "title": "Device List",
              "description": "A list of device IDs",
              "required": [
                "devices"
              ],
              "type": "object",
              "properties": {
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "title": "Device Selection",
              "description": "Short ID for a list of device IDs",
              "required": [
                "shortId"
              ],
              "type": "object",
              "properties": {
                "shortId": {
                  "description": "Identifier of the device selection",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid list of device IDs",
            "schema": {
              "title": "Test Cloud Error Details",
              "description": "Details of a failed operation",
              "required": [
                "status",
                "message"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the operation",
                  "type": "string"
                },
                "message": {
                  "description": "Human-readable message that describes the error",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/device_configurations": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Returns a list of available devices",
        "operationId": "test_getDeviceConfigurations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "app_upload_id",
            "description": "The ID of the test run",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "name": {
                    "description": "The name of the device model and OS version",
                    "type": "string"
                  },
                  "id": {
                    "format": "uuid",
                    "description": "The unique id of the device configuration",
                    "type": "string"
                  },
                  "tier": {
                    "description": "The tier",
                    "type": "number"
                  },
                  "image": {
                    "properties": {
                      "full": {
                        "type": "string"
                      },
                      "thumb": {
                        "type": "string"
                      }
                    }
                  },
                  "model": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "manufacturer": {
                        "type": "string"
                      },
                      "model": {
                        "type": "string"
                      },
                      "platform": {
                        "type": "string"
                      },
                      "dimensions": {
                        "description": "Physical device dimensions",
                        "properties": {
                          "depth": {
                            "type": "object"
                          },
                          "height": {
                            "type": "object"
                          },
                          "width": {
                            "type": "object"
                          }
                        }
                      },
                      "resolution": {
                        "description": "Device screen resolution",
                        "properties": {
                          "height": {
                            "type": "string"
                          },
                          "width": {
                            "type": "string"
                          },
                          "ppi": {
                            "type": "string"
                          }
                        }
                      },
                      "releaseDate": {
                        "type": "string"
                      },
                      "formFactor": {
                        "type": "string"
                      },
                      "screenSize": {
                        "description": "Physical device screen dimensions",
                        "properties": {
                          "cm": {
                            "type": "string"
                          },
                          "in": {
                            "type": "string"
                          }
                        }
                      },
                      "cpu": {
                        "description": "CPU data for device",
                        "properties": {
                          "frequency": {
                            "type": "string"
                          },
                          "core": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          }
                        }
                      },
                      "memory": {
                        "description": "Memory data for device",
                        "properties": {
                          "formattedSize": {
                            "type": "string"
                          }
                        }
                      },
                      "screenRotation": {
                        "type": "number"
                      },
                      "deviceFrame": {
                        "properties": {
                          "grid": {
                            "properties": {
                              "width": {
                                "type": "number"
                              },
                              "height": {
                                "type": "number"
                              },
                              "frameUrl": {
                                "type": "string"
                              },
                              "screen": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              }
                            }
                          },
                          "full": {
                            "properties": {
                              "width": {
                                "type": "number"
                              },
                              "height": {
                                "type": "number"
                              },
                              "frameUrl": {
                                "type": "string"
                              },
                              "screen": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      },
                      "availabilityCount": {
                        "type": "number"
                      }
                    }
                  },
                  "os": {
                    "type": "string"
                  },
                  "osName": {
                    "type": "string"
                  },
                  "marketShare": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads": {
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Create a new CodePush release upload for the specified deployment",
        "operationId": "codePushDeploymentUpload_create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "upload_domain",
                "token"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The ID for the newly created upload. It is going to be required later in the process.",
                  "type": "string"
                },
                "upload_domain": {
                  "description": "The URL domain used to upload the release.",
                  "type": "string"
                },
                "token": {
                  "description": "The URL encoded token used for upload permissions.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release": {
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Rollback the latest or a specific release for an app deployment",
        "operationId": "codePushDeploymentRelease_rollback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "releaseLabel",
            "description": "The specific release label that you want to rollback to",
            "schema": {
              "properties": {
                "label": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                {
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "package_hash": {
                      "type": "string"
                    },
                    "blob_url": {
                      "type": "string"
                    },
                    "diff_package_map": {
                      "type": "object",
                      "additionalProperties": {
                        "required": [
                          "size",
                          "url"
                        ],
                        "type": "object",
                        "properties": {
                          "size": {
                            "type": "number"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "original_deployment": {
                      "description": "Set on 'Promote'",
                      "type": "string"
                    },
                    "original_label": {
                      "description": "Set on 'Promote' and 'Rollback'",
                      "type": "string"
                    },
                    "released_by": {
                      "type": "string"
                    },
                    "release_method": {
                      "description": "The release method is unknown if unspecified",
                      "enum": [
                        "Upload",
                        "Promote",
                        "Rollback"
                      ],
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "upload_time": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}": {
      "patch": {
        "tags": [
          "codepush"
        ],
        "description": "Modifies a CodePush release metadata under the given Deployment",
        "operationId": "deploymentReleases_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "release_label",
            "description": "release label",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "release",
            "description": "Release modification. All fields are optional and only provided fields will get updated.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                {
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "package_hash": {
                      "type": "string"
                    },
                    "blob_url": {
                      "type": "string"
                    },
                    "diff_package_map": {
                      "type": "object",
                      "additionalProperties": {
                        "required": [
                          "size",
                          "url"
                        ],
                        "type": "object",
                        "properties": {
                          "size": {
                            "type": "number"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "original_deployment": {
                      "description": "Set on 'Promote'",
                      "type": "string"
                    },
                    "original_label": {
                      "description": "Set on 'Promote' and 'Rollback'",
                      "type": "string"
                    },
                    "released_by": {
                      "type": "string"
                    },
                    "release_method": {
                      "description": "The release method is unknown if unspecified",
                      "enum": [
                        "Upload",
                        "Promote",
                        "Rollback"
                      ],
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "upload_time": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "204": {
            "description": "Nothing to patch"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases": {
      "delete": {
        "tags": [
          "codepush"
        ],
        "description": "Clears a Deployment of releases",
        "operationId": "codePushDeploymentReleases_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "codepush"
        ],
        "description": "Gets the history of releases on a Deployment",
        "operationId": "codePushDeploymentReleases_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "properties": {
                      "target_binary_range": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "is_disabled": {
                        "type": "boolean"
                      },
                      "is_mandatory": {
                        "type": "boolean"
                      },
                      "rollout": {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                      }
                    }
                  },
                  {
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "package_hash": {
                        "type": "string"
                      },
                      "blob_url": {
                        "type": "string"
                      },
                      "diff_package_map": {
                        "type": "object",
                        "additionalProperties": {
                          "required": [
                            "size",
                            "url"
                          ],
                          "type": "object",
                          "properties": {
                            "size": {
                              "type": "number"
                            },
                            "url": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "original_deployment": {
                        "description": "Set on 'Promote'",
                        "type": "string"
                      },
                      "original_label": {
                        "description": "Set on 'Promote' and 'Rollback'",
                        "type": "string"
                      },
                      "released_by": {
                        "type": "string"
                      },
                      "release_method": {
                        "description": "The release method is unknown if unspecified",
                        "enum": [
                          "Upload",
                          "Promote",
                          "Rollback"
                        ],
                        "type": "string"
                      },
                      "size": {
                        "type": "number"
                      },
                      "upload_time": {
                        "type": "integer"
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Create a new CodePush release for the specified deployment",
        "operationId": "codePushDeploymentReleases_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "uploaded_release",
            "description": "The necessary information required to download the bundle and being the release process.",
            "required": true,
            "schema": {
              "required": [
                "release_upload",
                "target_binary_version"
              ],
              "properties": {
                "release_upload": {
                  "description": "The upload metadata from the release initialization step.",
                  "required": [
                    "id",
                    "upload_domain",
                    "token"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The ID for the newly created upload. It is going to be required later in the process.",
                      "type": "string"
                    },
                    "upload_domain": {
                      "description": "The URL domain used to upload the release.",
                      "type": "string"
                    },
                    "token": {
                      "description": "The URL encoded token used for upload permissions.",
                      "type": "string"
                    }
                  }
                },
                "target_binary_version": {
                  "description": "the binary version of the application",
                  "type": "string"
                },
                "deployment_name": {
                  "description": "This specifies which deployment you want to release the update to. Default is Staging.",
                  "type": "string"
                },
                "description": {
                  "description": "This provides an optional \"change log\" for the deployment.",
                  "maximum": 10000,
                  "type": "string"
                },
                "disabled": {
                  "description": "This specifies whether an update should be downloadable by end users or not.",
                  "type": "boolean"
                },
                "mandatory": {
                  "description": "This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).",
                  "type": "boolean"
                },
                "no_duplicate_release_error": {
                  "description": "This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.",
                  "type": "boolean"
                },
                "rollout": {
                  "description": "This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                {
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "package_hash": {
                      "type": "string"
                    },
                    "blob_url": {
                      "type": "string"
                    },
                    "diff_package_map": {
                      "type": "object",
                      "additionalProperties": {
                        "required": [
                          "size",
                          "url"
                        ],
                        "type": "object",
                        "properties": {
                          "size": {
                            "type": "number"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "original_deployment": {
                      "description": "Set on 'Promote'",
                      "type": "string"
                    },
                    "original_label": {
                      "description": "Set on 'Promote' and 'Rollback'",
                      "type": "string"
                    },
                    "released_by": {
                      "type": "string"
                    },
                    "release_method": {
                      "description": "The release method is unknown if unspecified",
                      "enum": [
                        "Upload",
                        "Promote",
                        "Rollback"
                      ],
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "upload_time": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}": {
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Promote one release (default latest one) from one deployment to another",
        "operationId": "codePushDeployments_promote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "promote_deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "release",
            "description": "Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                {
                  "properties": {
                    "label": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Promote a new release to the target deployment, return this new release.",
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                {
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "package_hash": {
                      "type": "string"
                    },
                    "blob_url": {
                      "type": "string"
                    },
                    "diff_package_map": {
                      "type": "object",
                      "additionalProperties": {
                        "required": [
                          "size",
                          "url"
                        ],
                        "type": "object",
                        "properties": {
                          "size": {
                            "type": "number"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "original_deployment": {
                      "description": "Set on 'Promote'",
                      "type": "string"
                    },
                    "original_label": {
                      "description": "Set on 'Promote' and 'Rollback'",
                      "type": "string"
                    },
                    "released_by": {
                      "type": "string"
                    },
                    "release_method": {
                      "description": "The release method is unknown if unspecified",
                      "enum": [
                        "Upload",
                        "Promote",
                        "Rollback"
                      ],
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "upload_time": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics": {
      "get": {
        "tags": [
          "codepush"
        ],
        "description": "Gets all releases metrics for specified Deployment",
        "operationId": "codePushDeploymentMetrics_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "label",
                  "active"
                ],
                "properties": {
                  "label": {
                    "type": "string"
                  },
                  "active": {
                    "type": "integer"
                  },
                  "downloaded": {
                    "type": "integer"
                  },
                  "failed": {
                    "type": "integer"
                  },
                  "installed": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}": {
      "delete": {
        "tags": [
          "codepush"
        ],
        "description": "Deletes a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "codepush"
        ],
        "description": "Gets a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "latest_release": {
                  "allOf": [
                    {
                      "properties": {
                        "target_binary_range": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "properties": {
                        "label": {
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "type": "object",
                          "additionalProperties": {
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object",
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "codepush"
        ],
        "description": "Modifies a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_name",
            "description": "deployment name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deployment",
            "description": "Deployment modification. All fields are optional and only provided fields will get updated.",
            "required": true,
            "schema": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "maxLength": 1000,
                  "minLength": 1,
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments": {
      "get": {
        "tags": [
          "codepush"
        ],
        "description": "Gets a list of CodePush deployments for the given app",
        "operationId": "codePushDeployments_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "latest_release": {
                    "allOf": [
                      {
                        "properties": {
                          "target_binary_range": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "is_disabled": {
                            "type": "boolean"
                          },
                          "is_mandatory": {
                            "type": "boolean"
                          },
                          "rollout": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                          }
                        }
                      },
                      {
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "package_hash": {
                            "type": "string"
                          },
                          "blob_url": {
                            "type": "string"
                          },
                          "diff_package_map": {
                            "type": "object",
                            "additionalProperties": {
                              "required": [
                                "size",
                                "url"
                              ],
                              "type": "object",
                              "properties": {
                                "size": {
                                  "type": "number"
                                },
                                "url": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "original_deployment": {
                            "description": "Set on 'Promote'",
                            "type": "string"
                          },
                          "original_label": {
                            "description": "Set on 'Promote' and 'Rollback'",
                            "type": "string"
                          },
                          "released_by": {
                            "type": "string"
                          },
                          "release_method": {
                            "description": "The release method is unknown if unspecified",
                            "enum": [
                              "Upload",
                              "Promote",
                              "Rollback"
                            ],
                            "type": "string"
                          },
                          "size": {
                            "type": "number"
                          },
                          "upload_time": {
                            "type": "integer"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "codepush"
        ],
        "description": "Creates a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "deployment",
            "description": "Deployment to be created",
            "required": true,
            "schema": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "latest_release": {
                  "allOf": [
                    {
                      "properties": {
                        "target_binary_range": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "properties": {
                        "label": {
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "type": "object",
                          "additionalProperties": {
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object",
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "latest_release": {
                  "allOf": [
                    {
                      "properties": {
                        "target_binary_range": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        }
                      }
                    },
                    {
                      "properties": {
                        "label": {
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "type": "object",
                          "additionalProperties": {
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object",
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/data/resource_provisioning": {
      "get": {
        "tags": [
          "mbaas"
        ],
        "operationId": "data_getResourceProvisioning",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "required": [
                "status"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "enum": [
                    "Empty",
                    "Accepted",
                    "Creating",
                    "Connected",
                    "Invalid"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "mbaas"
        ],
        "summary": "Creates Cosmos DB or attaches an existing one",
        "operationId": "data_postResourceProvisioning",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "AC-Authorization-ARM",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "provisionDatabaseParameters",
            "schema": {
              "type": "object",
              "properties": {
                "subscriptionId": {
                  "type": "string"
                },
                "databaseConnectionString": {
                  "type": "string"
                },
                "resourceRegion": {
                  "enum": [
                    "East Asia",
                    "Southeast Asia",
                    "Australia Central",
                    "Australia Central 2",
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Canada Central",
                    "Canada East",
                    "Central India",
                    "South India",
                    "West India",
                    "North Europe",
                    "West Europe",
                    "France Central",
                    "France South",
                    "Germany Central",
                    "Germany Northeast",
                    "Japan East",
                    "Japan West",
                    "Korea Central",
                    "Korea South",
                    "South Africa North",
                    "South Africa West",
                    "UK South",
                    "UK West",
                    "Central US",
                    "East US",
                    "East US 2",
                    "US Gov Arizona",
                    "US Gov Texas",
                    "North Central US",
                    "South Central US",
                    "West US",
                    "West US 2",
                    "West Central US"
                  ],
                  "type": "string"
                },
                "database": {
                  "type": "string"
                },
                "collection": {
                  "type": "string"
                },
                "requestUnits": {
                  "format": "int64",
                  "maximum": 2147483647,
                  "minimum": 400,
                  "type": "integer"
                },
                "accountName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request Accepted",
            "schema": {
              "required": [
                "status"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "enum": [
                    "Empty",
                    "Accepted",
                    "Creating",
                    "Connected",
                    "Invalid"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/data/overview": {
      "get": {
        "tags": [
          "mbaas"
        ],
        "summary": "Gets general data about the provisioned database",
        "operationId": "data_getOverview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "AC-Authorization-ARM",
            "description": "ARM access token.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/data/database_account_names/{accountName}": {
      "head": {
        "tags": [
          "mbaas"
        ],
        "summary": "Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 31 characters.",
        "operationId": "data_checkNameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "AC-Authorization-ARM",
            "description": "ARM token",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "accountName",
            "description": "Account Name",
            "required": true,
            "type": "string",
            "maxLength": 31,
            "minLength": 3
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The account name is valid but is already in use.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad request. Account name in not valid."
          },
          "401": {
            "description": "Unauthorized. Provided ARM Authorization token is invalid or expired."
          },
          "404": {
            "description": "Not Found. The account name is available and valid."
          },
          "500": {
            "description": "Internal Error."
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes_info": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets whether the application has any crashes.",
        "operationId": "crashes_getAppCrashesInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "has_crashes",
                "features"
              ],
              "type": "object",
              "properties": {
                "has_crashes": {
                  "type": "boolean"
                },
                "features": {
                  "type": "object",
                  "properties": {
                    "crashgroup_modify_status": {
                      "description": "App supports modification of crashgroup status",
                      "type": "boolean"
                    },
                    "crashgroup_modify_annotation": {
                      "description": "App supports modification of crashgroup annotation",
                      "type": "boolean"
                    },
                    "search": {
                      "description": "App supports search API",
                      "type": "boolean"
                    },
                    "crashgroup_analytics_crashfreeusers": {
                      "description": "App supports the 'crash free user' metric",
                      "type": "boolean"
                    },
                    "crashgroup_analytics_impactedusers": {
                      "description": "App supports the 'impacted users' metric",
                      "type": "boolean"
                    },
                    "crash_download_raw": {
                      "description": "App supports download of raw crashes",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get session logs by crash ID",
        "operationId": "Crashes_ListSessionLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_id",
            "description": "The id of the a crash",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of data requested",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Session logs of specific crash",
            "schema": {
              "required": [
                "logs"
              ],
              "type": "object",
              "properties": {
                "exceeded_max_limit": {
                  "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                  "type": "boolean"
                },
                "last_received_log_timestamp": {
                  "format": "date-time",
                  "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                  "type": "string"
                },
                "logs": {
                  "description": "the list of logs",
                  "minItems": 0,
                  "type": "array",
                  "items": {
                    "description": "Generic log.",
                    "required": [
                      "type",
                      "timestamp",
                      "install_id",
                      "device"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Log type.\n",
                        "enum": [
                          "event",
                          "page",
                          "start_session",
                          "error",
                          "push_installation",
                          "start_service",
                          "custom_properties"
                        ],
                        "type": "string"
                      },
                      "timestamp": {
                        "format": "date-time",
                        "description": "Log creation timestamp.\n",
                        "type": "string"
                      },
                      "install_id": {
                        "format": "uuid",
                        "description": "Install ID.\n",
                        "type": "string"
                      },
                      "session_id": {
                        "format": "uuid",
                        "description": "Session ID.\n",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Event ID.\n",
                        "type": "string"
                      },
                      "event_name": {
                        "description": "Event name.\n",
                        "type": "string"
                      },
                      "message_id": {
                        "description": "Message ID.\n",
                        "type": "string"
                      },
                      "properties": {
                        "description": "event specific properties.\n",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "device": {
                        "description": "Device characteristics.",
                        "required": [
                          "sdk_name",
                          "sdk_version",
                          "os_name",
                          "os_version",
                          "locale",
                          "time_zone_offset",
                          "app_version",
                          "app_build"
                        ],
                        "type": "object",
                        "properties": {
                          "sdk_name": {
                            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                            "type": "string"
                          },
                          "sdk_version": {
                            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                            "type": "string"
                          },
                          "wrapper_sdk_version": {
                            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                            "type": "string"
                          },
                          "wrapper_sdk_name": {
                            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                            "type": "string"
                          },
                          "model": {
                            "description": "Device model (example: iPad2,3).\n",
                            "type": "string"
                          },
                          "oem_name": {
                            "description": "Device manufacturer (example: HTC).\n",
                            "type": "string"
                          },
                          "os_name": {
                            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                            "type": "string"
                          },
                          "os_version": {
                            "description": "OS version (example: 9.3.0).\n",
                            "type": "string"
                          },
                          "os_build": {
                            "description": "OS build code (example: LMY47X).\n",
                            "type": "string"
                          },
                          "os_api_level": {
                            "description": "API level when applicable like in Android (example: 15).\n",
                            "type": "integer"
                          },
                          "locale": {
                            "description": "Language code (example: en_US).\n",
                            "type": "string"
                          },
                          "time_zone_offset": {
                            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                            "maximum": 840,
                            "minimum": -840,
                            "type": "integer"
                          },
                          "screen_size": {
                            "description": "Screen size of the device in pixels (example: 640x480).\n",
                            "type": "string"
                          },
                          "app_version": {
                            "description": "Application version name, e.g. 1.1.0\n",
                            "type": "string"
                          },
                          "carrier_name": {
                            "description": "Carrier name (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_code": {
                            "description": "Carrier country code (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_country": {
                            "description": "Carrier country.\n",
                            "type": "string"
                          },
                          "app_build": {
                            "description": "The app's build number, e.g. 42.\n",
                            "type": "string"
                          },
                          "app_namespace": {
                            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                            "type": "string"
                          },
                          "live_update_release_label": {
                            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                            "type": "string"
                          },
                          "live_update_deployment_key": {
                            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                            "type": "string"
                          },
                          "live_update_package_hash": {
                            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                            "type": "string"
                          },
                          "wrapper_runtime_version": {
                            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                            "type": "string"
                          }
                        }
                      },
                      "auth_provider": {
                        "description": "Auth service provider.\n",
                        "type": "string"
                      },
                      "account_id": {
                        "description": "Account ID of the authenticated user.\n",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets content of the text attachment.",
        "operationId": "crashes_getCrashTextAttachmentContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "attachment_id",
            "description": "attachment id",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets the URI location to download crash attachment.",
        "operationId": "crashes_getCrashAttachmentLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "attachment_id",
            "description": "attachment id",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Location for downloading crash attachment",
              "required": [
                "uri"
              ],
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets all attachments for a specific crash.",
        "operationId": "crashes_listAttachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "app_id",
                  "attachment_id",
                  "crash_id",
                  "blob_location",
                  "content_type",
                  "file_name",
                  "created_time",
                  "size"
                ],
                "type": "object",
                "properties": {
                  "app_id": {
                    "type": "string"
                  },
                  "attachment_id": {
                    "type": "string"
                  },
                  "crash_id": {
                    "type": "string"
                  },
                  "blob_location": {
                    "type": "string"
                  },
                  "content_type": {
                    "type": "string"
                  },
                  "file_name": {
                    "type": "string"
                  },
                  "created_time": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "size": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a stacktrace for a specific crash.",
        "operationId": "crashGroups_getStacktrace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "grouping_only",
            "description": "true if the stacktrace should be only the relevant thread / exception. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stacktrace"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a stacktrace for a specific crash.",
        "operationId": "crashes_getStacktrace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "grouping_only",
            "description": "true if the stacktrace should be only the relevant thread / exception. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Stacktrace"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets the URI location to download json of a specific crash.",
        "operationId": "crashes_getRawCrashLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Location for downloading crash raw",
              "required": [
                "uri"
              ],
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets the native log of a specific crash as a text attachment.",
        "operationId": "crashes_getNativeCrashDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets the native log of a specific crash.",
        "operationId": "crashes_getNativeCrash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a specific crash for an app.",
        "operationId": "crashes_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "include_report",
            "description": "true if the crash should include the raw crash report. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "include_log",
            "description": "true if the crash should include the custom log report. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "include_details",
            "description": "true if the crash should include in depth crash details",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "include_stacktrace",
            "description": "true if the crash should include the stacktrace information",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "grouping_only",
            "description": "true if the stacktrace should be only the relevant thread / exception. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Crash"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "crash"
        ],
        "description": "Delete a specific crash and related attachments and blobs for an app.",
        "operationId": "crashes_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "crash_id",
            "description": "id of a specific crash",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "retention_delete",
            "description": "true in that case if the method should skip update counts",
            "type": "boolean",
            "default": false
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "app_id": {
                  "type": "string"
                },
                "crash_group_id": {
                  "type": "string"
                },
                "crash_id": {
                  "type": "string"
                },
                "crashes_deleted": {
                  "type": "integer"
                },
                "attachments_deleted": {
                  "type": "integer"
                },
                "blobs_succeeded": {
                  "type": "integer"
                },
                "blobs_failed": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets all crashes of a group.",
        "operationId": "crashes_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "include_report",
            "description": "true if the crash should include the raw crash report. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "include_log",
            "description": "true if the crash should include the custom log report. Default is false",
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "date_from",
            "description": "",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "date_to",
            "description": "",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "app_version",
            "description": "version",
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "error_type",
            "type": "string",
            "enum": [
              "CrashingErrors",
              "HandledErrors"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Crash"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a specific group.",
        "operationId": "crashGroups_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "crash_group_id",
                "new_crash_group_id",
                "display_id",
                "app_version",
                "build",
                "status",
                "count",
                "first_occurrence",
                "last_occurrence",
                "crash_reason",
                "fatal",
                "annotation"
              ],
              "type": "object",
              "properties": {
                "crash_group_id": {
                  "type": "string"
                },
                "new_crash_group_id": {
                  "type": "string"
                },
                "display_id": {
                  "type": "string"
                },
                "app_version": {
                  "type": "string"
                },
                "build": {
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "open",
                    "closed",
                    "ignored"
                  ],
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                },
                "impacted_users": {
                  "type": "integer"
                },
                "first_occurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "last_occurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "exception": {
                  "type": "string"
                },
                "crash_reason": {
                  "type": "string"
                },
                "reason_frame": {
                  "description": "frame belonging to the reason of the crash",
                  "properties": {
                    "class_name": {
                      "description": "name of the class",
                      "type": "string"
                    },
                    "method": {
                      "description": "name of the method",
                      "type": "string"
                    },
                    "class_method": {
                      "description": "is a class method",
                      "type": "boolean"
                    },
                    "file": {
                      "description": "name of the file",
                      "type": "string"
                    },
                    "line": {
                      "description": "line number",
                      "type": "integer"
                    },
                    "app_code": {
                      "description": "this line isn't from any framework",
                      "type": "boolean"
                    },
                    "framework_name": {
                      "description": "Name of the framework",
                      "type": "string"
                    },
                    "code_formatted": {
                      "description": "Formatted frame string",
                      "type": "string"
                    },
                    "code_raw": {
                      "description": "Unformatted Frame string",
                      "type": "string"
                    },
                    "language": {
                      "description": "programming language of the frame",
                      "enum": [
                        "JavaScript",
                        "CSharp",
                        "Objective-C",
                        "Objective-Cpp",
                        "Cpp",
                        "C",
                        "Swift",
                        "Java",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "method_params": {
                      "description": "parameters of the frames method",
                      "type": "string"
                    },
                    "exception_type": {
                      "description": "Exception type.",
                      "type": "string"
                    },
                    "os_exception_type": {
                      "description": "OS exception type. (aka. SIGNAL)",
                      "type": "string"
                    }
                  }
                },
                "fatal": {
                  "description": "Crash or handled exception",
                  "type": "boolean"
                },
                "annotation": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "crash"
        ],
        "description": "Updates a group.",
        "operationId": "crashGroups_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "id of a specific group",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "group",
            "description": "Group change object. All fields are optional and only provided fields will get updated.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "enum": [
                    "open",
                    "closed",
                    "ignored"
                  ]
                },
                "annotation": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "crash_group_id",
                "new_crash_group_id",
                "display_id",
                "app_version",
                "build",
                "status",
                "count",
                "first_occurrence",
                "last_occurrence",
                "crash_reason",
                "fatal",
                "annotation"
              ],
              "type": "object",
              "properties": {
                "crash_group_id": {
                  "type": "string"
                },
                "new_crash_group_id": {
                  "type": "string"
                },
                "display_id": {
                  "type": "string"
                },
                "app_version": {
                  "type": "string"
                },
                "build": {
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "open",
                    "closed",
                    "ignored"
                  ],
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                },
                "impacted_users": {
                  "type": "integer"
                },
                "first_occurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "last_occurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "exception": {
                  "type": "string"
                },
                "crash_reason": {
                  "type": "string"
                },
                "reason_frame": {
                  "description": "frame belonging to the reason of the crash",
                  "properties": {
                    "class_name": {
                      "description": "name of the class",
                      "type": "string"
                    },
                    "method": {
                      "description": "name of the method",
                      "type": "string"
                    },
                    "class_method": {
                      "description": "is a class method",
                      "type": "boolean"
                    },
                    "file": {
                      "description": "name of the file",
                      "type": "string"
                    },
                    "line": {
                      "description": "line number",
                      "type": "integer"
                    },
                    "app_code": {
                      "description": "this line isn't from any framework",
                      "type": "boolean"
                    },
                    "framework_name": {
                      "description": "Name of the framework",
                      "type": "string"
                    },
                    "code_formatted": {
                      "description": "Formatted frame string",
                      "type": "string"
                    },
                    "code_raw": {
                      "description": "Unformatted Frame string",
                      "type": "string"
                    },
                    "language": {
                      "description": "programming language of the frame",
                      "enum": [
                        "JavaScript",
                        "CSharp",
                        "Objective-C",
                        "Objective-Cpp",
                        "Cpp",
                        "C",
                        "Swift",
                        "Java",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "method_params": {
                      "description": "parameters of the frames method",
                      "type": "string"
                    },
                    "exception_type": {
                      "description": "Exception type.",
                      "type": "string"
                    },
                    "os_exception_type": {
                      "description": "OS exception type. (aka. SIGNAL)",
                      "type": "string"
                    }
                  }
                },
                "fatal": {
                  "description": "Crash or handled exception",
                  "type": "boolean"
                },
                "annotation": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups": {
      "get": {
        "tags": [
          "crash"
        ],
        "description": "Gets a list of crash groups and whether the list contains all available groups.",
        "operationId": "crashGroups_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "last_occurrence_from",
            "description": "Earliest date when the last time a crash occured in a crash group",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "last_occurrence_to",
            "description": "Latest date when the last time a crash occured in a crash group",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "app_version",
            "description": "version",
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "group_type",
            "type": "string",
            "enum": [
              "GroupType1",
              "GroupType2"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "group_status",
            "type": "string",
            "enum": [
              "open",
              "closed",
              "ignored"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "group_text_search",
            "description": "A freetext search that matches in crash, crash types, crash stack_traces and crash user",
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$orderby",
            "description": "the OData-like $orderby argument",
            "type": "string",
            "default": "last_occurrence desc",
            "enum": [
              "last_occurrence asc",
              "last_occurrence desc",
              "count asc",
              "count desc",
              "display_id asc",
              "display_id desc",
              "impacted_users asc",
              "impacted_users desc"
            ],
            "allowEmptyValue": true,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "continuation_token",
            "description": "Cassandra request continuation token. The token is used for pagination.",
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "limited_result_set",
                "crash_groups"
              ],
              "type": "object",
              "properties": {
                "limited_result_set": {
                  "type": "boolean"
                },
                "continuation_token": {
                  "description": "Cassandra request continuation token. The token is used for pagination.",
                  "type": "string"
                },
                "crash_groups": {
                  "type": "array",
                  "items": {
                    "required": [
                      "crash_group_id",
                      "new_crash_group_id",
                      "display_id",
                      "app_version",
                      "build",
                      "status",
                      "count",
                      "first_occurrence",
                      "last_occurrence",
                      "crash_reason",
                      "fatal",
                      "annotation"
                    ],
                    "type": "object",
                    "properties": {
                      "crash_group_id": {
                        "type": "string"
                      },
                      "new_crash_group_id": {
                        "type": "string"
                      },
                      "display_id": {
                        "type": "string"
                      },
                      "app_version": {
                        "type": "string"
                      },
                      "build": {
                        "type": "string"
                      },
                      "status": {
                        "enum": [
                          "open",
                          "closed",
                          "ignored"
                        ],
                        "type": "string"
                      },
                      "count": {
                        "type": "integer"
                      },
                      "impacted_users": {
                        "type": "integer"
                      },
                      "first_occurrence": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "last_occurrence": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "exception": {
                        "type": "string"
                      },
                      "crash_reason": {
                        "type": "string"
                      },
                      "reason_frame": {
                        "description": "frame belonging to the reason of the crash",
                        "properties": {
                          "class_name": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "class_method": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "app_code": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "framework_name": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "code_formatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "code_raw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "method_params": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "exception_type": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "os_exception_type": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        }
                      },
                      "fatal": {
                        "description": "Crash or handled exception",
                        "type": "boolean"
                      },
                      "annotation": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/commits/batch": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns commit information for a batch of shas",
        "operationId": "commits_listByShaList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "hashes",
            "description": "A collection of commit SHAs comma-delimited",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A list of commits",
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "properties": {
                      "sha": {
                        "description": "The commit SHA",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL to the commit",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "commit": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "description": "Commit message",
                            "type": "string"
                          },
                          "author": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "description": "Date and time of the commit",
                                "type": "string"
                              },
                              "name": {
                                "description": "Author name",
                                "type": "string"
                              },
                              "email": {
                                "description": "Author's email",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Get the build log",
        "operationId": "builds_getLog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "build_id",
            "description": "The build ID",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Gets the download URI",
        "operationId": "builds_getDownloadUri",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "build_id",
            "description": "The build ID",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "download_type",
            "description": "The download type",
            "required": true,
            "type": "string",
            "enum": [
              "build",
              "symbols",
              "logs",
              "mapping",
              "bundle"
            ]
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A download reference",
              "required": [
                "uri"
              ],
              "properties": {
                "uri": {
                  "description": "Download URI",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute": {
      "post": {
        "tags": [
          "build"
        ],
        "description": "Distribute a build",
        "operationId": "builds_distribute",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "build_id",
            "description": "The build ID",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "distribute_info",
            "description": "The distribution details",
            "required": true,
            "schema": {
              "properties": {
                "destinations": {
                  "description": "Array of objects {id:string, type:string} with \"id\" being the distribution group ID, store ID, or tester email, and \"type\" being \"group\", \"store\", or \"tester\"",
                  "type": "array",
                  "items": {
                    "description": "Destination details for distributing build releases",
                    "required": [
                      "id",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "store",
                          "group",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                },
                "releaseNotes": {
                  "description": "The release notes",
                  "type": "string"
                },
                "mandatoryUpdate": {
                  "type": "boolean"
                },
                "notifyTesters": {
                  "default": true,
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "status": {
                  "description": "Status of the Request",
                  "type": "string"
                },
                "upload_id": {
                  "description": "A unique ID of the upload",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns the build detail for the given build ID",
        "operationId": "builds_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "build_id",
            "description": "The build ID",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "buildNumber",
                "queueTime",
                "status",
                "result",
                "sourceBranch",
                "sourceVersion"
              ],
              "properties": {
                "id": {
                  "description": "The build ID",
                  "minimum": 0,
                  "exclusiveMinimum": true,
                  "type": "integer"
                },
                "buildNumber": {
                  "description": "The build number",
                  "type": "string"
                },
                "queueTime": {
                  "format": "dateTime",
                  "description": "The time the build was queued",
                  "type": "string"
                },
                "startTime": {
                  "format": "dateTime",
                  "description": "The time the build was started",
                  "type": "string"
                },
                "finishTime": {
                  "format": "dateTime",
                  "description": "The time the build was finished",
                  "type": "string"
                },
                "lastChangedDate": {
                  "format": "dateTime",
                  "description": "The time the build status was last changed",
                  "type": "string"
                },
                "status": {
                  "description": "The build status",
                  "type": "string"
                },
                "result": {
                  "description": "The build result",
                  "type": "string"
                },
                "sourceBranch": {
                  "description": "The source branch name",
                  "type": "string"
                },
                "sourceVersion": {
                  "description": "The source SHA",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "build"
        ],
        "description": "Cancels a build",
        "operationId": "builds_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "build_id",
            "description": "The build ID",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "properties",
            "required": true,
            "schema": {
              "properties": {
                "status": {
                  "description": "The build status; used to cancel builds",
                  "enum": [
                    "cancelling"
                  ],
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "buildNumber",
                "queueTime",
                "status",
                "result",
                "sourceBranch",
                "sourceVersion"
              ],
              "properties": {
                "id": {
                  "description": "The build ID",
                  "minimum": 0,
                  "exclusiveMinimum": true,
                  "type": "integer"
                },
                "buildNumber": {
                  "description": "The build number",
                  "type": "string"
                },
                "queueTime": {
                  "format": "dateTime",
                  "description": "The time the build was queued",
                  "type": "string"
                },
                "startTime": {
                  "format": "dateTime",
                  "description": "The time the build was started",
                  "type": "string"
                },
                "finishTime": {
                  "format": "dateTime",
                  "description": "The time the build was finished",
                  "type": "string"
                },
                "lastChangedDate": {
                  "format": "dateTime",
                  "description": "The time the build status was last changed",
                  "type": "string"
                },
                "status": {
                  "description": "The build status",
                  "type": "string"
                },
                "result": {
                  "description": "The build result",
                  "type": "string"
                },
                "sourceBranch": {
                  "description": "The source branch name",
                  "type": "string"
                },
                "sourceVersion": {
                  "description": "The source SHA",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/build_service_status": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Application specific build service status",
        "operationId": "builds_getStatusByAppId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Availability for build service status is stored in response schema.",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "service": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "valid_until": {
                  "type": "integer"
                },
                "os": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}": {
      "get": {
        "tags": [
          "alerting"
        ],
        "description": "Get project issue related to a crash group",
        "operationId": "bugTracker_getRepoIssueFromCrash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "CrashGroup Id",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Object returned in response to getting a bug tracker issue related to a crash group id",
              "properties": {
                "id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "bug_tracker_type": {
                  "enum": [
                    "github",
                    "vsts",
                    "jira"
                  ],
                  "type": "string"
                },
                "repo_name": {
                  "type": "string"
                },
                "mobile_center_id": {
                  "type": "string"
                },
                "event_type": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Alerting service error",
              "allOf": [
                {
                  "description": "Generic result for any alerting API operation",
                  "required": [
                    "request_id"
                  ],
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "description": "Unique request identifier for tracking",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                      "enum": [
                        400,
                        404,
                        409,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/bugtracker": {
      "get": {
        "tags": [
          "alerting"
        ],
        "description": "Get bug tracker settings for a particular app",
        "operationId": "bugtracker_getSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Alerting bugtracker resource",
              "properties": {
                "type": {
                  "description": "type of bugtracker",
                  "enum": [
                    "github",
                    "vsts",
                    "jira"
                  ],
                  "type": "string"
                },
                "state": {
                  "description": "bugtracker state",
                  "enum": [
                    "enabled",
                    "disabled",
                    "unauthorized"
                  ],
                  "type": "string"
                },
                "token_id": {
                  "description": "ID of OAuth token",
                  "type": "string"
                },
                "event_types": {
                  "description": "Event types enabled for bugtracker",
                  "type": "array",
                  "items": {
                    "description": "Alerting EventTypes enum",
                    "enum": [
                      "newCrashGroupCreated",
                      "newAppReleased"
                    ],
                    "type": "string"
                  }
                },
                "settings": {
                  "description": "Bugtracker specific settings",
                  "required": [
                    "type",
                    "owner_name"
                  ],
                  "type": "object",
                  "properties": {
                    "callback_url": {
                      "type": "string"
                    },
                    "owner_name": {
                      "type": "string"
                    },
                    "type": {
                      "description": "type of bugtracker",
                      "enum": [
                        "github",
                        "vsts",
                        "jira"
                      ],
                      "type": "string"
                    }
                  },
                  "discriminator": "type"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Alerting service error",
              "allOf": [
                {
                  "description": "Generic result for any alerting API operation",
                  "required": [
                    "request_id"
                  ],
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "description": "Unique request identifier for tracking",
                      "type": "string"
                    }
                  }
                },
                {
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                      "enum": [
                        400,
                        404,
                        409,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns the projects in the repository for the branch, for all toolsets",
        "operationId": "builds_listToolsetProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "os",
            "description": "The desired OS for the project scan; normally the same as the app OS",
            "required": true,
            "type": "string",
            "enum": [
              "iOS",
              "Android",
              "Windows",
              "macOS"
            ]
          },
          {
            "in": "query",
            "name": "platform",
            "description": "The desired platform for the project scan",
            "required": true,
            "type": "string",
            "enum": [
              "Objective-C-Swift",
              "React-Native",
              "Xamarin",
              "Java",
              "UWP"
            ]
          },
          {
            "in": "query",
            "name": "maxSearchDepth",
            "description": "The depth of the repository to search for project files",
            "type": "integer",
            "maximum": 10,
            "minimum": 1
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A collection of projects for each type of toolset",
              "properties": {
                "commit": {
                  "description": "The commit hash of the analyzed commit",
                  "type": "string"
                },
                "xcode": {
                  "required": [
                    "xcodeSchemeContainers"
                  ],
                  "properties": {
                    "xcodeSchemeContainers": {
                      "description": "The Xcode scheme containers",
                      "type": "array",
                      "items": {
                        "required": [
                          "path",
                          "sharedSchemes"
                        ],
                        "properties": {
                          "path": {
                            "description": "Path to project",
                            "type": "string"
                          },
                          "sharedSchemes": {
                            "description": "Project schemes",
                            "type": "array",
                            "items": {
                              "required": [
                                "name",
                                "hasTestAction"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Scheme name",
                                  "type": "string"
                                },
                                "hasTestAction": {
                                  "description": "Does scheme have a test action?",
                                  "type": "boolean"
                                },
                                "archiveConfiguration": {
                                  "description": "Build configuration set in Archive action",
                                  "type": "string"
                                },
                                "archiveProject": {
                                  "required": [
                                    "archiveTargetId",
                                    "projectName"
                                  ],
                                  "properties": {
                                    "archiveTargetId": {
                                      "description": "The Id of the target to archive",
                                      "type": "string"
                                    },
                                    "projectName": {
                                      "description": "The project to archive container name",
                                      "type": "string"
                                    },
                                    "projectPath": {
                                      "description": "Full path of the target project",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "podfilePath": {
                            "description": "Path to CocoaPods file, if present",
                            "type": "string"
                          },
                          "cartfilePath": {
                            "description": "Path to Carthage file, if present",
                            "type": "string"
                          },
                          "xcodeProjectSha": {
                            "description": "repo object Id of the pbxproject",
                            "type": "string"
                          },
                          "workspaceProjectPaths": {
                            "description": "Related projects paths for xcworkspace",
                            "type": "string"
                          },
                          "appExtensionTargets": {
                            "description": "Information regarding project app extensions, if present",
                            "type": "array",
                            "items": {
                              "description": "App extension information",
                              "required": [
                                "name",
                                "targetBundleIdentifier"
                              ],
                              "properties": {
                                "name": {
                                  "description": "App extension name",
                                  "type": "string"
                                },
                                "targetBundleIdentifier": {
                                  "description": "App extension bundle identifier",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "javascript": {
                  "required": [
                    "packageJsonPaths"
                  ],
                  "properties": {
                    "packageJsonPaths": {
                      "description": "Paths for detected package.json files",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "javascriptSolutions": {
                      "description": "The React Native solutions detected",
                      "type": "array",
                      "items": {
                        "required": [
                          "packageJsonPath"
                        ],
                        "properties": {
                          "packageJsonPath": {
                            "description": "The path to the detected package.json",
                            "type": "string"
                          },
                          "reactNativeVersion": {
                            "description": "Version of React Native from package.json files",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "xamarin": {
                  "required": [
                    "xamarinSolutions"
                  ],
                  "properties": {
                    "xamarinSolutions": {
                      "description": "Xamarin solutions for the toolset",
                      "type": "array",
                      "items": {
                        "required": [
                          "path",
                          "configurations"
                        ],
                        "properties": {
                          "path": {
                            "description": "Path to solution",
                            "type": "string"
                          },
                          "configurations": {
                            "description": "Solution configurations",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "defaultConfiguration": {
                            "description": "Solution default configuration",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "android": {
                  "required": [
                    "androidModules"
                  ],
                  "properties": {
                    "androidModules": {
                      "description": "Android Gradle modules",
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the Android module",
                            "type": "string"
                          },
                          "hasBundle": {
                            "description": "Module contains bundle settings",
                            "type": "boolean"
                          },
                          "productFlavors": {
                            "description": "The product flavors of the Android module",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "buildVariants": {
                            "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "buildTypes": {
                            "description": "The detected build types of the Android module",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "buildConfigurations": {
                            "description": "The detected build configurations of the Android module",
                            "type": "array",
                            "items": {
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of build configuration (the same as a build type name)",
                                  "type": "string"
                                },
                                "signingConfig": {
                                  "description": "Android signing config. Null if not specified",
                                  "properties": {
                                    "hasStoreFile": {
                                      "description": "Indicates if storeFile is specified in the signing configuration",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "isRoot": {
                            "description": "Whether the module is at the root level of the project",
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "gradleWrapperPath": {
                      "description": "The path of the Gradle wrapper",
                      "type": "string"
                    }
                  }
                },
                "buildscripts": {
                  "description": "A collection of detected pre/post buildscripts for current platform toolset",
                  "additionalProperties": {
                    "description": "Abstract platform project",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      }
                    }
                  }
                },
                "uwp": {
                  "required": [
                    "uwpSolutions"
                  ],
                  "properties": {
                    "uwpSolutions": {
                      "description": "The UWP solutions detected",
                      "type": "array",
                      "items": {
                        "required": [
                          "path",
                          "configurations"
                        ],
                        "properties": {
                          "path": {
                            "description": "The path to the UWP solution",
                            "type": "string"
                          },
                          "configurations": {
                            "description": "The possible configurations detected for the UWP solution",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "testcloud": {
                  "required": [
                    "projects"
                  ],
                  "properties": {
                    "projects": {
                      "description": "The TestCloud projects detected",
                      "type": "array",
                      "items": {
                        "required": [
                          "path",
                          "frameworkType"
                        ],
                        "properties": {
                          "path": {
                            "description": "The path to the TestCloud project",
                            "type": "string"
                          },
                          "frameworkType": {
                            "enum": [
                              "Appium",
                              "Calabash",
                              "Espresso",
                              "UITest",
                              "Generated"
                            ],
                            "type": "string"
                          },
                          "frameworkProperties": {
                            "properties": {
                              "configurations": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Gets the branch configuration",
        "operationId": "branchConfigurations_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "description": "The branch build configuration",
                  "properties": {
                    "trigger": {
                      "enum": [
                        "continous",
                        "continuous",
                        "manual"
                      ],
                      "type": "string"
                    },
                    "testsEnabled": {
                      "type": "boolean"
                    },
                    "badgeIsEnabled": {
                      "type": "boolean"
                    },
                    "signed": {
                      "type": "boolean"
                    },
                    "cloneFromBranch": {
                      "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                      "type": "string"
                    },
                    "toolsets": {
                      "description": "The branch build configuration for each toolset",
                      "properties": {
                        "xcode": {
                          "description": "Build configuration when Xcode is part of the build steps",
                          "properties": {
                            "projectOrWorkspacePath": {
                              "description": "Xcode project/workspace path",
                              "type": "string"
                            },
                            "podfilePath": {
                              "description": "Path to CococaPods file, if present",
                              "type": "string"
                            },
                            "cartfilePath": {
                              "description": "Path to Carthage file, if present",
                              "type": "string"
                            },
                            "provisioningProfileEncoded": {
                              "type": "string"
                            },
                            "certificateEncoded": {
                              "type": "string"
                            },
                            "provisioningProfileFileId": {
                              "type": "string"
                            },
                            "certificateFileId": {
                              "type": "string"
                            },
                            "provisioningProfileUploadId": {
                              "type": "string"
                            },
                            "appExtensionProvisioningProfileFiles": {
                              "type": "array",
                              "items": {
                                "description": "Provisioning profile fetch and store information",
                                "properties": {
                                  "fileName": {
                                    "description": "Name of uploaded provisioning profile",
                                    "type": "string"
                                  },
                                  "fileId": {
                                    "description": "File id from secure file storage",
                                    "type": "string"
                                  },
                                  "uploadId": {
                                    "description": "Upload id to App Center File Upload Store",
                                    "type": "string"
                                  },
                                  "targetBundleIdentifier": {
                                    "description": "Target the provisioning profile is used to sign",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "certificateUploadId": {
                              "type": "string"
                            },
                            "certificatePassword": {
                              "type": "string"
                            },
                            "scheme": {
                              "type": "string"
                            },
                            "xcodeVersion": {
                              "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                              "type": "string"
                            },
                            "provisioningProfileFilename": {
                              "type": "string"
                            },
                            "certificateFilename": {
                              "type": "string"
                            },
                            "teamId": {
                              "type": "string"
                            },
                            "automaticSigning": {
                              "type": "boolean"
                            },
                            "xcodeProjectSha": {
                              "description": "The selected pbxproject hash to the repositroy",
                              "type": "string"
                            },
                            "archiveConfiguration": {
                              "description": "The build configuration of the target to archive",
                              "type": "string"
                            },
                            "targetToArchive": {
                              "description": "The target id of the selected scheme to archive",
                              "type": "string"
                            },
                            "forceLegacyBuildSystem": {
                              "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                              "type": "boolean"
                            }
                          }
                        },
                        "javascript": {
                          "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                          "properties": {
                            "packageJsonPath": {
                              "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                              "type": "string"
                            },
                            "runTests": {
                              "description": "Whether to run Jest unit tests, via npm test, during the build",
                              "type": "boolean"
                            },
                            "reactNativeVersion": {
                              "description": "Version of React Native from package.json files",
                              "type": "string"
                            }
                          }
                        },
                        "xamarin": {
                          "description": "Build configuration for Xamarin projects",
                          "properties": {
                            "slnPath": {
                              "type": "string"
                            },
                            "isSimBuild": {
                              "type": "boolean"
                            },
                            "args": {
                              "type": "string"
                            },
                            "configuration": {
                              "type": "string"
                            },
                            "p12File": {
                              "type": "string"
                            },
                            "p12Pwd": {
                              "type": "string"
                            },
                            "provProfile": {
                              "type": "string"
                            },
                            "monoVersion": {
                              "type": "string"
                            },
                            "sdkBundle": {
                              "type": "string"
                            },
                            "symlink": {
                              "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                              "type": "string"
                            }
                          }
                        },
                        "android": {
                          "description": "Build configuration for Android projects",
                          "properties": {
                            "gradleWrapperPath": {
                              "description": "Path to the Gradle wrapper script",
                              "type": "string",
                              "example": "android/gradlew"
                            },
                            "module": {
                              "description": "The Gradle module to build",
                              "type": "string",
                              "example": "app"
                            },
                            "buildVariant": {
                              "description": "The Android build variant to build",
                              "type": "string",
                              "example": "release"
                            },
                            "runTests": {
                              "description": "Whether to run unit tests during the build (default)",
                              "default": true,
                              "type": "boolean"
                            },
                            "runLint": {
                              "description": "Whether to run lint checks during the build (default)",
                              "type": "boolean"
                            },
                            "isRoot": {
                              "description": "Whether it is the root module or not",
                              "type": "boolean"
                            },
                            "automaticSigning": {
                              "description": "Whether to apply automatic signing or not",
                              "type": "boolean"
                            },
                            "keystorePassword": {
                              "description": "The password of the keystore",
                              "type": "string"
                            },
                            "keyAlias": {
                              "description": "The key alias",
                              "type": "string"
                            },
                            "keyPassword": {
                              "description": "The key password",
                              "type": "string"
                            },
                            "keystoreFilename": {
                              "description": "The name of the keystore file",
                              "type": "string"
                            },
                            "keystoreEncoded": {
                              "description": "The keystore encoded value",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "artifactVersioning": {
                      "description": "The versioning configuration for artifacts built for this branch",
                      "properties": {
                        "buildNumberFormat": {
                          "enum": [
                            "buildId",
                            "timestamp"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  },
                  "additionalProperties": {
                    "description": "The branch build core properties",
                    "properties": {
                      "branch": {
                        "required": [
                          "name",
                          "commit"
                        ],
                        "properties": {
                          "name": {
                            "description": "The branch name",
                            "type": "string"
                          },
                          "commit": {
                            "properties": {
                              "sha": {
                                "description": "The commit SHA",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL to the commit",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "enabled": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "build"
        ],
        "description": "Configures the branch for build",
        "operationId": "branchConfigurations_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "params",
            "description": "Parameters of the configuration",
            "required": true,
            "schema": {
              "description": "The branch build configuration",
              "properties": {
                "trigger": {
                  "enum": [
                    "continous",
                    "continuous",
                    "manual"
                  ],
                  "type": "string"
                },
                "testsEnabled": {
                  "type": "boolean"
                },
                "badgeIsEnabled": {
                  "type": "boolean"
                },
                "signed": {
                  "type": "boolean"
                },
                "cloneFromBranch": {
                  "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                  "type": "string"
                },
                "toolsets": {
                  "description": "The branch build configuration for each toolset",
                  "properties": {
                    "xcode": {
                      "description": "Build configuration when Xcode is part of the build steps",
                      "properties": {
                        "projectOrWorkspacePath": {
                          "description": "Xcode project/workspace path",
                          "type": "string"
                        },
                        "podfilePath": {
                          "description": "Path to CococaPods file, if present",
                          "type": "string"
                        },
                        "cartfilePath": {
                          "description": "Path to Carthage file, if present",
                          "type": "string"
                        },
                        "provisioningProfileEncoded": {
                          "type": "string"
                        },
                        "certificateEncoded": {
                          "type": "string"
                        },
                        "provisioningProfileFileId": {
                          "type": "string"
                        },
                        "certificateFileId": {
                          "type": "string"
                        },
                        "provisioningProfileUploadId": {
                          "type": "string"
                        },
                        "appExtensionProvisioningProfileFiles": {
                          "type": "array",
                          "items": {
                            "description": "Provisioning profile fetch and store information",
                            "properties": {
                              "fileName": {
                                "description": "Name of uploaded provisioning profile",
                                "type": "string"
                              },
                              "fileId": {
                                "description": "File id from secure file storage",
                                "type": "string"
                              },
                              "uploadId": {
                                "description": "Upload id to App Center File Upload Store",
                                "type": "string"
                              },
                              "targetBundleIdentifier": {
                                "description": "Target the provisioning profile is used to sign",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "certificateUploadId": {
                          "type": "string"
                        },
                        "certificatePassword": {
                          "type": "string"
                        },
                        "scheme": {
                          "type": "string"
                        },
                        "xcodeVersion": {
                          "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                          "type": "string"
                        },
                        "provisioningProfileFilename": {
                          "type": "string"
                        },
                        "certificateFilename": {
                          "type": "string"
                        },
                        "teamId": {
                          "type": "string"
                        },
                        "automaticSigning": {
                          "type": "boolean"
                        },
                        "xcodeProjectSha": {
                          "description": "The selected pbxproject hash to the repositroy",
                          "type": "string"
                        },
                        "archiveConfiguration": {
                          "description": "The build configuration of the target to archive",
                          "type": "string"
                        },
                        "targetToArchive": {
                          "description": "The target id of the selected scheme to archive",
                          "type": "string"
                        },
                        "forceLegacyBuildSystem": {
                          "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                          "type": "boolean"
                        }
                      }
                    },
                    "javascript": {
                      "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                      "properties": {
                        "packageJsonPath": {
                          "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                          "type": "string"
                        },
                        "runTests": {
                          "description": "Whether to run Jest unit tests, via npm test, during the build",
                          "type": "boolean"
                        },
                        "reactNativeVersion": {
                          "description": "Version of React Native from package.json files",
                          "type": "string"
                        }
                      }
                    },
                    "xamarin": {
                      "description": "Build configuration for Xamarin projects",
                      "properties": {
                        "slnPath": {
                          "type": "string"
                        },
                        "isSimBuild": {
                          "type": "boolean"
                        },
                        "args": {
                          "type": "string"
                        },
                        "configuration": {
                          "type": "string"
                        },
                        "p12File": {
                          "type": "string"
                        },
                        "p12Pwd": {
                          "type": "string"
                        },
                        "provProfile": {
                          "type": "string"
                        },
                        "monoVersion": {
                          "type": "string"
                        },
                        "sdkBundle": {
                          "type": "string"
                        },
                        "symlink": {
                          "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                          "type": "string"
                        }
                      }
                    },
                    "android": {
                      "description": "Build configuration for Android projects",
                      "properties": {
                        "gradleWrapperPath": {
                          "description": "Path to the Gradle wrapper script",
                          "type": "string",
                          "example": "android/gradlew"
                        },
                        "module": {
                          "description": "The Gradle module to build",
                          "type": "string",
                          "example": "app"
                        },
                        "buildVariant": {
                          "description": "The Android build variant to build",
                          "type": "string",
                          "example": "release"
                        },
                        "runTests": {
                          "description": "Whether to run unit tests during the build (default)",
                          "default": true,
                          "type": "boolean"
                        },
                        "runLint": {
                          "description": "Whether to run lint checks during the build (default)",
                          "type": "boolean"
                        },
                        "isRoot": {
                          "description": "Whether it is the root module or not",
                          "type": "boolean"
                        },
                        "automaticSigning": {
                          "description": "Whether to apply automatic signing or not",
                          "type": "boolean"
                        },
                        "keystorePassword": {
                          "description": "The password of the keystore",
                          "type": "string"
                        },
                        "keyAlias": {
                          "description": "The key alias",
                          "type": "string"
                        },
                        "keyPassword": {
                          "description": "The key password",
                          "type": "string"
                        },
                        "keystoreFilename": {
                          "description": "The name of the keystore file",
                          "type": "string"
                        },
                        "keystoreEncoded": {
                          "description": "The keystore encoded value",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "artifactVersioning": {
                  "description": "The versioning configuration for artifacts built for this branch",
                  "properties": {
                    "buildNumberFormat": {
                      "enum": [
                        "buildId",
                        "timestamp"
                      ],
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": {
                "description": "The branch build core properties",
                "properties": {
                  "branch": {
                    "required": [
                      "name",
                      "commit"
                    ],
                    "properties": {
                      "name": {
                        "description": "The branch name",
                        "type": "string"
                      },
                      "commit": {
                        "properties": {
                          "sha": {
                            "description": "The commit SHA",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL to the commit",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "description": "The branch build configuration",
                  "properties": {
                    "trigger": {
                      "enum": [
                        "continous",
                        "continuous",
                        "manual"
                      ],
                      "type": "string"
                    },
                    "testsEnabled": {
                      "type": "boolean"
                    },
                    "badgeIsEnabled": {
                      "type": "boolean"
                    },
                    "signed": {
                      "type": "boolean"
                    },
                    "cloneFromBranch": {
                      "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                      "type": "string"
                    },
                    "toolsets": {
                      "description": "The branch build configuration for each toolset",
                      "properties": {
                        "xcode": {
                          "description": "Build configuration when Xcode is part of the build steps",
                          "properties": {
                            "projectOrWorkspacePath": {
                              "description": "Xcode project/workspace path",
                              "type": "string"
                            },
                            "podfilePath": {
                              "description": "Path to CococaPods file, if present",
                              "type": "string"
                            },
                            "cartfilePath": {
                              "description": "Path to Carthage file, if present",
                              "type": "string"
                            },
                            "provisioningProfileEncoded": {
                              "type": "string"
                            },
                            "certificateEncoded": {
                              "type": "string"
                            },
                            "provisioningProfileFileId": {
                              "type": "string"
                            },
                            "certificateFileId": {
                              "type": "string"
                            },
                            "provisioningProfileUploadId": {
                              "type": "string"
                            },
                            "appExtensionProvisioningProfileFiles": {
                              "type": "array",
                              "items": {
                                "description": "Provisioning profile fetch and store information",
                                "properties": {
                                  "fileName": {
                                    "description": "Name of uploaded provisioning profile",
                                    "type": "string"
                                  },
                                  "fileId": {
                                    "description": "File id from secure file storage",
                                    "type": "string"
                                  },
                                  "uploadId": {
                                    "description": "Upload id to App Center File Upload Store",
                                    "type": "string"
                                  },
                                  "targetBundleIdentifier": {
                                    "description": "Target the provisioning profile is used to sign",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "certificateUploadId": {
                              "type": "string"
                            },
                            "certificatePassword": {
                              "type": "string"
                            },
                            "scheme": {
                              "type": "string"
                            },
                            "xcodeVersion": {
                              "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                              "type": "string"
                            },
                            "provisioningProfileFilename": {
                              "type": "string"
                            },
                            "certificateFilename": {
                              "type": "string"
                            },
                            "teamId": {
                              "type": "string"
                            },
                            "automaticSigning": {
                              "type": "boolean"
                            },
                            "xcodeProjectSha": {
                              "description": "The selected pbxproject hash to the repositroy",
                              "type": "string"
                            },
                            "archiveConfiguration": {
                              "description": "The build configuration of the target to archive",
                              "type": "string"
                            },
                            "targetToArchive": {
                              "description": "The target id of the selected scheme to archive",
                              "type": "string"
                            },
                            "forceLegacyBuildSystem": {
                              "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                              "type": "boolean"
                            }
                          }
                        },
                        "javascript": {
                          "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                          "properties": {
                            "packageJsonPath": {
                              "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                              "type": "string"
                            },
                            "runTests": {
                              "description": "Whether to run Jest unit tests, via npm test, during the build",
                              "type": "boolean"
                            },
                            "reactNativeVersion": {
                              "description": "Version of React Native from package.json files",
                              "type": "string"
                            }
                          }
                        },
                        "xamarin": {
                          "description": "Build configuration for Xamarin projects",
                          "properties": {
                            "slnPath": {
                              "type": "string"
                            },
                            "isSimBuild": {
                              "type": "boolean"
                            },
                            "args": {
                              "type": "string"
                            },
                            "configuration": {
                              "type": "string"
                            },
                            "p12File": {
                              "type": "string"
                            },
                            "p12Pwd": {
                              "type": "string"
                            },
                            "provProfile": {
                              "type": "string"
                            },
                            "monoVersion": {
                              "type": "string"
                            },
                            "sdkBundle": {
                              "type": "string"
                            },
                            "symlink": {
                              "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                              "type": "string"
                            }
                          }
                        },
                        "android": {
                          "description": "Build configuration for Android projects",
                          "properties": {
                            "gradleWrapperPath": {
                              "description": "Path to the Gradle wrapper script",
                              "type": "string",
                              "example": "android/gradlew"
                            },
                            "module": {
                              "description": "The Gradle module to build",
                              "type": "string",
                              "example": "app"
                            },
                            "buildVariant": {
                              "description": "The Android build variant to build",
                              "type": "string",
                              "example": "release"
                            },
                            "runTests": {
                              "description": "Whether to run unit tests during the build (default)",
                              "default": true,
                              "type": "boolean"
                            },
                            "runLint": {
                              "description": "Whether to run lint checks during the build (default)",
                              "type": "boolean"
                            },
                            "isRoot": {
                              "description": "Whether it is the root module or not",
                              "type": "boolean"
                            },
                            "automaticSigning": {
                              "description": "Whether to apply automatic signing or not",
                              "type": "boolean"
                            },
                            "keystorePassword": {
                              "description": "The password of the keystore",
                              "type": "string"
                            },
                            "keyAlias": {
                              "description": "The key alias",
                              "type": "string"
                            },
                            "keyPassword": {
                              "description": "The key password",
                              "type": "string"
                            },
                            "keystoreFilename": {
                              "description": "The name of the keystore file",
                              "type": "string"
                            },
                            "keystoreEncoded": {
                              "description": "The keystore encoded value",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "artifactVersioning": {
                      "description": "The versioning configuration for artifacts built for this branch",
                      "properties": {
                        "buildNumberFormat": {
                          "enum": [
                            "buildId",
                            "timestamp"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  },
                  "additionalProperties": {
                    "description": "The branch build core properties",
                    "properties": {
                      "branch": {
                        "required": [
                          "name",
                          "commit"
                        ],
                        "properties": {
                          "name": {
                            "description": "The branch name",
                            "type": "string"
                          },
                          "commit": {
                            "properties": {
                              "sha": {
                                "description": "The commit SHA",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL to the commit",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "enabled": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      },
      "put": {
        "tags": [
          "build"
        ],
        "description": "Reconfigures the branch for build",
        "operationId": "branchConfigurations_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "params",
            "description": "Parameters of the configuration",
            "required": true,
            "schema": {
              "description": "The branch build configuration",
              "properties": {
                "trigger": {
                  "enum": [
                    "continous",
                    "continuous",
                    "manual"
                  ],
                  "type": "string"
                },
                "testsEnabled": {
                  "type": "boolean"
                },
                "badgeIsEnabled": {
                  "type": "boolean"
                },
                "signed": {
                  "type": "boolean"
                },
                "cloneFromBranch": {
                  "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                  "type": "string"
                },
                "toolsets": {
                  "description": "The branch build configuration for each toolset",
                  "properties": {
                    "xcode": {
                      "description": "Build configuration when Xcode is part of the build steps",
                      "properties": {
                        "projectOrWorkspacePath": {
                          "description": "Xcode project/workspace path",
                          "type": "string"
                        },
                        "podfilePath": {
                          "description": "Path to CococaPods file, if present",
                          "type": "string"
                        },
                        "cartfilePath": {
                          "description": "Path to Carthage file, if present",
                          "type": "string"
                        },
                        "provisioningProfileEncoded": {
                          "type": "string"
                        },
                        "certificateEncoded": {
                          "type": "string"
                        },
                        "provisioningProfileFileId": {
                          "type": "string"
                        },
                        "certificateFileId": {
                          "type": "string"
                        },
                        "provisioningProfileUploadId": {
                          "type": "string"
                        },
                        "appExtensionProvisioningProfileFiles": {
                          "type": "array",
                          "items": {
                            "description": "Provisioning profile fetch and store information",
                            "properties": {
                              "fileName": {
                                "description": "Name of uploaded provisioning profile",
                                "type": "string"
                              },
                              "fileId": {
                                "description": "File id from secure file storage",
                                "type": "string"
                              },
                              "uploadId": {
                                "description": "Upload id to App Center File Upload Store",
                                "type": "string"
                              },
                              "targetBundleIdentifier": {
                                "description": "Target the provisioning profile is used to sign",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "certificateUploadId": {
                          "type": "string"
                        },
                        "certificatePassword": {
                          "type": "string"
                        },
                        "scheme": {
                          "type": "string"
                        },
                        "xcodeVersion": {
                          "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                          "type": "string"
                        },
                        "provisioningProfileFilename": {
                          "type": "string"
                        },
                        "certificateFilename": {
                          "type": "string"
                        },
                        "teamId": {
                          "type": "string"
                        },
                        "automaticSigning": {
                          "type": "boolean"
                        },
                        "xcodeProjectSha": {
                          "description": "The selected pbxproject hash to the repositroy",
                          "type": "string"
                        },
                        "archiveConfiguration": {
                          "description": "The build configuration of the target to archive",
                          "type": "string"
                        },
                        "targetToArchive": {
                          "description": "The target id of the selected scheme to archive",
                          "type": "string"
                        },
                        "forceLegacyBuildSystem": {
                          "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                          "type": "boolean"
                        }
                      }
                    },
                    "javascript": {
                      "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                      "properties": {
                        "packageJsonPath": {
                          "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                          "type": "string"
                        },
                        "runTests": {
                          "description": "Whether to run Jest unit tests, via npm test, during the build",
                          "type": "boolean"
                        },
                        "reactNativeVersion": {
                          "description": "Version of React Native from package.json files",
                          "type": "string"
                        }
                      }
                    },
                    "xamarin": {
                      "description": "Build configuration for Xamarin projects",
                      "properties": {
                        "slnPath": {
                          "type": "string"
                        },
                        "isSimBuild": {
                          "type": "boolean"
                        },
                        "args": {
                          "type": "string"
                        },
                        "configuration": {
                          "type": "string"
                        },
                        "p12File": {
                          "type": "string"
                        },
                        "p12Pwd": {
                          "type": "string"
                        },
                        "provProfile": {
                          "type": "string"
                        },
                        "monoVersion": {
                          "type": "string"
                        },
                        "sdkBundle": {
                          "type": "string"
                        },
                        "symlink": {
                          "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                          "type": "string"
                        }
                      }
                    },
                    "android": {
                      "description": "Build configuration for Android projects",
                      "properties": {
                        "gradleWrapperPath": {
                          "description": "Path to the Gradle wrapper script",
                          "type": "string",
                          "example": "android/gradlew"
                        },
                        "module": {
                          "description": "The Gradle module to build",
                          "type": "string",
                          "example": "app"
                        },
                        "buildVariant": {
                          "description": "The Android build variant to build",
                          "type": "string",
                          "example": "release"
                        },
                        "runTests": {
                          "description": "Whether to run unit tests during the build (default)",
                          "default": true,
                          "type": "boolean"
                        },
                        "runLint": {
                          "description": "Whether to run lint checks during the build (default)",
                          "type": "boolean"
                        },
                        "isRoot": {
                          "description": "Whether it is the root module or not",
                          "type": "boolean"
                        },
                        "automaticSigning": {
                          "description": "Whether to apply automatic signing or not",
                          "type": "boolean"
                        },
                        "keystorePassword": {
                          "description": "The password of the keystore",
                          "type": "string"
                        },
                        "keyAlias": {
                          "description": "The key alias",
                          "type": "string"
                        },
                        "keyPassword": {
                          "description": "The key password",
                          "type": "string"
                        },
                        "keystoreFilename": {
                          "description": "The name of the keystore file",
                          "type": "string"
                        },
                        "keystoreEncoded": {
                          "description": "The keystore encoded value",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "artifactVersioning": {
                  "description": "The versioning configuration for artifacts built for this branch",
                  "properties": {
                    "buildNumberFormat": {
                      "enum": [
                        "buildId",
                        "timestamp"
                      ],
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": {
                "description": "The branch build core properties",
                "properties": {
                  "branch": {
                    "required": [
                      "name",
                      "commit"
                    ],
                    "properties": {
                      "name": {
                        "description": "The branch name",
                        "type": "string"
                      },
                      "commit": {
                        "properties": {
                          "sha": {
                            "description": "The commit SHA",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL to the commit",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "description": "The branch build configuration",
                  "properties": {
                    "trigger": {
                      "enum": [
                        "continous",
                        "continuous",
                        "manual"
                      ],
                      "type": "string"
                    },
                    "testsEnabled": {
                      "type": "boolean"
                    },
                    "badgeIsEnabled": {
                      "type": "boolean"
                    },
                    "signed": {
                      "type": "boolean"
                    },
                    "cloneFromBranch": {
                      "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                      "type": "string"
                    },
                    "toolsets": {
                      "description": "The branch build configuration for each toolset",
                      "properties": {
                        "xcode": {
                          "description": "Build configuration when Xcode is part of the build steps",
                          "properties": {
                            "projectOrWorkspacePath": {
                              "description": "Xcode project/workspace path",
                              "type": "string"
                            },
                            "podfilePath": {
                              "description": "Path to CococaPods file, if present",
                              "type": "string"
                            },
                            "cartfilePath": {
                              "description": "Path to Carthage file, if present",
                              "type": "string"
                            },
                            "provisioningProfileEncoded": {
                              "type": "string"
                            },
                            "certificateEncoded": {
                              "type": "string"
                            },
                            "provisioningProfileFileId": {
                              "type": "string"
                            },
                            "certificateFileId": {
                              "type": "string"
                            },
                            "provisioningProfileUploadId": {
                              "type": "string"
                            },
                            "appExtensionProvisioningProfileFiles": {
                              "type": "array",
                              "items": {
                                "description": "Provisioning profile fetch and store information",
                                "properties": {
                                  "fileName": {
                                    "description": "Name of uploaded provisioning profile",
                                    "type": "string"
                                  },
                                  "fileId": {
                                    "description": "File id from secure file storage",
                                    "type": "string"
                                  },
                                  "uploadId": {
                                    "description": "Upload id to App Center File Upload Store",
                                    "type": "string"
                                  },
                                  "targetBundleIdentifier": {
                                    "description": "Target the provisioning profile is used to sign",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "certificateUploadId": {
                              "type": "string"
                            },
                            "certificatePassword": {
                              "type": "string"
                            },
                            "scheme": {
                              "type": "string"
                            },
                            "xcodeVersion": {
                              "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                              "type": "string"
                            },
                            "provisioningProfileFilename": {
                              "type": "string"
                            },
                            "certificateFilename": {
                              "type": "string"
                            },
                            "teamId": {
                              "type": "string"
                            },
                            "automaticSigning": {
                              "type": "boolean"
                            },
                            "xcodeProjectSha": {
                              "description": "The selected pbxproject hash to the repositroy",
                              "type": "string"
                            },
                            "archiveConfiguration": {
                              "description": "The build configuration of the target to archive",
                              "type": "string"
                            },
                            "targetToArchive": {
                              "description": "The target id of the selected scheme to archive",
                              "type": "string"
                            },
                            "forceLegacyBuildSystem": {
                              "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                              "type": "boolean"
                            }
                          }
                        },
                        "javascript": {
                          "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                          "properties": {
                            "packageJsonPath": {
                              "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                              "type": "string"
                            },
                            "runTests": {
                              "description": "Whether to run Jest unit tests, via npm test, during the build",
                              "type": "boolean"
                            },
                            "reactNativeVersion": {
                              "description": "Version of React Native from package.json files",
                              "type": "string"
                            }
                          }
                        },
                        "xamarin": {
                          "description": "Build configuration for Xamarin projects",
                          "properties": {
                            "slnPath": {
                              "type": "string"
                            },
                            "isSimBuild": {
                              "type": "boolean"
                            },
                            "args": {
                              "type": "string"
                            },
                            "configuration": {
                              "type": "string"
                            },
                            "p12File": {
                              "type": "string"
                            },
                            "p12Pwd": {
                              "type": "string"
                            },
                            "provProfile": {
                              "type": "string"
                            },
                            "monoVersion": {
                              "type": "string"
                            },
                            "sdkBundle": {
                              "type": "string"
                            },
                            "symlink": {
                              "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                              "type": "string"
                            }
                          }
                        },
                        "android": {
                          "description": "Build configuration for Android projects",
                          "properties": {
                            "gradleWrapperPath": {
                              "description": "Path to the Gradle wrapper script",
                              "type": "string",
                              "example": "android/gradlew"
                            },
                            "module": {
                              "description": "The Gradle module to build",
                              "type": "string",
                              "example": "app"
                            },
                            "buildVariant": {
                              "description": "The Android build variant to build",
                              "type": "string",
                              "example": "release"
                            },
                            "runTests": {
                              "description": "Whether to run unit tests during the build (default)",
                              "default": true,
                              "type": "boolean"
                            },
                            "runLint": {
                              "description": "Whether to run lint checks during the build (default)",
                              "type": "boolean"
                            },
                            "isRoot": {
                              "description": "Whether it is the root module or not",
                              "type": "boolean"
                            },
                            "automaticSigning": {
                              "description": "Whether to apply automatic signing or not",
                              "type": "boolean"
                            },
                            "keystorePassword": {
                              "description": "The password of the keystore",
                              "type": "string"
                            },
                            "keyAlias": {
                              "description": "The key alias",
                              "type": "string"
                            },
                            "keyPassword": {
                              "description": "The key password",
                              "type": "string"
                            },
                            "keystoreFilename": {
                              "description": "The name of the keystore file",
                              "type": "string"
                            },
                            "keystoreEncoded": {
                              "description": "The keystore encoded value",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "artifactVersioning": {
                      "description": "The versioning configuration for artifacts built for this branch",
                      "properties": {
                        "buildNumberFormat": {
                          "enum": [
                            "buildId",
                            "timestamp"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  },
                  "additionalProperties": {
                    "description": "The branch build core properties",
                    "properties": {
                      "branch": {
                        "required": [
                          "name",
                          "commit"
                        ],
                        "properties": {
                          "name": {
                            "description": "The branch name",
                            "type": "string"
                          },
                          "commit": {
                            "properties": {
                              "sha": {
                                "description": "The commit SHA",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL to the commit",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "enabled": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      },
      "delete": {
        "tags": [
          "build"
        ],
        "description": "Deletes the branch build configuration",
        "operationId": "branchConfigurations_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns the list of builds for the branch",
        "operationId": "builds_listByBranch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A list of builds",
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "buildNumber",
                  "queueTime",
                  "status",
                  "result",
                  "sourceBranch",
                  "sourceVersion"
                ],
                "properties": {
                  "id": {
                    "description": "The build ID",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "type": "integer"
                  },
                  "buildNumber": {
                    "description": "The build number",
                    "type": "string"
                  },
                  "queueTime": {
                    "format": "dateTime",
                    "description": "The time the build was queued",
                    "type": "string"
                  },
                  "startTime": {
                    "format": "dateTime",
                    "description": "The time the build was started",
                    "type": "string"
                  },
                  "finishTime": {
                    "format": "dateTime",
                    "description": "The time the build was finished",
                    "type": "string"
                  },
                  "lastChangedDate": {
                    "format": "dateTime",
                    "description": "The time the build status was last changed",
                    "type": "string"
                  },
                  "status": {
                    "description": "The build status",
                    "type": "string"
                  },
                  "result": {
                    "description": "The build result",
                    "type": "string"
                  },
                  "sourceBranch": {
                    "description": "The source branch name",
                    "type": "string"
                  },
                  "sourceVersion": {
                    "description": "The source SHA",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "build"
        ],
        "description": "Create a build",
        "operationId": "builds_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch",
            "description": "The branch name",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "params",
            "description": "Parameters of the build",
            "schema": {
              "type": "object",
              "properties": {
                "sourceVersion": {
                  "description": "Version to build which represents the full Git commit reference",
                  "type": "string"
                },
                "debug": {
                  "description": "Run build in debug mode",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created build(s)",
            "schema": {
              "required": [
                "id",
                "buildNumber",
                "queueTime",
                "status",
                "result",
                "sourceBranch",
                "sourceVersion"
              ],
              "properties": {
                "id": {
                  "description": "The build ID",
                  "minimum": 0,
                  "exclusiveMinimum": true,
                  "type": "integer"
                },
                "buildNumber": {
                  "description": "The build number",
                  "type": "string"
                },
                "queueTime": {
                  "format": "dateTime",
                  "description": "The time the build was queued",
                  "type": "string"
                },
                "startTime": {
                  "format": "dateTime",
                  "description": "The time the build was started",
                  "type": "string"
                },
                "finishTime": {
                  "format": "dateTime",
                  "description": "The time the build was finished",
                  "type": "string"
                },
                "lastChangedDate": {
                  "format": "dateTime",
                  "description": "The time the build status was last changed",
                  "type": "string"
                },
                "status": {
                  "description": "The build status",
                  "type": "string"
                },
                "result": {
                  "description": "The build result",
                  "type": "string"
                },
                "sourceBranch": {
                  "description": "The source branch name",
                  "type": "string"
                },
                "sourceVersion": {
                  "description": "The source SHA",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches": {
      "get": {
        "tags": [
          "build"
        ],
        "description": "Returns the list of Git branches for this application",
        "operationId": "builds_listBranches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "A collection of branch status",
              "type": "array",
              "items": {
                "description": "The branch build status",
                "required": [
                  "configured"
                ],
                "properties": {
                  "configured": {
                    "type": "boolean"
                  },
                  "lastBuild": {
                    "required": [
                      "id",
                      "buildNumber",
                      "queueTime",
                      "status",
                      "result",
                      "sourceBranch",
                      "sourceVersion"
                    ],
                    "properties": {
                      "id": {
                        "description": "The build ID",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "type": "integer"
                      },
                      "buildNumber": {
                        "description": "The build number",
                        "type": "string"
                      },
                      "queueTime": {
                        "format": "dateTime",
                        "description": "The time the build was queued",
                        "type": "string"
                      },
                      "startTime": {
                        "format": "dateTime",
                        "description": "The time the build was started",
                        "type": "string"
                      },
                      "finishTime": {
                        "format": "dateTime",
                        "description": "The time the build was finished",
                        "type": "string"
                      },
                      "lastChangedDate": {
                        "format": "dateTime",
                        "description": "The time the build status was last changed",
                        "type": "string"
                      },
                      "status": {
                        "description": "The build status",
                        "type": "string"
                      },
                      "result": {
                        "description": "The build result",
                        "type": "string"
                      },
                      "sourceBranch": {
                        "description": "The source branch name",
                        "type": "string"
                      },
                      "sourceVersion": {
                        "description": "The source SHA",
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": {
                  "description": "The branch build core properties",
                  "properties": {
                    "branch": {
                      "required": [
                        "name",
                        "commit"
                      ],
                      "properties": {
                        "name": {
                          "description": "The branch name",
                          "type": "string"
                        },
                        "commit": {
                          "properties": {
                            "sha": {
                              "description": "The commit SHA",
                              "type": "string"
                            },
                            "url": {
                              "description": "The URL to the commit",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "required": [
                "id",
                "code",
                "message"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/billing/aggregated": {
      "get": {
        "tags": [
          "billing"
        ],
        "description": "Aggregated Billing Information for owner of a given app.",
        "operationId": "billingAggregatedInformation_getByApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "service",
            "description": "Type of service that should be included in the Billing Information",
            "type": "string",
            "enum": [
              "Test",
              "Build"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "period",
            "description": "Type of period that should be included in the Billing Information",
            "type": "string",
            "enum": [
              "Previous",
              "Current",
              "Next"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "showOriginalPlans",
            "description": "Controls whether the API should show the original plan when Azure Subscription is not enabled",
            "type": "boolean",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated Billing Information for owner of a given app",
            "schema": {
              "description": "Aggregated Billing Information for a user or an organization",
              "type": "object",
              "properties": {
                "version": {
                  "description": "Version of the Billing Information schema",
                  "type": "string"
                },
                "timestamp": {
                  "format": "dateTime",
                  "description": "The ISO 8601 datetime of last modification",
                  "type": "string"
                },
                "id": {
                  "description": "ID of the user or organization",
                  "type": "string"
                },
                "billingPlans": {
                  "description": "Billing Plans section in the Billing Information",
                  "type": "object",
                  "properties": {
                    "buildService": {
                      "description": "Billing Plans for a single service",
                      "type": "object",
                      "properties": {
                        "canSelectTrialPlan": {
                          "description": "Can customer select trial plan for that service (if it exists)?",
                          "type": "boolean"
                        },
                        "lastTrialPlanExpirationTime": {
                          "format": "dateTime",
                          "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                          "type": "string"
                        },
                        "currentBillingPeriod": {
                          "description": "Billing plans for a given period",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start of the period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end of the period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "Selection of a billing plan",
                              "properties": {
                                "count": {
                                  "description": "Number of instances of the billing plan.",
                                  "type": "integer"
                                },
                                "plan": {
                                  "description": "Billing Plan",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The Billing Plan ID",
                                      "type": "string"
                                    },
                                    "version": {
                                      "description": "Version of the Billing Plan schema",
                                      "type": "string"
                                    },
                                    "price": {
                                      "description": "Price of the Billing Plan",
                                      "type": "number"
                                    },
                                    "paymentSource": {
                                      "description": "Service that receives payments for this billing plan.",
                                      "enum": [
                                        "None",
                                        "AppCenter",
                                        "GitHub",
                                        "Xtc"
                                      ],
                                      "type": "string"
                                    },
                                    "service": {
                                      "description": "Name of the service that the plan applies to.",
                                      "enum": [
                                        "Build",
                                        "Test"
                                      ],
                                      "type": "string"
                                    },
                                    "limits": {
                                      "description": "A collection of named numeric values",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "number"
                                      }
                                    },
                                    "attributes": {
                                      "description": "Collection of attribute values.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "object"
                                      }
                                    },
                                    "parentId": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "testService": {
                      "description": "Billing Plans for a single service",
                      "type": "object",
                      "properties": {
                        "canSelectTrialPlan": {
                          "description": "Can customer select trial plan for that service (if it exists)?",
                          "type": "boolean"
                        },
                        "lastTrialPlanExpirationTime": {
                          "format": "dateTime",
                          "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                          "type": "string"
                        },
                        "currentBillingPeriod": {
                          "description": "Billing plans for a given period",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start of the period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end of the period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "Selection of a billing plan",
                              "properties": {
                                "count": {
                                  "description": "Number of instances of the billing plan.",
                                  "type": "integer"
                                },
                                "plan": {
                                  "description": "Billing Plan",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The Billing Plan ID",
                                      "type": "string"
                                    },
                                    "version": {
                                      "description": "Version of the Billing Plan schema",
                                      "type": "string"
                                    },
                                    "price": {
                                      "description": "Price of the Billing Plan",
                                      "type": "number"
                                    },
                                    "paymentSource": {
                                      "description": "Service that receives payments for this billing plan.",
                                      "enum": [
                                        "None",
                                        "AppCenter",
                                        "GitHub",
                                        "Xtc"
                                      ],
                                      "type": "string"
                                    },
                                    "service": {
                                      "description": "Name of the service that the plan applies to.",
                                      "enum": [
                                        "Build",
                                        "Test"
                                      ],
                                      "type": "string"
                                    },
                                    "limits": {
                                      "description": "A collection of named numeric values",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "number"
                                      }
                                    },
                                    "attributes": {
                                      "description": "Collection of attribute values.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "object"
                                      }
                                    },
                                    "parentId": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "usage": {
                  "description": "Usage section in the Billing Information",
                  "type": "object",
                  "properties": {
                    "buildService": {
                      "description": "Resource usage for a single Mobile Center service",
                      "type": "object",
                      "properties": {
                        "currentUsagePeriod": {
                          "description": "Usage for a single period",
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start time of the usage period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end time of the usage period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "A collection of named numeric values",
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "byApp": {
                              "description": "A collection of  named numeric values grouped by app",
                              "type": "object",
                              "additionalProperties": {
                                "description": "A collection of named numeric values",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "testService": {
                      "description": "Resource usage for a single Mobile Center service",
                      "type": "object",
                      "properties": {
                        "currentUsagePeriod": {
                          "description": "Usage for a single period",
                          "type": "object",
                          "properties": {
                            "startTime": {
                              "format": "dateTime",
                              "description": "Inclusive start time of the usage period",
                              "type": "string"
                            },
                            "endTime": {
                              "format": "dateTime",
                              "description": "Exclusive end time of the usage period.",
                              "type": "string"
                            },
                            "byAccount": {
                              "description": "A collection of named numeric values",
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "byApp": {
                              "description": "A collection of  named numeric values grouped by app",
                              "type": "object",
                              "additionalProperties": {
                                "description": "A collection of named numeric values",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "azureSubscriptionId": {
                  "description": "Unique identifier for the Azure subscription used for billing",
                  "type": "string"
                },
                "azureSubscriptionState": {
                  "description": "State of the Azure subscription used for billing",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "NotSet"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}": {
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Delete the azure subscriptions for the app",
        "operationId": "azureSubscription_deleteForApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "azure_subscription_id",
            "description": "The unique ID (UUID) of the azure subscription",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of azure subscriptions for the app",
        "operationId": "azureSubscription_listForApp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "subscription_id",
                  "tenant_id",
                  "subscription_name"
                ],
                "properties": {
                  "subscription_id": {
                    "format": "uuid",
                    "description": "The azure subscription id",
                    "type": "string"
                  },
                  "tenant_id": {
                    "format": "uuid",
                    "description": "The tenant id of the azure subscription belongs to",
                    "type": "string"
                  },
                  "subscription_name": {
                    "description": "The name of the azure subscription",
                    "type": "string"
                  },
                  "is_billing": {
                    "description": "If the subscription is used for billing",
                    "type": "boolean"
                  },
                  "is_billable": {
                    "description": "If the subscription can be used for billing",
                    "type": "boolean"
                  },
                  "is_microsoft_internal": {
                    "description": "If the subscription is internal Microsoft subscription",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Link azure subscription to an app",
        "operationId": "azureSubscription_linkForApp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "azure_subscription_to_app_data",
            "description": "The azure subscription data needed to be link to the app.",
            "required": true,
            "schema": {
              "required": [
                "subscription_id"
              ],
              "properties": {
                "subscription_id": {
                  "format": "uuid",
                  "description": "The azure subscription id",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ],
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/avatar": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Sets the app avatar",
        "operationId": "apps_updateAvatar",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "formData",
            "name": "avatar",
            "description": "The image for an app avatar to upload.",
            "type": "file",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Deletes the uploaded app avatar",
        "operationId": "apps_deleteAvatar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/auth/users": {
      "get": {
        "tags": [
          "mbaas"
        ],
        "summary": "Returns users of a tenant.\nReturns all users if no searchTerm param is specified.",
        "operationId": "identity_getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "AC-Authorization-AAD-Graph",
            "description": "MSGraph Auth Token",
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchTerm",
            "description": "User search term",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Fetch all apple test flight groups",
        "operationId": "appleMapping_TestFlightGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "description": "Apple Test Flight Groups Response Type",
                "properties": {
                  "id": {
                    "description": "id of the group.",
                    "type": "string"
                  },
                  "providerId": {
                    "description": "provider id of the group.",
                    "type": "number"
                  },
                  "appleId": {
                    "description": "apple id of the group.",
                    "type": "number"
                  },
                  "name": {
                    "description": "name of the group.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/apple_mapping": {
      "get": {
        "tags": [
          "distribute"
        ],
        "description": "Get mapping of apple app to an existing app in apple store.",
        "operationId": "appleMapping_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Apple Mapping Request Type",
              "properties": {
                "app_id": {
                  "description": "ID of the apple application in Mobile Center",
                  "type": "string"
                },
                "service_connection_id": {
                  "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                  "type": "string"
                },
                "apple_id": {
                  "description": "ID of the apple application in apple store",
                  "type": "string"
                },
                "team_identifier": {
                  "description": "ID of the Team associated with the app in apple store",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "distribute"
        ],
        "description": "Delete mapping of apple app to an existing app in apple store.",
        "operationId": "appleMapping_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "distribute"
        ],
        "description": "Create a mapping for an existing app in apple store for the specified application.",
        "operationId": "appleMapping_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The apple app mapping object",
            "required": true,
            "schema": {
              "description": "Apple Mapping Request Type",
              "required": [
                "service_connection_id",
                "team_identifier"
              ],
              "properties": {
                "service_connection_id": {
                  "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                  "type": "string"
                },
                "apple_id": {
                  "description": "ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided",
                  "type": "string"
                },
                "bundle_identifier": {
                  "description": "Bundle Identifier of the apple package",
                  "type": "string"
                },
                "team_identifier": {
                  "description": "ID of the Team associated with the app in apple store",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "description": "Apple Mapping Request Type",
              "properties": {
                "app_id": {
                  "description": "ID of the apple application in Mobile Center",
                  "type": "string"
                },
                "service_connection_id": {
                  "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                  "type": "string"
                },
                "apple_id": {
                  "description": "ID of the apple application in apple store",
                  "type": "string"
                },
                "team_identifier": {
                  "description": "ID of the Team associated with the app in apple store",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "BadRequest",
                    "Conflict",
                    "NotAcceptable",
                    "NotFound",
                    "InternalServerError",
                    "Unauthorized",
                    "TooManyRequests"
                  ],
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}": {
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Delete the App Api Token object with the specific ID",
        "operationId": "appApiTokens_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "api_token_id",
            "description": "The unique ID (UUID) of the api token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/api_tokens": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns App API tokens for the app",
        "operationId": "appApiTokens_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "created_at"
                ],
                "properties": {
                  "id": {
                    "description": "The unique id (UUID) of the api token",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the token",
                    "type": "string"
                  },
                  "scope": {
                    "description": "The scope for this token.",
                    "type": "array",
                    "items": {
                      "enum": [
                        "all",
                        "viewer"
                      ],
                      "type": "string"
                    }
                  },
                  "created_at": {
                    "description": "The creation time",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a new App API token",
        "operationId": "appApiTokens_new",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "description",
            "description": "Description of the token",
            "schema": {
              "properties": {
                "description": {
                  "description": "The description of the token",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope for this token.",
                  "type": "array",
                  "items": {
                    "enum": [
                      "all",
                      "viewer"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "created_at",
                "api_token"
              ],
              "properties": {
                "id": {
                  "description": "The unique id (UUID) of the api token",
                  "type": "string"
                },
                "api_token": {
                  "description": "The api token generated will not be accessible again",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the token",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope for this token.",
                  "type": "array",
                  "items": {
                    "enum": [
                      "all",
                      "viewer"
                    ],
                    "type": "string"
                  }
                },
                "created_at": {
                  "description": "The creation time",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/versions": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of active versions in the time range ordered by version.",
        "operationId": "Analytics_Versions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of active versions in the time range ordered by version.",
            "schema": {
              "properties": {
                "versions": {
                  "description": "List of version count.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "version": {
                        "description": "Version.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Version count.",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "The count of previous time range of the version.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "total": {
                  "format": "int64",
                  "description": "The total count of versions.",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of sessions per device in the time range.",
        "operationId": "Analytics_PerDeviceCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "interval",
            "description": "Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D).",
            "required": true,
            "type": "string",
            "format": "Timespan",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of sessions per device in the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "average_sessions_per_user": {
                  "format": "double",
                  "description": "Average seesion per user.",
                  "type": "number"
                },
                "previous_average_sessions_per_user": {
                  "format": "double",
                  "description": "Previous average session per user.",
                  "type": "number"
                },
                "total_count": {
                  "format": "int64",
                  "description": "Total session per device count.",
                  "type": "integer"
                },
                "previous_total_count": {
                  "format": "int64",
                  "description": "Previous total count.",
                  "type": "integer"
                },
                "sessions_per_user": {
                  "description": "The session count for each interval per device.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "double",
                        "description": "Count.",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Gets session duration.",
        "operationId": "Analytics_SessionDurationsDistribution",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of  session durations for requested time range.",
            "schema": {
              "type": "object",
              "properties": {
                "distribution": {
                  "description": "The count of sessions in these buckets.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bucket": {
                        "description": "The bucket name.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "The count of sessions in current bucket.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "previous_average_duration": {
                  "description": "The previous average session duration for previous time range.",
                  "type": "string"
                },
                "average_duration": {
                  "description": "The average session duration for current time range.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of sessions in the time range.",
        "operationId": "Analytics_SessionCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "interval",
            "description": "Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D).",
            "required": true,
            "type": "string",
            "format": "Timespan",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of sessions in the time range.",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "datetime": {
                    "description": "The ISO 8601 datetime.",
                    "type": "string"
                  },
                  "count": {
                    "format": "int64",
                    "description": "Count of the object.",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/places": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Places in the time range.",
        "operationId": "Analytics_PlaceCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Places with count during the time range in descending order.",
            "schema": {
              "description": "Places and count during the time range in descending order.",
              "properties": {
                "total": {
                  "format": "int64",
                  "type": "integer"
                },
                "places": {
                  "type": "array",
                  "items": {
                    "description": "The place code and the count.",
                    "type": "object",
                    "properties": {
                      "code": {
                        "description": "The place code.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "The count of the this place.",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "The count of previous time range of the place.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/oses": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "OSes in the time range.",
        "operationId": "Analytics_OperatingSystemCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OSes with count during the time range in descending order.",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "format": "int64",
                  "type": "integer"
                },
                "oses": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "os_name": {
                        "description": "OS name.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count current of OS.",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "Count of previous OS.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/models": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Models in the time range.",
        "operationId": "Analytics_ModelCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Models with count during the time range in descending order.",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "format": "int64",
                  "type": "integer"
                },
                "models": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "model_name": {
                        "description": "Model's name.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count current of model.",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "Count of previous model.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.",
        "operationId": "Analytics_LogFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of logs for the requested time range.",
            "schema": {
              "required": [
                "logs"
              ],
              "type": "object",
              "properties": {
                "exceeded_max_limit": {
                  "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                  "type": "boolean"
                },
                "last_received_log_timestamp": {
                  "format": "date-time",
                  "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                  "type": "string"
                },
                "logs": {
                  "description": "the list of logs",
                  "minItems": 0,
                  "type": "array",
                  "items": {
                    "required": [
                      "type",
                      "timestamp",
                      "install_id",
                      "device"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Log type.\n",
                        "enum": [
                          "event",
                          "page",
                          "start_session",
                          "error",
                          "push_installation",
                          "start_service",
                          "custom_properties"
                        ],
                        "type": "string"
                      },
                      "timestamp": {
                        "format": "date-time",
                        "description": "Log creation timestamp.\n",
                        "type": "string"
                      },
                      "install_id": {
                        "format": "uuid",
                        "description": "Install ID.\n",
                        "type": "string"
                      },
                      "device": {
                        "description": "Device characteristics.",
                        "required": [
                          "sdk_name",
                          "sdk_version",
                          "os_name",
                          "os_version",
                          "locale",
                          "time_zone_offset",
                          "app_version",
                          "app_build"
                        ],
                        "type": "object",
                        "properties": {
                          "sdk_name": {
                            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                            "type": "string"
                          },
                          "sdk_version": {
                            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                            "type": "string"
                          },
                          "wrapper_sdk_version": {
                            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                            "type": "string"
                          },
                          "wrapper_sdk_name": {
                            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                            "type": "string"
                          },
                          "model": {
                            "description": "Device model (example: iPad2,3).\n",
                            "type": "string"
                          },
                          "oem_name": {
                            "description": "Device manufacturer (example: HTC).\n",
                            "type": "string"
                          },
                          "os_name": {
                            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                            "type": "string"
                          },
                          "os_version": {
                            "description": "OS version (example: 9.3.0).\n",
                            "type": "string"
                          },
                          "os_build": {
                            "description": "OS build code (example: LMY47X).\n",
                            "type": "string"
                          },
                          "os_api_level": {
                            "description": "API level when applicable like in Android (example: 15).\n",
                            "type": "integer"
                          },
                          "locale": {
                            "description": "Language code (example: en_US).\n",
                            "type": "string"
                          },
                          "time_zone_offset": {
                            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                            "maximum": 840,
                            "minimum": -840,
                            "type": "integer"
                          },
                          "screen_size": {
                            "description": "Screen size of the device in pixels (example: 640x480).\n",
                            "type": "string"
                          },
                          "app_version": {
                            "description": "Application version name, e.g. 1.1.0\n",
                            "type": "string"
                          },
                          "carrier_name": {
                            "description": "Carrier name (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_code": {
                            "description": "Carrier country code (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_country": {
                            "description": "Carrier country.\n",
                            "type": "string"
                          },
                          "app_build": {
                            "description": "The app's build number, e.g. 42.\n",
                            "type": "string"
                          },
                          "app_namespace": {
                            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                            "type": "string"
                          },
                          "live_update_release_label": {
                            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                            "type": "string"
                          },
                          "live_update_deployment_key": {
                            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                            "type": "string"
                          },
                          "live_update_package_hash": {
                            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                            "type": "string"
                          },
                          "wrapper_runtime_version": {
                            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "discriminator": "type"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/languages": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Languages in the time range.",
        "operationId": "Analytics_LanguageCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Languages with count during the time range in descending order.",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "format": "int64",
                  "type": "integer"
                },
                "languages": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "language_name": {
                        "description": "Language's name.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count current of language.",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "Count of previous lanugage.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.",
        "operationId": "Analytics_GenericLogFlow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of logs for the requested time range.",
            "schema": {
              "required": [
                "logs"
              ],
              "type": "object",
              "properties": {
                "exceeded_max_limit": {
                  "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                  "type": "boolean"
                },
                "last_received_log_timestamp": {
                  "format": "date-time",
                  "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                  "type": "string"
                },
                "logs": {
                  "description": "the list of logs",
                  "minItems": 0,
                  "type": "array",
                  "items": {
                    "description": "Generic log.",
                    "required": [
                      "type",
                      "timestamp",
                      "install_id",
                      "device"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Log type.\n",
                        "enum": [
                          "event",
                          "page",
                          "start_session",
                          "error",
                          "push_installation",
                          "start_service",
                          "custom_properties"
                        ],
                        "type": "string"
                      },
                      "timestamp": {
                        "format": "date-time",
                        "description": "Log creation timestamp.\n",
                        "type": "string"
                      },
                      "install_id": {
                        "format": "uuid",
                        "description": "Install ID.\n",
                        "type": "string"
                      },
                      "session_id": {
                        "format": "uuid",
                        "description": "Session ID.\n",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Event ID.\n",
                        "type": "string"
                      },
                      "event_name": {
                        "description": "Event name.\n",
                        "type": "string"
                      },
                      "message_id": {
                        "description": "Message ID.\n",
                        "type": "string"
                      },
                      "properties": {
                        "description": "event specific properties.\n",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "device": {
                        "description": "Device characteristics.",
                        "required": [
                          "sdk_name",
                          "sdk_version",
                          "os_name",
                          "os_version",
                          "locale",
                          "time_zone_offset",
                          "app_version",
                          "app_build"
                        ],
                        "type": "object",
                        "properties": {
                          "sdk_name": {
                            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                            "type": "string"
                          },
                          "sdk_version": {
                            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                            "type": "string"
                          },
                          "wrapper_sdk_version": {
                            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                            "type": "string"
                          },
                          "wrapper_sdk_name": {
                            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                            "type": "string"
                          },
                          "model": {
                            "description": "Device model (example: iPad2,3).\n",
                            "type": "string"
                          },
                          "oem_name": {
                            "description": "Device manufacturer (example: HTC).\n",
                            "type": "string"
                          },
                          "os_name": {
                            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                            "type": "string"
                          },
                          "os_version": {
                            "description": "OS version (example: 9.3.0).\n",
                            "type": "string"
                          },
                          "os_build": {
                            "description": "OS build code (example: LMY47X).\n",
                            "type": "string"
                          },
                          "os_api_level": {
                            "description": "API level when applicable like in Android (example: 15).\n",
                            "type": "integer"
                          },
                          "locale": {
                            "description": "Language code (example: en_US).\n",
                            "type": "string"
                          },
                          "time_zone_offset": {
                            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                            "maximum": 840,
                            "minimum": -840,
                            "type": "integer"
                          },
                          "screen_size": {
                            "description": "Screen size of the device in pixels (example: 640x480).\n",
                            "type": "string"
                          },
                          "app_version": {
                            "description": "Application version name, e.g. 1.1.0\n",
                            "type": "string"
                          },
                          "carrier_name": {
                            "description": "Carrier name (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_code": {
                            "description": "Carrier country code (for mobile devices).\n",
                            "type": "string"
                          },
                          "carrier_country": {
                            "description": "Carrier country.\n",
                            "type": "string"
                          },
                          "app_build": {
                            "description": "The app's build number, e.g. 42.\n",
                            "type": "string"
                          },
                          "app_namespace": {
                            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                            "type": "string"
                          },
                          "live_update_release_label": {
                            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                            "type": "string"
                          },
                          "live_update_deployment_key": {
                            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                            "type": "string"
                          },
                          "live_update_package_hash": {
                            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                            "type": "string"
                          },
                          "wrapper_runtime_version": {
                            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                            "type": "string"
                          }
                        }
                      },
                      "auth_provider": {
                        "description": "Auth service provider.\n",
                        "type": "string"
                      },
                      "account_id": {
                        "description": "Account ID of the authenticated user.\n",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Event properties value counts during the time range in descending order.",
        "operationId": "Analytics_EventPropertyCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "event_property_name",
            "description": "The id of the event property.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of property values to return. Set to 0 in order to fetch all results available.",
            "type": "integer",
            "format": "int64",
            "default": 10,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Event properties value counts during the time range in descending order.",
            "schema": {
              "description": "Event property value counts during the time range in descending order.",
              "type": "object",
              "properties": {
                "total": {
                  "format": "int64",
                  "description": "The total property value counts.",
                  "type": "integer"
                },
                "values": {
                  "description": "The event property values.",
                  "type": "array",
                  "items": {
                    "description": "An event property value with counts.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The event property value name.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "The count of the the event property value.",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "The count of previous time range of the event property value.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Event properties.",
        "operationId": "Analytics_EventProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Event properties.",
            "schema": {
              "description": "Event properties during the time range.",
              "type": "object",
              "properties": {
                "event_properties": {
                  "type": "array",
                  "items": {
                    "format": "string",
                    "description": "The event property.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of events by interval in the time range.",
        "operationId": "Analytics_EventCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of events by interval in the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "total_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "previous_total_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "count": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of devices for an event by interval in the time range.",
        "operationId": "Analytics_EventDeviceCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of devices for an event by interval in the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "total_devices": {
                  "format": "int64",
                  "type": "integer"
                },
                "total_devices_with_event": {
                  "format": "int64",
                  "type": "integer"
                },
                "previous_total_devices_with_event": {
                  "format": "int64",
                  "type": "integer"
                },
                "devices_count": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of events per session by interval in the time range.",
        "operationId": "Analytics_EventPerSessionCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of events per session by interval in the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "avg_count_per_session": {
                  "format": "double",
                  "type": "number"
                },
                "previous_avg_count_per_session": {
                  "format": "double",
                  "type": "number"
                },
                "count_per_session": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "double",
                        "description": "Decimal count of the object.",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of events per device by interval in the time range.",
        "operationId": "Analytics_EventPerDeviceCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of events per device by interval in the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "avg_count_per_device": {
                  "format": "double",
                  "type": "number"
                },
                "previous_avg_count_per_device": {
                  "format": "double",
                  "type": "number"
                },
                "count_per_device": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "double",
                        "description": "Decimal count of the object.",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}": {
      "delete": {
        "tags": [
          "analytics"
        ],
        "description": "Delete the set of Events with the specified event names.",
        "operationId": "Analytics_EventsDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Event successfully deleted."
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of active events in the time range ordered by event.",
        "operationId": "Analytics_Events",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "event_name",
            "description": "To select the specific events.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "type": "integer",
            "format": "int64",
            "default": 0,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$inlinecount",
            "description": "Controls whether or not to include a count of all the items across all pages.",
            "type": "string",
            "default": "none",
            "enum": [
              "allpages",
              "none"
            ],
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$orderby",
            "description": "controls the sorting order and sorting based on which column",
            "type": "string",
            "default": "count desc",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of active events in the time range ordered by event.",
            "schema": {
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "format": "string",
                        "type": "string"
                      },
                      "name": {
                        "format": "string",
                        "type": "string"
                      },
                      "device_count": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "previous_device_count": {
                        "format": "int64",
                        "description": "The device count of previous time range of the event.",
                        "type": "integer"
                      },
                      "count": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "previous_count": {
                        "format": "int64",
                        "description": "The event count of previous time range of the event.",
                        "type": "integer"
                      },
                      "count_per_device": {
                        "format": "double",
                        "type": "number"
                      },
                      "count_per_session": {
                        "format": "double",
                        "type": "number"
                      }
                    }
                  }
                },
                "total": {
                  "format": "int64",
                  "description": "The total count of events.",
                  "type": "integer"
                },
                "total_devices": {
                  "format": "int64",
                  "description": "The active device over this period.",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}": {
      "delete": {
        "tags": [
          "analytics"
        ],
        "description": "Delete the set of Events with the specified event names.",
        "operationId": "Analytics_EventsDeleteLogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "event_name",
            "description": "The id of the event.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Event successfully deleted."
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts": {
      "post": {
        "tags": [
          "analytics"
        ],
        "description": "Count of total downloads for the provided distribution releases.",
        "operationId": "Analytics_DistributionReleaseCounts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "releases",
            "description": "The releases to retrieve.",
            "required": true,
            "schema": {
              "required": [
                "releases"
              ],
              "type": "object",
              "properties": {
                "releases": {
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "required": [
                          "release"
                        ],
                        "type": "object",
                        "properties": {
                          "release": {
                            "format": "string",
                            "description": "Release Id.\n",
                            "type": "string"
                          }
                        }
                      }
                    ],
                    "properties": {
                      "distribution_group": {
                        "format": "string",
                        "description": "Distribution group Id.\n",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of total downloads for the provided distribution release(s).",
            "schema": {
              "required": [
                "counts"
              ],
              "type": "object",
              "properties": {
                "total": {
                  "format": "int64",
                  "type": "integer"
                },
                "counts": {
                  "type": "array",
                  "items": {
                    "required": [
                      "release_id",
                      "unique_count",
                      "total_count"
                    ],
                    "type": "object",
                    "properties": {
                      "release_id": {
                        "format": "string",
                        "type": "string"
                      },
                      "distribution_group": {
                        "format": "string",
                        "description": "Distribution group queried.\n",
                        "type": "string"
                      },
                      "unique_count": {
                        "format": "int64",
                        "description": "Count of unique downloads against user id.\n",
                        "type": "integer"
                      },
                      "total_count": {
                        "format": "int64",
                        "description": "Total count of downloads.\n",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.",
        "operationId": "Analytics_CrashFreeDevicePercentages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Percentage of crash-free devices by day in the time range and overall percentage of the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "average_percentage": {
                  "format": "double",
                  "description": "Average percentage.",
                  "type": "number"
                },
                "daily_percentages": {
                  "description": "The crash-free percentage per day.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "percentage": {
                        "format": "double",
                        "description": "Percentage of the object.",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Available for UWP apps only.",
        "description": "Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupTotals",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "The id of the crash group.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Overall crashes and affected users count.",
            "schema": {
              "type": "object",
              "properties": {
                "crash_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "device_count": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Available for UWP apps only.",
        "description": "Top OSes of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupOperatingSystemCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "The id of the crash group.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Top OSes with percentage in descending order.",
            "schema": {
              "type": "object",
              "properties": {
                "crash_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "operating_systems": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "operating_system_name": {
                        "description": "OS name.",
                        "type": "string"
                      },
                      "crash_count": {
                        "format": "int64",
                        "description": "Count of OS.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Available for UWP apps only.",
        "description": "Top models of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupModelCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "The id of the crash group.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "type": "integer",
            "format": "int64",
            "default": 30,
            "maximum": 2000,
            "minimum": 0,
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Top models with percentage in descending order.",
            "schema": {
              "type": "object",
              "properties": {
                "crash_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "models": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "model_name": {
                        "description": "Model's name.",
                        "type": "string"
                      },
                      "crash_count": {
                        "format": "int64",
                        "description": "Count of model.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Available for UWP apps only.",
        "description": "Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "crash_group_id",
            "description": "The id of the crash group.",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of crashes by day in the time range and total crashes over the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "format": "int64",
                  "description": "Total crash count.",
                  "type": "integer"
                },
                "crashes": {
                  "description": "The total crash count for day.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups": {
      "post": {
        "tags": [
          "analytics"
        ],
        "description": "Overall crashes and affected users count of the selected crash groups with selected versions.",
        "operationId": "Analytics_CrashGroupsTotals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "crash_groups",
            "required": true,
            "schema": {
              "required": [
                "crash_groups"
              ],
              "type": "object",
              "properties": {
                "crash_groups": {
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "crash_group_id": {
                        "format": "string",
                        "type": "string"
                      },
                      "app_version": {
                        "format": "string",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Overall crashes and affected users count for all selected crash groups.",
            "schema": {
              "description": "List of crash groups with overall crashes count and affected users.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crash_group_id": {
                    "format": "string",
                    "type": "string"
                  },
                  "app_version": {
                    "format": "string",
                    "type": "string"
                  },
                  "overall": {
                    "type": "object",
                    "properties": {
                      "crash_count": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "device_count": {
                        "format": "int64",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Available for UWP apps only.",
        "description": "Count of crashes by day in the time range based the selected versions. Available for UWP apps only.",
        "operationId": "Analytics_CrashCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of crashes by day in the time range and total crashes over the time range.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "format": "int64",
                  "description": "Total crash count.",
                  "type": "integer"
                },
                "crashes": {
                  "description": "The total crash count for day.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}": {
      "head": {
        "tags": [
          "analytics"
        ],
        "description": "Returns whether audience definition exists.",
        "operationId": "Analytics_AudienceNameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "audience_name",
            "description": "The name of the audience",
            "required": true,
            "type": "string",
            "format": "string",
            "maxLength": 64,
            "pattern": "[^/]+",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Audiences exists."
          },
          "404": {
            "description": "Audiences does not exist."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "analytics"
        ],
        "description": "Deletes audience definition.",
        "operationId": "Analytics_DeleteAudience",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "audience_name",
            "description": "The name of the audience",
            "required": true,
            "type": "string",
            "format": "string",
            "maxLength": 64,
            "pattern": "[^/]+",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Audiences exists."
          },
          "404": {
            "description": "Audiences does not exist."
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Gets audience definition.",
        "operationId": "Analytics_GetAudience",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "audience_name",
            "description": "The name of the audience",
            "required": true,
            "type": "string",
            "format": "string",
            "maxLength": 64,
            "pattern": "[^/]+",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Audiences definition.",
            "schema": {
              "description": "Audience with details.",
              "allOf": [
                {
                  "description": "Audience definition.",
                  "properties": {
                    "name": {
                      "description": "Audience name.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Audience description.",
                      "type": "string"
                    },
                    "estimated_count": {
                      "format": "int64",
                      "description": "Estimated audience size.",
                      "type": "integer"
                    },
                    "definition": {
                      "description": "Audience definition in OData format.",
                      "type": "string"
                    },
                    "state": {
                      "description": "Audience state.",
                      "enum": [
                        "Calculating",
                        "Ready",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "name": "AudienceProcessingState"
                      }
                    }
                  }
                }
              ],
              "properties": {
                "enabled": {
                  "default": true,
                  "type": "boolean"
                },
                "custom_properties": {
                  "description": "Custom properties used in the definition.",
                  "type": "object",
                  "additionalProperties": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                },
                "estimated_total_count": {
                  "format": "int64",
                  "description": "Estimated total audience size.",
                  "type": "integer"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Date the audience was last refreshed.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "analytics"
        ],
        "description": "Creates or updates audience definition.",
        "operationId": "Analytics_CreateOrUpdateAudience",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "audience_name",
            "description": "The name of the audience",
            "required": true,
            "type": "string",
            "format": "string",
            "maxLength": 64,
            "pattern": "[^/]+",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "audience",
            "description": "Audience definition",
            "required": true,
            "schema": {
              "description": "Audience definition.",
              "required": [
                "definition"
              ],
              "type": "object",
              "properties": {
                "description": {
                  "description": "Audience description.",
                  "maxLength": 128,
                  "type": "string"
                },
                "definition": {
                  "description": "Audience definition in OData format.",
                  "maxLength": 2000,
                  "type": "string"
                },
                "enabled": {
                  "default": true,
                  "type": "boolean"
                },
                "custom_properties": {
                  "description": "Custom properties used in the definition.",
                  "type": "object",
                  "additionalProperties": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated audiences definition.",
            "schema": {
              "description": "Audience with details.",
              "allOf": [
                {
                  "description": "Audience definition.",
                  "properties": {
                    "name": {
                      "description": "Audience name.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Audience description.",
                      "type": "string"
                    },
                    "estimated_count": {
                      "format": "int64",
                      "description": "Estimated audience size.",
                      "type": "integer"
                    },
                    "definition": {
                      "description": "Audience definition in OData format.",
                      "type": "string"
                    },
                    "state": {
                      "description": "Audience state.",
                      "enum": [
                        "Calculating",
                        "Ready",
                        "Disabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "name": "AudienceProcessingState"
                      }
                    }
                  }
                }
              ],
              "properties": {
                "enabled": {
                  "default": true,
                  "type": "boolean"
                },
                "custom_properties": {
                  "description": "Custom properties used in the definition.",
                  "type": "object",
                  "additionalProperties": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                },
                "estimated_total_count": {
                  "format": "int64",
                  "description": "Estimated total audience size.",
                  "type": "integer"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Date the audience was last refreshed.",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get list of device property values.",
        "operationId": "Analytics_ListDevicePropertyValues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_name",
            "description": "Device property",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "contains",
            "description": "Contains string",
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported device property values.",
            "schema": {
              "description": "List of device property values.",
              "required": [
                "values"
              ],
              "properties": {
                "values": {
                  "description": "List of device property values.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get list of device properties.",
        "operationId": "Analytics_ListDeviceProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of device properties.",
            "schema": {
              "description": "List of device properties.",
              "required": [
                "values"
              ],
              "properties": {
                "values": {
                  "description": "List of device properties.",
                  "type": "object",
                  "additionalProperties": {
                    "description": "Type of the property.",
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get list of custom properties.",
        "operationId": "Analytics_ListCustomProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of device properties.",
            "schema": {
              "description": "List of device properties.",
              "required": [
                "values"
              ],
              "properties": {
                "values": {
                  "description": "List of device properties.",
                  "type": "object",
                  "additionalProperties": {
                    "description": "Type of the property.",
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test": {
      "post": {
        "tags": [
          "analytics"
        ],
        "description": "Tests audience definition.",
        "operationId": "Analytics_TestAudience",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "audience",
            "description": "Audience definition",
            "required": true,
            "schema": {
              "description": "Audience definition.",
              "required": [
                "definition"
              ],
              "type": "object",
              "properties": {
                "description": {
                  "description": "Audience description.",
                  "maxLength": 128,
                  "type": "string"
                },
                "definition": {
                  "description": "Audience definition in OData format.",
                  "maxLength": 2000,
                  "type": "string"
                },
                "enabled": {
                  "default": true,
                  "type": "boolean"
                },
                "custom_properties": {
                  "description": "Custom properties used in the definition.",
                  "type": "object",
                  "additionalProperties": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Tests audience definition.",
            "schema": {
              "description": "Audience test result.",
              "properties": {
                "definition": {
                  "description": "Audience definition in OData format.",
                  "type": "string"
                },
                "custom_properties": {
                  "description": "Custom properties used in the definition.",
                  "type": "object",
                  "additionalProperties": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "device_property_type",
                      "modelAsString": false
                    }
                  }
                },
                "estimated_count": {
                  "format": "int64",
                  "description": "Estimated audience size.",
                  "type": "integer"
                },
                "estimated_total_count": {
                  "format": "int64",
                  "description": "Estimated total audience size.",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Get list of audiences.",
        "operationId": "Analytics_ListAudiences",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include_disabled",
            "description": "Include disabled audience definitions",
            "type": "boolean",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "List of audiences.",
            "schema": {
              "description": "List of audiences.",
              "required": [
                "values"
              ],
              "properties": {
                "values": {
                  "description": "List of audiences.",
                  "type": "array",
                  "items": {
                    "description": "Audience definition.",
                    "properties": {
                      "name": {
                        "description": "Audience name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Audience description.",
                        "type": "string"
                      },
                      "estimated_count": {
                        "format": "int64",
                        "description": "Estimated audience size.",
                        "type": "integer"
                      },
                      "definition": {
                        "description": "Audience definition in OData format.",
                        "type": "string"
                      },
                      "state": {
                        "description": "Audience state.",
                        "enum": [
                          "Calculating",
                          "Ready",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "name": "AudienceProcessingState"
                        }
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts": {
      "get": {
        "tags": [
          "analytics"
        ],
        "description": "Count of active devices by interval in the time range.",
        "operationId": "Analytics_DeviceCounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "Start date time in data in ISO 8601 date time format.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Last date time in data in ISO 8601 date time format.",
            "type": "string",
            "format": "date-time",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "app_build",
            "required": true,
            "type": "string",
            "format": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Count of active devices by interval in the time range.",
            "schema": {
              "properties": {
                "daily": {
                  "description": "The active device count for each interval.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "weekly": {
                  "description": "The active device count for each interval with a week's retention.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "monthly": {
                  "description": "The active device count for each interval with a month's retention.",
                  "type": "array",
                  "items": {
                    "properties": {
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      },
                      "count": {
                        "format": "int64",
                        "description": "Count of the object.",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error code with reason.",
            "schema": {
              "description": "Error",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "The status code return by the API. It can be 400 or 403 or 500.",
                      "enum": [
                        400,
                        403,
                        500
                      ],
                      "type": "integer"
                    },
                    "message": {
                      "description": "The reason for the request failed.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Return a specific app with the given app name which belongs to the given owner.",
        "operationId": "apps_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "account"
        ],
        "description": "Partially updates a single app",
        "operationId": "apps_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "body",
            "name": "app",
            "description": "The partial data for the app",
            "schema": {
              "properties": {
                "description": {
                  "description": "A short text describing the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "icon_url": {
                  "description": "The string representation of the URL pointing to the app's icon",
                  "type": "string"
                },
                "icon_asset_id": {
                  "format": "uuid",
                  "description": "The uuid for the icon's asset id from ACFUS",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "BadRequest",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Delete an app",
        "operationId": "apps_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "app_name",
            "description": "The name of the application",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "in": "path",
            "name": "owner_name",
            "description": "The name of the owner",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/apps": {
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a new app and returns it to the caller",
        "operationId": "apps_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "app",
            "description": "The data for the app",
            "required": true,
            "schema": {
              "required": [
                "display_name",
                "os",
                "platform"
              ],
              "properties": {
                "description": {
                  "description": "A short text describing the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "display_name": {
                  "description": "The descriptive name of the app. This can contain any characters",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Xamarin",
                    "Unity",
                    "Electron",
                    "WPF",
                    "WinForms",
                    "Custom"
                  ],
                  "type": "string"
                }
              }
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "app_secret",
                "platform",
                "origin"
              ],
              "allOf": [
                {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "os",
                    "owner"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique ID (UUID) of the app",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the app",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the app",
                      "type": "string"
                    },
                    "release_type": {
                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "The string representation of the URL pointing to the app's icon",
                      "type": "string"
                    },
                    "icon_source": {
                      "description": "The string representation of the source of the app's icon",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the app used in URLs",
                      "type": "string"
                    },
                    "os": {
                      "description": "The OS the app will be running on",
                      "enum": [
                        "Android",
                        "iOS",
                        "macOS",
                        "Tizen",
                        "tvOS",
                        "Windows",
                        "Linux",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "owner": {
                      "description": "The information about the app's owner",
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "format": "uuid",
                          "description": "The unique id (UUID) of the owner",
                          "type": "string"
                        },
                        "avatar_url": {
                          "description": "The avatar URL of the owner",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The owner's display name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The owner's email address",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that used to identify the owner",
                          "type": "string"
                        },
                        "type": {
                          "description": "The owner type. Can either be 'org' or 'user'",
                          "enum": [
                            "org",
                            "user"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "app_secret": {
                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                      "type": "string"
                    },
                    "azure_subscription": {
                      "required": [
                        "subscription_id",
                        "tenant_id",
                        "subscription_name"
                      ],
                      "properties": {
                        "subscription_id": {
                          "format": "uuid",
                          "description": "The azure subscription id",
                          "type": "string"
                        },
                        "tenant_id": {
                          "format": "uuid",
                          "description": "The tenant id of the azure subscription belongs to",
                          "type": "string"
                        },
                        "subscription_name": {
                          "description": "The name of the azure subscription",
                          "type": "string"
                        },
                        "is_billing": {
                          "description": "If the subscription is used for billing",
                          "type": "boolean"
                        },
                        "is_billable": {
                          "description": "If the subscription can be used for billing",
                          "type": "boolean"
                        },
                        "is_microsoft_internal": {
                          "description": "If the subscription is internal Microsoft subscription",
                          "type": "boolean"
                        }
                      }
                    },
                    "platform": {
                      "description": "The platform of the app",
                      "enum": [
                        "Java",
                        "Objective-C-Swift",
                        "UWP",
                        "Cordova",
                        "React-Native",
                        "Unity",
                        "Electron",
                        "Xamarin",
                        "WPF",
                        "WinForms",
                        "Unknown",
                        "Custom"
                      ],
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this app",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The created date of this app",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The last updated date of this app",
                      "type": "string"
                    },
                    "member_permissions": {
                      "description": "The permissions of the calling user",
                      "type": "array",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list of apps",
        "operationId": "apps_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$orderBy",
            "description": "The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.",
            "type": "string",
            "enum": [
              "display_name",
              "name"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "app_secret",
                  "platform",
                  "origin"
                ],
                "allOf": [
                  {
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "os",
                      "owner"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique ID (UUID) of the app",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the app",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the app",
                        "type": "string"
                      },
                      "release_type": {
                        "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                        "type": "string"
                      },
                      "icon_url": {
                        "description": "The string representation of the URL pointing to the app's icon",
                        "type": "string"
                      },
                      "icon_source": {
                        "description": "The string representation of the source of the app's icon",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the app used in URLs",
                        "type": "string"
                      },
                      "os": {
                        "description": "The OS the app will be running on",
                        "enum": [
                          "Android",
                          "iOS",
                          "macOS",
                          "Tizen",
                          "tvOS",
                          "Windows",
                          "Linux",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "owner": {
                        "description": "The information about the app's owner",
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique id (UUID) of the owner",
                            "type": "string"
                          },
                          "avatar_url": {
                            "description": "The avatar URL of the owner",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The owner's display name",
                            "type": "string"
                          },
                          "email": {
                            "description": "The owner's email address",
                            "type": "string"
                          },
                          "name": {
                            "description": "The unique name that used to identify the owner",
                            "type": "string"
                          },
                          "type": {
                            "description": "The owner type. Can either be 'org' or 'user'",
                            "enum": [
                              "org",
                              "user"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "properties": {
                      "app_secret": {
                        "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                        "type": "string"
                      },
                      "azure_subscription": {
                        "required": [
                          "subscription_id",
                          "tenant_id",
                          "subscription_name"
                        ],
                        "properties": {
                          "subscription_id": {
                            "format": "uuid",
                            "description": "The azure subscription id",
                            "type": "string"
                          },
                          "tenant_id": {
                            "format": "uuid",
                            "description": "The tenant id of the azure subscription belongs to",
                            "type": "string"
                          },
                          "subscription_name": {
                            "description": "The name of the azure subscription",
                            "type": "string"
                          },
                          "is_billing": {
                            "description": "If the subscription is used for billing",
                            "type": "boolean"
                          },
                          "is_billable": {
                            "description": "If the subscription can be used for billing",
                            "type": "boolean"
                          },
                          "is_microsoft_internal": {
                            "description": "If the subscription is internal Microsoft subscription",
                            "type": "boolean"
                          }
                        }
                      },
                      "platform": {
                        "description": "The platform of the app",
                        "enum": [
                          "Java",
                          "Objective-C-Swift",
                          "UWP",
                          "Cordova",
                          "React-Native",
                          "Unity",
                          "Electron",
                          "Xamarin",
                          "WPF",
                          "WinForms",
                          "Unknown",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this app",
                        "enum": [
                          "appcenter",
                          "hockeyapp",
                          "codepush"
                        ],
                        "type": "string"
                      },
                      "created_at": {
                        "description": "The created date of this app",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "The last updated date of this app",
                        "type": "string"
                      },
                      "member_permissions": {
                        "description": "The permissions of the calling user",
                        "type": "array",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/api_tokens/{api_token_id}": {
      "delete": {
        "tags": [
          "account"
        ],
        "description": "Delete the user api_token object with the specific id",
        "operationId": "userApiTokens_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "api_token_id",
            "description": "The unique ID (UUID) of the api token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/v0.1/api_tokens": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns api tokens for the authenticated user",
        "operationId": "userApiTokens_list",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "required": [
                  "id",
                  "created_at"
                ],
                "properties": {
                  "id": {
                    "description": "The unique id (UUID) of the api token",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the token",
                    "type": "string"
                  },
                  "scope": {
                    "description": "The scope for this token.",
                    "type": "array",
                    "items": {
                      "enum": [
                        "all",
                        "viewer"
                      ],
                      "type": "string"
                    }
                  },
                  "created_at": {
                    "description": "The creation time",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "description": "Creates a new User API token",
        "operationId": "userApiTokens_new",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "description",
            "description": "Description of the token",
            "schema": {
              "properties": {
                "description": {
                  "description": "The description of the token",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope for this token.",
                  "type": "array",
                  "items": {
                    "enum": [
                      "all",
                      "viewer"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "required": [
                "id",
                "created_at",
                "api_token"
              ],
              "properties": {
                "id": {
                  "description": "The unique id (UUID) of the api token",
                  "type": "string"
                },
                "api_token": {
                  "description": "The api token generated will not be accessible again",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the token",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope for this token.",
                  "type": "array",
                  "items": {
                    "enum": [
                      "all",
                      "viewer"
                    ],
                    "type": "string"
                  }
                },
                "created_at": {
                  "description": "The creation time",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": [ ]
          }
        ]
      }
    },
    "/v0.1/administeredOrgs": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Returns a list organizations in which the requesting user is an admin",
        "operationId": "organizations_listAdministered",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "required": [
                "organizations"
              ],
              "type": "object",
              "properties": {
                "organizations": {
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The internal unique id (UUID) of the organization.",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "required": [
                "error"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/account/test/export/featureFlags": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists feature flag data",
        "operationId": "test_gdprExportFeatureFlag",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "target_id": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/account/test/export/accounts": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists account data",
        "operationId": "test_gdprExportAccount",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    },
    "/v0.1/account/test/export": {
      "get": {
        "tags": [
          "test"
        ],
        "description": "Lists all the endpoints available for Test accounts data",
        "operationId": "test_gdprExportAccounts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rel": {
                        "type": "string"
                      },
                      "path": {
                        "format": "URL",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": [ ]
          }
        ]
      }
    }
  },
  "definitions": {
    "GetInAppUpdateTokenResponse": {
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "description": "The api token generated will not be accessible again",
          "type": "string"
        }
      }
    },
    "ApiTokensCreateResponse": {
      "required": [
        "id",
        "created_at",
        "api_token"
      ],
      "properties": {
        "id": {
          "description": "The unique id (UUID) of the api token",
          "type": "string"
        },
        "api_token": {
          "description": "The api token generated will not be accessible again",
          "type": "string"
        },
        "description": {
          "description": "The description of the token",
          "type": "string"
        },
        "scope": {
          "description": "The scope for this token.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "viewer"
            ],
            "type": "string"
          }
        },
        "created_at": {
          "description": "The creation time",
          "type": "string"
        }
      }
    },
    "ApiTokensCreateRequest": {
      "properties": {
        "description": {
          "description": "The description of the token",
          "type": "string"
        },
        "scope": {
          "description": "The scope for this token.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "viewer"
            ],
            "type": "string"
          }
        }
      }
    },
    "ApiTokensGetResponse": {
      "required": [
        "id",
        "created_at"
      ],
      "properties": {
        "id": {
          "description": "The unique id (UUID) of the api token",
          "type": "string"
        },
        "description": {
          "description": "The description of the token",
          "type": "string"
        },
        "scope": {
          "description": "The scope for this token.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "viewer"
            ],
            "type": "string"
          }
        },
        "created_at": {
          "description": "The creation time",
          "type": "string"
        }
      }
    },
    "Status": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "Failure": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "required": [
        "error"
      ],
      "type": "object",
      "properties": {
        "error": {
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "enum": [
                "BadRequest",
                "Conflict",
                "NotAcceptable",
                "NotFound",
                "InternalServerError",
                "Unauthorized",
                "TooManyRequests"
              ],
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      }
    },
    "ErrorDetails": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "enum": [
            "BadRequest",
            "Conflict",
            "NotAcceptable",
            "NotFound",
            "InternalServerError",
            "Unauthorized",
            "TooManyRequests"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "AADTenantAddRequest": {
      "required": [
        "user_id",
        "aad_tenant_id",
        "display_name"
      ],
      "properties": {
        "user_id": {
          "format": "uuid",
          "description": "The user wanting to add this tenant to the organization, must be an admin of the organization",
          "type": "string"
        },
        "aad_tenant_id": {
          "format": "uuid",
          "description": "The AAD tenant id",
          "type": "string"
        },
        "display_name": {
          "description": "The name of the AAD Tenant",
          "type": "string"
        }
      }
    },
    "AADTenantResponse": {
      "required": [
        "aad_tenant_id",
        "display_name"
      ],
      "properties": {
        "aad_tenant_id": {
          "format": "uuid",
          "description": "The AAD tenant id",
          "type": "string"
        },
        "display_name": {
          "description": "The name of the AAD Tenant",
          "type": "string"
        }
      }
    },
    "AddAppTesterRequest": {
      "required": [
        "user_id",
        "release_id"
      ],
      "properties": {
        "user_id": {
          "format": "uuid",
          "description": "The user ID of the tester that needs to be added",
          "type": "string"
        },
        "release_id": {
          "description": "The ID of the release the user was added to",
          "type": "integer"
        }
      }
    },
    "AddAppTesterResponse": {
      "required": [
        "user_id",
        "release_id"
      ],
      "properties": {
        "user_id": {
          "format": "uuid",
          "description": "The user ID of the tester that needs to be added",
          "type": "string"
        },
        "release_id": {
          "description": "The ID of the release the user was added to",
          "type": "integer"
        }
      }
    },
    "ApiTokensPostRequest": {
      "properties": {
        "description": {
          "description": "The description of the token",
          "type": "string"
        },
        "encrypted_token": {
          "description": "An encrypted value of the token.",
          "type": "string"
        },
        "scope": {
          "description": "The scope for this token. An array of supported roles.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "in_app_update",
              "viewer"
            ],
            "type": "string"
          }
        },
        "token_hash": {
          "description": "The hashed value of api token",
          "type": "string"
        },
        "token_type": {
          "description": "The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is \"public\".'",
          "enum": [
            "public",
            "in_app_update",
            "build",
            "session",
            "tester_app"
          ],
          "type": "string"
        }
      }
    },
    "AppPatchRequest": {
      "properties": {
        "description": {
          "description": "A short text describing the app",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the app",
          "type": "string"
        },
        "release_type": {
          "description": "A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase",
          "type": "string"
        },
        "name": {
          "description": "The name of the app used in URLs",
          "type": "string"
        },
        "icon_url": {
          "description": "The string representation of the URL pointing to the app's icon",
          "type": "string"
        },
        "icon_asset_id": {
          "format": "uuid",
          "description": "The uuid for the icon's asset id from ACFUS",
          "type": "string"
        }
      }
    },
    "AppRepoPatchRequest": {
      "properties": {
        "repo_url": {
          "description": "The absolute URL of the repository",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "external_user_id": {
          "description": "The external user id from the provider",
          "type": "string"
        },
        "service_connection_id": {
          "format": "uuid",
          "description": "The id of the service connection stored in customer credential store",
          "type": "string"
        }
      }
    },
    "AppRepoPostRequest": {
      "required": [
        "repo_url",
        "user_id"
      ],
      "properties": {
        "repo_url": {
          "description": "The absolute URL of the repository",
          "type": "string"
        },
        "repo_provider": {
          "description": "The provider of the repository",
          "enum": [
            "github",
            "bitbucket",
            "vsts",
            "gitlab"
          ],
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user who configured the repository",
          "type": "string"
        },
        "installation_id": {
          "description": "Installation id from the provider",
          "type": "string"
        },
        "repo_id": {
          "description": "Repository id from the provider",
          "type": "string"
        },
        "external_user_id": {
          "description": "The external user id from the provider",
          "type": "string"
        },
        "service_connection_id": {
          "format": "uuid",
          "description": "The id of the service connection stored in customer credential store",
          "type": "string"
        }
      }
    },
    "AppRequest": {
      "required": [
        "display_name",
        "os",
        "platform"
      ],
      "properties": {
        "description": {
          "description": "A short text describing the app",
          "type": "string"
        },
        "release_type": {
          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
          "type": "string"
        },
        "display_name": {
          "description": "The descriptive name of the app. This can contain any characters",
          "type": "string"
        },
        "name": {
          "description": "The name of the app used in URLs",
          "type": "string"
        },
        "os": {
          "description": "The OS the app will be running on",
          "enum": [
            "Android",
            "iOS",
            "macOS",
            "Tizen",
            "tvOS",
            "Windows",
            "Linux",
            "Custom"
          ],
          "type": "string"
        },
        "platform": {
          "description": "The platform of the app",
          "enum": [
            "Java",
            "Objective-C-Swift",
            "UWP",
            "Cordova",
            "React-Native",
            "Xamarin",
            "Unity",
            "Electron",
            "WPF",
            "WinForms",
            "Custom"
          ],
          "type": "string"
        }
      }
    },
    "AppAddRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the app to be added to the distribution group",
          "type": "string"
        }
      }
    },
    "AppDeleteRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the app to be deleted from the distribution group",
          "type": "string"
        }
      }
    },
    "AzureSubscriptionAddRequest": {
      "required": [
        "subscription_id",
        "tenant_id",
        "subscription_name"
      ],
      "properties": {
        "subscription_id": {
          "format": "uuid",
          "description": "The azure subscription id",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "description": "The tenant id of the azure subscription belongs to",
          "type": "string"
        },
        "subscription_name": {
          "description": "The name of the azure subscription",
          "type": "string"
        },
        "is_billing": {
          "description": "If the subscription is used for billing",
          "type": "boolean"
        }
      }
    },
    "AzureSubscriptionUpdateBillableRequest": {
      "required": [
        "is_billable"
      ],
      "properties": {
        "is_billable": {
          "description": "Billable status of the subscription",
          "type": "boolean"
        }
      }
    },
    "AzureSubscriptionPatchRequest": {
      "required": [
        "is_billing"
      ],
      "properties": {
        "is_billing": {
          "description": "If the subscription is used for billing",
          "type": "boolean"
        }
      }
    },
    "AzureSubscriptionAddToAppRequest": {
      "required": [
        "subscription_id"
      ],
      "properties": {
        "subscription_id": {
          "format": "uuid",
          "description": "The azure subscription id",
          "type": "string"
        }
      }
    },
    "DistributionGroupPatchRequest": {
      "properties": {
        "name": {
          "description": "The name of the distribution group",
          "type": "string"
        },
        "is_public": {
          "description": "Whether the distribution group is public",
          "type": "boolean"
        }
      }
    },
    "DistributionGroupRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the distribution group",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the distribution group. If not specified, the name will be used.",
          "type": "string"
        }
      }
    },
    "AppDistributionGroupUsersRequest": {
      "properties": {
        "member_ids": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "DistributionGroupUserRequest": {
      "properties": {
        "user_emails": {
          "description": "The list of emails of the users",
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DistributionGroupAppAddRequest": {
      "properties": {
        "apps": {
          "description": "The list of apps to add to distribution group",
          "type": "array",
          "items": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the app to be added to the distribution group",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DistributionGroupAppsDeleteRequest": {
      "properties": {
        "apps": {
          "description": "The list of apps to delete from the distribution group",
          "minItems": 1,
          "type": "array",
          "items": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the app to be deleted from the distribution group",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DistributionGroupAADGroupsDeleteRequest": {
      "properties": {
        "aad_group_ids": {
          "description": "The list of aad group ids",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataDeletionRequest": {
      "properties": {
        "data_deletion_type": {
          "description": "Type of data to delete",
          "type": "string"
        }
      }
    },
    "DistributionGroupAADGroupRequest": {
      "properties": {
        "aad_groups": {
          "description": "The list of aad group ids and names to add",
          "type": "array",
          "items": {
            "properties": {
              "aad_group_id": {
                "format": "uuid",
                "description": "The id of the aad group",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the aad group",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DistributionGroupAADGroupBase": {
      "properties": {
        "aad_group_id": {
          "format": "uuid",
          "description": "The id of the aad group",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the aad group",
          "type": "string"
        }
      }
    },
    "DistributionGroupsUserVerifyRequest": {
      "required": [
        "distribution_group_ids"
      ],
      "properties": {
        "distribution_group_ids": {
          "description": "An array of distribution group ids",
          "type": "array",
          "items": {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "format": "uuid",
                "description": "The id of the distribution group",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DistributionGroupIdRequest": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The id of the distribution group",
          "type": "string"
        }
      }
    },
    "EmailVerificationRequest": {
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "description": "The verification token that was sent to the user",
          "type": "string"
        }
      }
    },
    "ExternalRepositoryProvider": {
      "description": "Supported external providers of source control repositories",
      "enum": [
        "github"
      ],
      "type": "string"
    },
    "ExternalUserRequest": {
      "required": [
        "email"
      ],
      "properties": {
        "app_invitation": {
          "description": "The token of the app invitation which lead to signup",
          "type": "string"
        },
        "tester_invitation": {
          "description": "The token of the test invitation which lead to signup",
          "type": "string"
        },
        "organization_invitation": {
          "description": "The token of the organization invitation which lead to signup",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the `display_name` value",
          "type": "string"
        }
      }
    },
    "ExternalAppId": {
      "properties": {
        "external_id": {
          "description": "The identifier for external apps that map to an App Center app",
          "type": "string"
        }
      }
    },
    "FeaturePatchRequest": {
      "properties": {
        "description": {
          "description": "The friendly name of the feature",
          "type": "string"
        },
        "display_name": {
          "description": "The full (friendly) name of the feature.",
          "type": "string"
        },
        "state": {
          "description": "The state of the feature",
          "type": "integer"
        }
      }
    },
    "FeatureCreateRequest": {
      "required": [
        "name",
        "display_name"
      ],
      "properties": {
        "name": {
          "description": "The unique name of the feature",
          "type": "string"
        },
        "display_name": {
          "description": "The full (friendly) name of the feature.",
          "type": "string"
        },
        "state": {
          "description": "The state of the feature",
          "type": "integer"
        },
        "description": {
          "description": "The friendly name of the feature",
          "type": "string"
        }
      }
    },
    "GrantAdminRoleRequest": {
      "required": [
        "admin_role"
      ],
      "properties": {
        "admin_role": {
          "description": "The new admin_role",
          "enum": [
            "superAdmin",
            "admin",
            "devOps",
            "customerSupport",
            "notAdmin"
          ],
          "type": "string"
        }
      }
    },
    "InternalBulkAppResponse": {
      "properties": {
        "app_name": {
          "description": "The name of the app",
          "type": "string"
        },
        "owner_display_name": {
          "description": "The display name of the owner",
          "type": "string"
        }
      }
    },
    "InternalUserRequest": {
      "required": [
        "email",
        "name",
        "password"
      ],
      "properties": {
        "app_invitation": {
          "description": "The token of the app invitation which lead to signup",
          "type": "string"
        },
        "tester_invitation": {
          "description": "The token of the test invitation which lead to signup",
          "type": "string"
        },
        "organization_invitation": {
          "description": "The token of the organization invitation which lead to signup",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "password": {
          "description": "The password of the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.",
          "type": "string"
        },
        "portal_subdomain": {
          "description": "The sub-domain of the portal from which this request was made. Will be used to build the invitation link.",
          "enum": [
            "install."
          ],
          "type": "string"
        }
      }
    },
    "OrganizationPatchRequest": {
      "properties": {
        "display_name": {
          "description": "The full (friendly) name of the organization.",
          "type": "string"
        },
        "name": {
          "description": "The name of the organization used in URLs",
          "type": "string"
        }
      }
    },
    "OrganizationRequest": {
      "properties": {
        "display_name": {
          "description": "The display name of the organization",
          "type": "string"
        },
        "name": {
          "description": "The name of the organization used in URLs",
          "type": "string"
        }
      }
    },
    "OrganizationUserPatchRequest": {
      "properties": {
        "role": {
          "description": "The user's role in the organizatiion",
          "enum": [
            "admin",
            "collaborator",
            "member"
          ],
          "type": "string"
        }
      }
    },
    "AddOrganizationAdminRequest": {
      "required": [
        "user_id"
      ],
      "properties": {
        "user_id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the account.",
          "type": "string"
        }
      }
    },
    "TransferAppAdminRequest": {
      "required": [
        "new_owner_id"
      ],
      "properties": {
        "new_owner_id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the user/org.",
          "type": "string"
        }
      }
    },
    "PasswordUpdateRequest": {
      "required": [
        "new_password"
      ],
      "properties": {
        "new_password": {
          "description": "The new password that will be set for the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.",
          "type": "string"
        },
        "old_password": {
          "description": "The old password, if needed.",
          "type": "string"
        }
      }
    },
    "PostRepositoryProviderMappingRequest": {
      "required": [
        "external_account_id",
        "provider",
        "account_id"
      ],
      "properties": {
        "external_account_id": {
          "description": "Id of user in the external provider service",
          "type": "string"
        },
        "provider": {
          "description": "Supported external providers of source control repositories",
          "enum": [
            "github"
          ],
          "type": "string"
        },
        "account_id": {
          "format": "uuid",
          "description": "App Center account id to link to this provider and external id",
          "type": "string"
        }
      }
    },
    "GetOrCreateRepositoryProviderMappingRequest": {
      "properties": {
        "external_account_name": {
          "description": "The account name given by the external provider. If provided, create an organization and the mapping. If not, create mapping with user.",
          "type": "string"
        }
      }
    },
    "ResendVerificationRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The email or name of the user to resend verification",
          "type": "string"
        }
      }
    },
    "ResetPasswordUsingTokenRequest": {
      "required": [
        "token",
        "new_password"
      ],
      "properties": {
        "new_password": {
          "description": "The new password. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.",
          "type": "string"
        },
        "token": {
          "description": "The reset password token that was sent to the user",
          "type": "string"
        }
      }
    },
    "UserAppPermissionsUpdateRequest": {
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "description": "The permissions the user has for the app",
          "type": "array",
          "items": {
            "enum": [
              "manager",
              "developer",
              "viewer"
            ],
            "type": "string"
          }
        }
      }
    },
    "UserInvitationPermissionsUpdateRequest": {
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "description": "The permissions the user has for the app in the invitation",
          "type": "array",
          "items": {
            "enum": [
              "manager",
              "developer",
              "viewer"
            ],
            "type": "string"
          }
        }
      }
    },
    "UserEmailOrgRoleRequest": {
      "required": [
        "user_email"
      ],
      "properties": {
        "user_email": {
          "description": "The user's email address",
          "type": "string"
        },
        "role": {
          "description": "The user's role",
          "enum": [
            "admin",
            "collaborator",
            "member"
          ],
          "type": "string"
        }
      }
    },
    "UserEmailRequest": {
      "required": [
        "user_email"
      ],
      "properties": {
        "user_email": {
          "description": "The user's email address",
          "type": "string"
        }
      }
    },
    "UserNameUpdateRequest": {
      "properties": {
        "name": {
          "description": "The new, unique name that is used to identify.",
          "type": "string"
        }
      }
    },
    "UserUpdateRequest": {
      "properties": {
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        }
      }
    },
    "UserUpdateRequestInternal": {
      "properties": {
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "name": {
          "description": "The new, unique name that is used to identify.",
          "type": "string"
        },
        "next_nps_survey_date": {
          "description": "The date in the future when the user should be checked again for NPS eligibility",
          "type": "string"
        },
        "email": {
          "description": "The email address for this user",
          "type": "string"
        }
      }
    },
    "UserSettingRequest": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "description": "The setting value",
          "type": "string"
        }
      }
    },
    "AccountResponse": {
      "required": [
        "id",
        "display_name",
        "name",
        "origin",
        "type"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the account.",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the account",
          "type": "string"
        },
        "name": {
          "description": "The slug name of the account",
          "type": "string"
        },
        "email": {
          "description": "The account's email. For org that value might be empty.",
          "type": "string"
        },
        "origin": {
          "description": "The creation origin of this account",
          "enum": [
            "appcenter",
            "hockeyapp"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of this account",
          "enum": [
            "user",
            "org"
          ],
          "type": "string"
        }
      }
    },
    "ApiTokenDeleteResponse": {
      "required": [
        "id",
        "token_hash"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the api token",
          "type": "string"
        },
        "token_hash": {
          "description": "The hashed value of api token",
          "type": "string"
        }
      }
    },
    "ApiTokenGetUserResponse": {
      "required": [
        "token_id",
        "token_scope",
        "user_id",
        "user_email",
        "user_origin"
      ],
      "properties": {
        "token_id": {
          "format": "uuid",
          "description": "The token's unique id (UUID)",
          "type": "string"
        },
        "token_scope": {
          "description": "The token's scope. A list of allowed roles.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "in_app_update",
              "viewer"
            ],
            "type": "string"
          }
        },
        "user_email": {
          "description": "The user email",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "user_origin": {
          "description": "The creation origin of the user who created this api token",
          "enum": [
            "appcenter",
            "hockeyapp",
            "codepush"
          ],
          "type": "string"
        }
      }
    },
    "ValidatedApiTokenResponse": {
      "required": [
        "token_id",
        "token_scope",
        "principal_id",
        "principal_type",
        "claims"
      ],
      "properties": {
        "token_id": {
          "format": "uuid",
          "description": "The token's unique id (UUID)",
          "type": "string"
        },
        "token_scope": {
          "description": "The token's scope. A list of allowed roles.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "in_app_update",
              "viewer"
            ],
            "type": "string"
          }
        },
        "principal_id": {
          "format": "uuid",
          "description": "The ID of the owner of the API Token (user_id or app_id)",
          "type": "string"
        },
        "principal_type": {
          "description": "Indicates the type of the principal (app or user)",
          "enum": [
            "app",
            "user"
          ],
          "type": "string"
        },
        "claims": {
          "description": "Collection of attributes that describe the principal of the specified API Token",
          "type": "array",
          "items": {
            "properties": {
              "claim_type": {
                "enum": [
                  "user_email",
                  "user_origin",
                  "app_owner_name",
                  "app_name",
                  "app_origin",
                  "app_os",
                  "app_platform",
                  "app_secret"
                ],
                "type": "string"
              },
              "claim_value": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ApiTokenClaim": {
      "properties": {
        "claim_type": {
          "enum": [
            "user_email",
            "user_origin",
            "app_owner_name",
            "app_name",
            "app_origin",
            "app_os",
            "app_platform",
            "app_secret"
          ],
          "type": "string"
        },
        "claim_value": {
          "type": "string"
        }
      }
    },
    "ApiTokenResponse": {
      "required": [
        "id",
        "created_at"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the api token",
          "type": "string"
        },
        "created_at": {
          "description": "The creation time",
          "type": "string"
        },
        "scope": {
          "description": "The token's scope. A list of allowed roles.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "in_app_update",
              "viewer"
            ],
            "type": "string"
          }
        },
        "encrypted_token": {
          "description": "The encrypted value of a token. This value will only be returned for token of type in_app_update.",
          "type": "string"
        },
        "description": {
          "description": "The description of the token",
          "type": "string"
        }
      }
    },
    "AppGroupResponse": {
      "required": [
        "id",
        "group_id",
        "name",
        "os",
        "platform"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the app",
          "type": "string"
        },
        "group_id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the group that the app belongs to",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the app",
          "type": "string"
        },
        "release_type": {
          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
          "type": "string"
        },
        "name": {
          "description": "The name of the app used in URLs",
          "type": "string"
        },
        "os": {
          "description": "The OS the app will be running on",
          "enum": [
            "Android",
            "iOS",
            "macOS",
            "Tizen",
            "tvOS",
            "Windows",
            "Linux",
            "Custom"
          ],
          "type": "string"
        },
        "platform": {
          "description": "The platform of the app",
          "enum": [
            "Java",
            "Objective-C-Swift",
            "UWP",
            "Cordova",
            "React-Native",
            "Unity",
            "Electron",
            "Xamarin",
            "WPF",
            "WinForms",
            "Unknown",
            "Custom"
          ],
          "type": "string"
        }
      }
    },
    "AppInvitationDetailResponse": {
      "required": [
        "id",
        "email",
        "is_existing_user",
        "invited_by",
        "invite_type",
        "app"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the invitation",
          "type": "string"
        },
        "app": {
          "required": [
            "app_secret",
            "platform",
            "origin"
          ],
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "name",
                "os",
                "owner"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID (UUID) of the app",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "icon_url": {
                  "description": "The string representation of the URL pointing to the app's icon",
                  "type": "string"
                },
                "icon_source": {
                  "description": "The string representation of the source of the app's icon",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "owner": {
                  "description": "The information about the app's owner",
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique id (UUID) of the owner",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The avatar URL of the owner",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The owner's display name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The owner's email address",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that used to identify the owner",
                      "type": "string"
                    },
                    "type": {
                      "description": "The owner type. Can either be 'org' or 'user'",
                      "enum": [
                        "org",
                        "user"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "app_secret": {
                  "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                  "type": "string"
                },
                "azure_subscription": {
                  "required": [
                    "subscription_id",
                    "tenant_id",
                    "subscription_name"
                  ],
                  "properties": {
                    "subscription_id": {
                      "format": "uuid",
                      "description": "The azure subscription id",
                      "type": "string"
                    },
                    "tenant_id": {
                      "format": "uuid",
                      "description": "The tenant id of the azure subscription belongs to",
                      "type": "string"
                    },
                    "subscription_name": {
                      "description": "The name of the azure subscription",
                      "type": "string"
                    },
                    "is_billing": {
                      "description": "If the subscription is used for billing",
                      "type": "boolean"
                    },
                    "is_billable": {
                      "description": "If the subscription can be used for billing",
                      "type": "boolean"
                    },
                    "is_microsoft_internal": {
                      "description": "If the subscription is internal Microsoft subscription",
                      "type": "boolean"
                    }
                  }
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Unity",
                    "Electron",
                    "Xamarin",
                    "WPF",
                    "WinForms",
                    "Unknown",
                    "Custom"
                  ],
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this app",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The created date of this app",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The last updated date of this app",
                  "type": "string"
                },
                "member_permissions": {
                  "description": "The permissions of the calling user",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "email": {
          "description": "The email address of the invited user",
          "type": "string"
        },
        "invite_type": {
          "description": "The invitation type",
          "enum": [
            "developer",
            "tester"
          ],
          "type": "string"
        },
        "invited_by": {
          "required": [
            "id",
            "display_name",
            "email",
            "name",
            "origin"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique id (UUID) of the user",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the user",
              "type": "string"
            },
            "can_change_password": {
              "description": "User is required to send an old password in order to change the password.",
              "type": "boolean"
            },
            "display_name": {
              "description": "The full name of the user. Might for example be first and last name",
              "type": "string"
            },
            "email": {
              "description": "The email address of the user",
              "type": "string"
            },
            "name": {
              "description": "The unique name that is used to identify the user.",
              "type": "string"
            },
            "permissions": {
              "description": "The permissions the user has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            },
            "origin": {
              "description": "The creation origin of this user",
              "enum": [
                "appcenter",
                "hockeyapp",
                "codepush"
              ],
              "type": "string"
            }
          }
        },
        "is_existing_user": {
          "description": "Indicates whether the invited user already exists",
          "type": "boolean"
        },
        "permissions": {
          "description": "The permissions the user has for the app",
          "type": "array",
          "items": {
            "enum": [
              "manager",
              "developer",
              "viewer",
              "tester"
            ],
            "type": "string"
          }
        },
        "app_count": {
          "description": "The number of apps in the group",
          "type": "number"
        },
        "distribution_group": {
          "description": "The organization that owns the distribution group, if it exists",
          "type": "object",
          "properties": {
            "owner": {
              "description": "The information about the app's owner",
              "required": [
                "id",
                "display_name",
                "name",
                "type"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the owner",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the owner",
                  "type": "string"
                },
                "display_name": {
                  "description": "The owner's display name",
                  "type": "string"
                },
                "email": {
                  "description": "The owner's email address",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that used to identify the owner",
                  "type": "string"
                },
                "type": {
                  "description": "The owner type. Can either be 'org' or 'user'",
                  "enum": [
                    "org",
                    "user"
                  ],
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "AppRepoResponse": {
      "required": [
        "id",
        "app_id",
        "user_id",
        "repo_url"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the repository integration",
          "type": "string"
        },
        "app_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the app that this repository integration belongs to",
          "type": "string"
        },
        "repo_url": {
          "description": "The absolute URL of the repository",
          "type": "string"
        },
        "repo_provider": {
          "description": "The provider of the repository",
          "enum": [
            "github",
            "bitbucket",
            "vsts",
            "gitlab"
          ],
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user who configured the repository",
          "type": "string"
        },
        "installation_id": {
          "description": "Installation id from the provider",
          "type": "string"
        },
        "repo_id": {
          "description": "Repository id from the provider",
          "type": "string"
        },
        "external_user_id": {
          "description": "User id from the provider",
          "type": "string"
        },
        "service_connection_id": {
          "format": "uuid",
          "description": "The id of the service connection stored in customer credential store",
          "type": "string"
        }
      }
    },
    "BasicAppResponse": {
      "required": [
        "id",
        "display_name",
        "name",
        "os",
        "owner"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the app",
          "type": "string"
        },
        "description": {
          "description": "The description of the app",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the app",
          "type": "string"
        },
        "release_type": {
          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
          "type": "string"
        },
        "icon_url": {
          "description": "The string representation of the URL pointing to the app's icon",
          "type": "string"
        },
        "icon_source": {
          "description": "The string representation of the source of the app's icon",
          "type": "string"
        },
        "name": {
          "description": "The name of the app used in URLs",
          "type": "string"
        },
        "os": {
          "description": "The OS the app will be running on",
          "enum": [
            "Android",
            "iOS",
            "macOS",
            "Tizen",
            "tvOS",
            "Windows",
            "Linux",
            "Custom"
          ],
          "type": "string"
        },
        "owner": {
          "description": "The information about the app's owner",
          "required": [
            "id",
            "display_name",
            "name",
            "type"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique id (UUID) of the owner",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the owner",
              "type": "string"
            },
            "display_name": {
              "description": "The owner's display name",
              "type": "string"
            },
            "email": {
              "description": "The owner's email address",
              "type": "string"
            },
            "name": {
              "description": "The unique name that used to identify the owner",
              "type": "string"
            },
            "type": {
              "description": "The owner type. Can either be 'org' or 'user'",
              "enum": [
                "org",
                "user"
              ],
              "type": "string"
            }
          }
        }
      }
    },
    "AppResponse": {
      "required": [
        "app_secret",
        "platform",
        "origin"
      ],
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "name",
            "os",
            "owner"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID (UUID) of the app",
              "type": "string"
            },
            "description": {
              "description": "The description of the app",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the app",
              "type": "string"
            },
            "release_type": {
              "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
              "type": "string"
            },
            "icon_url": {
              "description": "The string representation of the URL pointing to the app's icon",
              "type": "string"
            },
            "icon_source": {
              "description": "The string representation of the source of the app's icon",
              "type": "string"
            },
            "name": {
              "description": "The name of the app used in URLs",
              "type": "string"
            },
            "os": {
              "description": "The OS the app will be running on",
              "enum": [
                "Android",
                "iOS",
                "macOS",
                "Tizen",
                "tvOS",
                "Windows",
                "Linux",
                "Custom"
              ],
              "type": "string"
            },
            "owner": {
              "description": "The information about the app's owner",
              "required": [
                "id",
                "display_name",
                "name",
                "type"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the owner",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the owner",
                  "type": "string"
                },
                "display_name": {
                  "description": "The owner's display name",
                  "type": "string"
                },
                "email": {
                  "description": "The owner's email address",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that used to identify the owner",
                  "type": "string"
                },
                "type": {
                  "description": "The owner type. Can either be 'org' or 'user'",
                  "enum": [
                    "org",
                    "user"
                  ],
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "properties": {
            "app_secret": {
              "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
              "type": "string"
            },
            "azure_subscription": {
              "required": [
                "subscription_id",
                "tenant_id",
                "subscription_name"
              ],
              "properties": {
                "subscription_id": {
                  "format": "uuid",
                  "description": "The azure subscription id",
                  "type": "string"
                },
                "tenant_id": {
                  "format": "uuid",
                  "description": "The tenant id of the azure subscription belongs to",
                  "type": "string"
                },
                "subscription_name": {
                  "description": "The name of the azure subscription",
                  "type": "string"
                },
                "is_billing": {
                  "description": "If the subscription is used for billing",
                  "type": "boolean"
                },
                "is_billable": {
                  "description": "If the subscription can be used for billing",
                  "type": "boolean"
                },
                "is_microsoft_internal": {
                  "description": "If the subscription is internal Microsoft subscription",
                  "type": "boolean"
                }
              }
            },
            "platform": {
              "description": "The platform of the app",
              "enum": [
                "Java",
                "Objective-C-Swift",
                "UWP",
                "Cordova",
                "React-Native",
                "Unity",
                "Electron",
                "Xamarin",
                "WPF",
                "WinForms",
                "Unknown",
                "Custom"
              ],
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this app",
              "enum": [
                "appcenter",
                "hockeyapp",
                "codepush"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The created date of this app",
              "type": "string"
            },
            "updated_at": {
              "description": "The last updated date of this app",
              "type": "string"
            },
            "member_permissions": {
              "description": "The permissions of the calling user",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "TesterAppResponse": {
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "name",
            "os",
            "owner"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID (UUID) of the app",
              "type": "string"
            },
            "description": {
              "description": "The description of the app",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the app",
              "type": "string"
            },
            "release_type": {
              "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
              "type": "string"
            },
            "icon_url": {
              "description": "The string representation of the URL pointing to the app's icon",
              "type": "string"
            },
            "icon_source": {
              "description": "The string representation of the source of the app's icon",
              "type": "string"
            },
            "name": {
              "description": "The name of the app used in URLs",
              "type": "string"
            },
            "os": {
              "description": "The OS the app will be running on",
              "enum": [
                "Android",
                "iOS",
                "macOS",
                "Tizen",
                "tvOS",
                "Windows",
                "Linux",
                "Custom"
              ],
              "type": "string"
            },
            "owner": {
              "description": "The information about the app's owner",
              "required": [
                "id",
                "display_name",
                "name",
                "type"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the owner",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the owner",
                  "type": "string"
                },
                "display_name": {
                  "description": "The owner's display name",
                  "type": "string"
                },
                "email": {
                  "description": "The owner's email address",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that used to identify the owner",
                  "type": "string"
                },
                "type": {
                  "description": "The owner type. Can either be 'org' or 'user'",
                  "enum": [
                    "org",
                    "user"
                  ],
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "properties": {
            "microsoft_internal": {
              "description": "it indicates if the app is microsoft internal",
              "type": "boolean"
            },
            "permissions": {
              "description": "The permissions associated with the app",
              "type": "array",
              "items": {
                "enum": [
                  "can_remove_from_app"
                ],
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "OrgDistributionGroupAppResponse": {
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "name",
            "os",
            "owner"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID (UUID) of the app",
              "type": "string"
            },
            "description": {
              "description": "The description of the app",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the app",
              "type": "string"
            },
            "release_type": {
              "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
              "type": "string"
            },
            "icon_url": {
              "description": "The string representation of the URL pointing to the app's icon",
              "type": "string"
            },
            "icon_source": {
              "description": "The string representation of the source of the app's icon",
              "type": "string"
            },
            "name": {
              "description": "The name of the app used in URLs",
              "type": "string"
            },
            "os": {
              "description": "The OS the app will be running on",
              "enum": [
                "Android",
                "iOS",
                "macOS",
                "Tizen",
                "tvOS",
                "Windows",
                "Linux",
                "Custom"
              ],
              "type": "string"
            },
            "owner": {
              "description": "The information about the app's owner",
              "required": [
                "id",
                "display_name",
                "name",
                "type"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the owner",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the owner",
                  "type": "string"
                },
                "display_name": {
                  "description": "The owner's display name",
                  "type": "string"
                },
                "email": {
                  "description": "The owner's email address",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that used to identify the owner",
                  "type": "string"
                },
                "type": {
                  "description": "The owner type. Can either be 'org' or 'user'",
                  "enum": [
                    "org",
                    "user"
                  ],
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "properties": {
            "platform": {
              "description": "The platform of the app",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this app",
              "type": "string"
            }
          }
        }
      ]
    },
    "AppResponseInternal": {
      "allOf": [
        {
          "required": [
            "app_secret",
            "platform",
            "origin"
          ],
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "name",
                "os",
                "owner"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID (UUID) of the app",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "icon_url": {
                  "description": "The string representation of the URL pointing to the app's icon",
                  "type": "string"
                },
                "icon_source": {
                  "description": "The string representation of the source of the app's icon",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "owner": {
                  "description": "The information about the app's owner",
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique id (UUID) of the owner",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The avatar URL of the owner",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The owner's display name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The owner's email address",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that used to identify the owner",
                      "type": "string"
                    },
                    "type": {
                      "description": "The owner type. Can either be 'org' or 'user'",
                      "enum": [
                        "org",
                        "user"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "app_secret": {
                  "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                  "type": "string"
                },
                "azure_subscription": {
                  "required": [
                    "subscription_id",
                    "tenant_id",
                    "subscription_name"
                  ],
                  "properties": {
                    "subscription_id": {
                      "format": "uuid",
                      "description": "The azure subscription id",
                      "type": "string"
                    },
                    "tenant_id": {
                      "format": "uuid",
                      "description": "The tenant id of the azure subscription belongs to",
                      "type": "string"
                    },
                    "subscription_name": {
                      "description": "The name of the azure subscription",
                      "type": "string"
                    },
                    "is_billing": {
                      "description": "If the subscription is used for billing",
                      "type": "boolean"
                    },
                    "is_billable": {
                      "description": "If the subscription can be used for billing",
                      "type": "boolean"
                    },
                    "is_microsoft_internal": {
                      "description": "If the subscription is internal Microsoft subscription",
                      "type": "boolean"
                    }
                  }
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Unity",
                    "Electron",
                    "Xamarin",
                    "WPF",
                    "WinForms",
                    "Unknown",
                    "Custom"
                  ],
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this app",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The created date of this app",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The last updated date of this app",
                  "type": "string"
                },
                "member_permissions": {
                  "description": "The permissions of the calling user",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        {
          "properties": {
            "feature_flags": {
              "description": "The feature flags that are enabled for this app",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "repositories": {
              "description": "The repositories associated with this app",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "repo_provider": {
                    "type": "string"
                  },
                  "repo_url": {
                    "type": "string"
                  }
                }
              }
            },
            "user_permissions": {
              "description": "the permissions for the specified app user",
              "type": "object",
              "properties": {
                "permissions": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                },
                "user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "cutover_from_hockeyapp_at": {
              "description": "The cutover date of this app",
              "type": "string"
            }
          }
        }
      ]
    },
    "AppUserPermissionResponse": {
      "required": [
        "app_id",
        "user_id",
        "user_email",
        "permissions",
        "app_origin",
        "app_secret"
      ],
      "properties": {
        "app_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the app",
          "type": "string"
        },
        "permissions": {
          "description": "The permissions the user has for the app",
          "type": "array",
          "items": {
            "enum": [
              "manager",
              "developer",
              "viewer",
              "tester"
            ],
            "type": "string"
          }
        },
        "user_email": {
          "description": "The email of the user",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "app_origin": {
          "description": "The creation origin of this app",
          "enum": [
            "appcenter",
            "codepush"
          ],
          "type": "string"
        },
        "app_secret": {
          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
          "type": "string"
        }
      }
    },
    "AppWithTeamPermissionsResponse": {
      "allOf": [
        {
          "required": [
            "app_secret",
            "platform",
            "origin"
          ],
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "name",
                "os",
                "owner"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID (UUID) of the app",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "icon_url": {
                  "description": "The string representation of the URL pointing to the app's icon",
                  "type": "string"
                },
                "icon_source": {
                  "description": "The string representation of the source of the app's icon",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "owner": {
                  "description": "The information about the app's owner",
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique id (UUID) of the owner",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The avatar URL of the owner",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The owner's display name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The owner's email address",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that used to identify the owner",
                      "type": "string"
                    },
                    "type": {
                      "description": "The owner type. Can either be 'org' or 'user'",
                      "enum": [
                        "org",
                        "user"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "app_secret": {
                  "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                  "type": "string"
                },
                "azure_subscription": {
                  "required": [
                    "subscription_id",
                    "tenant_id",
                    "subscription_name"
                  ],
                  "properties": {
                    "subscription_id": {
                      "format": "uuid",
                      "description": "The azure subscription id",
                      "type": "string"
                    },
                    "tenant_id": {
                      "format": "uuid",
                      "description": "The tenant id of the azure subscription belongs to",
                      "type": "string"
                    },
                    "subscription_name": {
                      "description": "The name of the azure subscription",
                      "type": "string"
                    },
                    "is_billing": {
                      "description": "If the subscription is used for billing",
                      "type": "boolean"
                    },
                    "is_billable": {
                      "description": "If the subscription can be used for billing",
                      "type": "boolean"
                    },
                    "is_microsoft_internal": {
                      "description": "If the subscription is internal Microsoft subscription",
                      "type": "boolean"
                    }
                  }
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Unity",
                    "Electron",
                    "Xamarin",
                    "WPF",
                    "WinForms",
                    "Unknown",
                    "Custom"
                  ],
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this app",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The created date of this app",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The last updated date of this app",
                  "type": "string"
                },
                "member_permissions": {
                  "description": "The permissions of the calling user",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        {
          "properties": {
            "team_permissions": {
              "description": "The permissions the team has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer"
                ],
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "OrgUserPermissionResponse": {
      "required": [
        "orgId",
        "userRole"
      ],
      "properties": {
        "orgId": {
          "format": "uuid",
          "description": "The unique id (UUID) of the org",
          "type": "string"
        },
        "userRole": {
          "description": "The user role for the org",
          "enum": [
            "admin",
            "collaborator"
          ],
          "type": "string"
        }
      }
    },
    "AzureSubscriptionResponse": {
      "required": [
        "subscription_id",
        "tenant_id",
        "subscription_name"
      ],
      "properties": {
        "subscription_id": {
          "format": "uuid",
          "description": "The azure subscription id",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "description": "The tenant id of the azure subscription belongs to",
          "type": "string"
        },
        "subscription_name": {
          "description": "The name of the azure subscription",
          "type": "string"
        },
        "is_billing": {
          "description": "If the subscription is used for billing",
          "type": "boolean"
        },
        "is_billable": {
          "description": "If the subscription can be used for billing",
          "type": "boolean"
        },
        "is_microsoft_internal": {
          "description": "If the subscription is internal Microsoft subscription",
          "type": "boolean"
        }
      }
    },
    "DistributionGroupResponse": {
      "required": [
        "id",
        "name",
        "origin",
        "is_public"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID of the distribution group",
          "type": "string"
        },
        "name": {
          "description": "The name of the distribution group used in URLs",
          "type": "string"
        },
        "display_name": {
          "description": "The name of the distribution group",
          "type": "string"
        },
        "origin": {
          "description": "The creation origin of this distribution group",
          "enum": [
            "appcenter",
            "hockeyapp"
          ],
          "type": "string"
        },
        "is_public": {
          "description": "Whether the distribution group is public",
          "type": "boolean"
        }
      }
    },
    "DistributionGroupPrivateResponse": {
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "origin",
            "is_public"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID of the distribution group",
              "type": "string"
            },
            "name": {
              "description": "The name of the distribution group used in URLs",
              "type": "string"
            },
            "display_name": {
              "description": "The name of the distribution group",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this distribution group",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "is_public": {
              "description": "Whether the distribution group is public",
              "type": "boolean"
            }
          }
        },
        {
          "properties": {
            "group_type": {
              "description": "Type of group",
              "enum": [
                "Default",
                "HockeyAppDefault",
                "MicrosoftDogfooding"
              ],
              "type": "string"
            }
          }
        }
      ]
    },
    "DistributionGroupDetailsResponse": {
      "required": [
        "is_shared",
        "users",
        "total_user_count",
        "notified_user_count",
        "total_apps_count"
      ],
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "origin",
            "is_public"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID of the distribution group",
              "type": "string"
            },
            "name": {
              "description": "The name of the distribution group used in URLs",
              "type": "string"
            },
            "display_name": {
              "description": "The name of the distribution group",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this distribution group",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "is_public": {
              "description": "Whether the distribution group is public",
              "type": "boolean"
            }
          }
        },
        {
          "properties": {
            "is_shared": {
              "description": "Whether the distribution group is shared group or not",
              "type": "boolean"
            },
            "total_apps_count": {
              "description": "The count of apps associated with this distribution group",
              "type": "number"
            },
            "total_user_count": {
              "description": "The count of users in the distribution group",
              "type": "number"
            },
            "notified_user_count": {
              "description": "The count of non-pending users in the distribution group who will be notified by new releases",
              "type": "number"
            },
            "group_type": {
              "description": "Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)",
              "enum": [
                "Default",
                "HockeyAppDefault",
                "MicrosoftDogfooding"
              ],
              "type": "string"
            },
            "users": {
              "description": "The distribution group users",
              "type": "array",
              "items": {
                "required": [
                  "email"
                ],
                "properties": {
                  "id": {
                    "format": "uuid",
                    "description": "The unique id (UUID) of the user",
                    "type": "string"
                  },
                  "avatar_url": {
                    "description": "The avatar URL of the user",
                    "type": "string"
                  },
                  "can_change_password": {
                    "description": "User is required to send an old password in order to change the password.",
                    "type": "boolean"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "invite_pending": {
                    "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "OrgDistributionGroupDetailsResponse": {
      "required": [
        "apps",
        "total_users_count",
        "total_apps_count"
      ],
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "origin",
            "is_public"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID of the distribution group",
              "type": "string"
            },
            "name": {
              "description": "The name of the distribution group used in URLs",
              "type": "string"
            },
            "display_name": {
              "description": "The name of the distribution group",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this distribution group",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "is_public": {
              "description": "Whether the distribution group is public",
              "type": "boolean"
            }
          }
        },
        {
          "properties": {
            "total_apps_count": {
              "description": "The count of apps associated with this distribution group",
              "type": "number"
            },
            "total_users_count": {
              "description": "The count of users in the distribution group",
              "type": "number"
            },
            "apps": {
              "description": "The apps associated with the distribution group",
              "type": "array",
              "items": {
                "required": [
                  "app_secret",
                  "platform",
                  "origin"
                ],
                "allOf": [
                  {
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "os",
                      "owner"
                    ],
                    "properties": {
                      "id": {
                        "format": "uuid",
                        "description": "The unique ID (UUID) of the app",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the app",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the app",
                        "type": "string"
                      },
                      "release_type": {
                        "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                        "type": "string"
                      },
                      "icon_url": {
                        "description": "The string representation of the URL pointing to the app's icon",
                        "type": "string"
                      },
                      "icon_source": {
                        "description": "The string representation of the source of the app's icon",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the app used in URLs",
                        "type": "string"
                      },
                      "os": {
                        "description": "The OS the app will be running on",
                        "enum": [
                          "Android",
                          "iOS",
                          "macOS",
                          "Tizen",
                          "tvOS",
                          "Windows",
                          "Linux",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "owner": {
                        "description": "The information about the app's owner",
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "type"
                        ],
                        "properties": {
                          "id": {
                            "format": "uuid",
                            "description": "The unique id (UUID) of the owner",
                            "type": "string"
                          },
                          "avatar_url": {
                            "description": "The avatar URL of the owner",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The owner's display name",
                            "type": "string"
                          },
                          "email": {
                            "description": "The owner's email address",
                            "type": "string"
                          },
                          "name": {
                            "description": "The unique name that used to identify the owner",
                            "type": "string"
                          },
                          "type": {
                            "description": "The owner type. Can either be 'org' or 'user'",
                            "enum": [
                              "org",
                              "user"
                            ],
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "properties": {
                      "app_secret": {
                        "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                        "type": "string"
                      },
                      "azure_subscription": {
                        "required": [
                          "subscription_id",
                          "tenant_id",
                          "subscription_name"
                        ],
                        "properties": {
                          "subscription_id": {
                            "format": "uuid",
                            "description": "The azure subscription id",
                            "type": "string"
                          },
                          "tenant_id": {
                            "format": "uuid",
                            "description": "The tenant id of the azure subscription belongs to",
                            "type": "string"
                          },
                          "subscription_name": {
                            "description": "The name of the azure subscription",
                            "type": "string"
                          },
                          "is_billing": {
                            "description": "If the subscription is used for billing",
                            "type": "boolean"
                          },
                          "is_billable": {
                            "description": "If the subscription can be used for billing",
                            "type": "boolean"
                          },
                          "is_microsoft_internal": {
                            "description": "If the subscription is internal Microsoft subscription",
                            "type": "boolean"
                          }
                        }
                      },
                      "platform": {
                        "description": "The platform of the app",
                        "enum": [
                          "Java",
                          "Objective-C-Swift",
                          "UWP",
                          "Cordova",
                          "React-Native",
                          "Unity",
                          "Electron",
                          "Xamarin",
                          "WPF",
                          "WinForms",
                          "Unknown",
                          "Custom"
                        ],
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this app",
                        "enum": [
                          "appcenter",
                          "hockeyapp",
                          "codepush"
                        ],
                        "type": "string"
                      },
                      "created_at": {
                        "description": "The created date of this app",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "The last updated date of this app",
                        "type": "string"
                      },
                      "member_permissions": {
                        "description": "The permissions of the calling user",
                        "type": "array",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "GeneralDistributionGroupDetailsResponse": {
      "required": [
        "is_shared"
      ],
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "origin",
            "is_public"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique ID of the distribution group",
              "type": "string"
            },
            "name": {
              "description": "The name of the distribution group used in URLs",
              "type": "string"
            },
            "display_name": {
              "description": "The name of the distribution group",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this distribution group",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "is_public": {
              "description": "Whether the distribution group is public",
              "type": "boolean"
            }
          }
        },
        {
          "properties": {
            "is_shared": {
              "description": "Whether the distribution group is shared group or not",
              "type": "boolean"
            },
            "owner_app_id": {
              "format": "uuid",
              "description": "If distribution group is owned by an app, this is the unique app ID",
              "type": "string"
            },
            "owner_org_id": {
              "format": "uuid",
              "description": "If distribution group is owned by an org, this is the unique org ID",
              "type": "string"
            }
          }
        }
      ]
    },
    "DistributionGroupUserDeleteResponse": {
      "required": [
        "status"
      ],
      "properties": {
        "code": {
          "description": "The code of the result",
          "type": "string"
        },
        "message": {
          "description": "The message of the result",
          "type": "integer"
        },
        "status": {
          "description": "The status code of the result",
          "type": "integer"
        },
        "user_email": {
          "description": "The email of the user",
          "type": "string"
        }
      }
    },
    "CloseAccountOrganizationResponse": {
      "required": [
        "display_name",
        "name",
        "origin",
        "collaborators_count"
      ],
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "name",
            "origin",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the organization.",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the organization",
              "type": "string"
            },
            "name": {
              "description": "The slug name of the organization",
              "type": "string"
            },
            "avatar_url": {
              "description": "The URL to a user-uploaded Avatar image",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this organization",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The creation date of this organization",
              "type": "string"
            },
            "updated_at": {
              "description": "The date the organization was last updated at",
              "type": "string"
            }
          }
        },
        {
          "properties": {
            "collaborators_count": {
              "description": "The number of collaborators from the organization",
              "type": "number"
            }
          }
        }
      ]
    },
    "DistributionGroupUserGetResponse": {
      "required": [
        "email"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the user",
          "type": "string"
        },
        "can_change_password": {
          "description": "User is required to send an old password in order to change the password.",
          "type": "boolean"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "invite_pending": {
          "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
          "type": "boolean"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        }
      }
    },
    "DistributionGroupUserPostResponse": {
      "required": [
        "status"
      ],
      "properties": {
        "code": {
          "description": "The code of the result",
          "type": "string"
        },
        "invite_pending": {
          "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
          "type": "boolean"
        },
        "message": {
          "description": "The message of the result",
          "type": "string"
        },
        "status": {
          "description": "The status code of the result",
          "type": "integer"
        },
        "user_email": {
          "description": "The email of the user",
          "type": "string"
        }
      }
    },
    "DistributionGroupTesterGetResponse": {
      "required": [
        "name",
        "email"
      ],
      "properties": {
        "display_name": {
          "description": "The full name of the tester. Might for example be first and last name",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the tester.",
          "type": "string"
        },
        "email": {
          "description": "The email address of the tester",
          "type": "string"
        }
      }
    },
    "DistributionGroupAADGroupPostResponse": {
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the AAD group.",
          "type": "string"
        },
        "aad_group_id": {
          "format": "uuid",
          "description": "The AAD unique id (UUID) of the AAD group.",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the AAD group",
          "type": "string"
        }
      }
    },
    "DistributionGroupAADGroupResponse": {
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the AAD group.",
          "type": "string"
        },
        "aad_group_id": {
          "format": "uuid",
          "description": "The AAD unique id (UUID) of the AAD group.",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the AAD group",
          "type": "string"
        },
        "is_aad_group": {
          "type": "boolean"
        },
        "distribution_group_name": {
          "description": "The distribution group of the AAD group",
          "type": "string"
        }
      }
    },
    "DistributionGroupAadGroupsDeleteResponse": {
      "required": [
        "status"
      ],
      "properties": {
        "code": {
          "description": "The code of the result",
          "type": "string"
        },
        "message": {
          "description": "The message of the result",
          "type": "integer"
        },
        "status": {
          "description": "The status code of the result",
          "type": "integer"
        },
        "aad_group_id": {
          "format": "uuid",
          "description": "The aad id of the group",
          "type": "string"
        }
      }
    },
    "DistributionGroupWithUsersResponse": {
      "required": [
        "id",
        "name",
        "users",
        "total_user_count",
        "notified_user_count"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID of the distribution group",
          "type": "string"
        },
        "name": {
          "description": "The name of the distribution group used in URLs",
          "type": "string"
        },
        "total_user_count": {
          "description": "The count of users in the distribution group",
          "type": "number"
        },
        "total_groups_count": {
          "description": "The count of aad groups in the distribution group",
          "type": "number"
        },
        "notified_user_count": {
          "description": "The count of non-pending users in the distribution group who will be notified by new releases",
          "type": "number"
        },
        "is_public": {
          "description": "Whether the distribution group is public",
          "type": "boolean"
        },
        "users": {
          "description": "The distribution group users",
          "type": "array",
          "items": {
            "required": [
              "email"
            ],
            "properties": {
              "id": {
                "format": "uuid",
                "description": "The unique id (UUID) of the user",
                "type": "string"
              },
              "avatar_url": {
                "description": "The avatar URL of the user",
                "type": "string"
              },
              "can_change_password": {
                "description": "User is required to send an old password in order to change the password.",
                "type": "boolean"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user",
                "type": "string"
              },
              "invite_pending": {
                "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                "type": "boolean"
              },
              "name": {
                "description": "The unique name that is used to identify the user.",
                "type": "string"
              }
            }
          }
        },
        "aad_groups": {
          "description": "The distribution group aad groups",
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "format": "uuid",
                "description": "The internal unique id (UUID) of the AAD group.",
                "type": "string"
              },
              "aad_group_id": {
                "format": "uuid",
                "description": "The AAD unique id (UUID) of the AAD group.",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the AAD group",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "FeatureFlagsResponse": {
      "required": [
        "feature_flags"
      ],
      "properties": {
        "feature_flags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FeatureResponse": {
      "required": [
        "name",
        "display_name",
        "state"
      ],
      "properties": {
        "description": {
          "description": "The description of the feature",
          "type": "string"
        },
        "display_name": {
          "description": "The friendly name of the feature",
          "type": "string"
        },
        "name": {
          "description": "The unique name of the feature",
          "type": "string"
        },
        "state": {
          "description": "The state (unset, enabled, disabled) of the feature",
          "type": "integer"
        },
        "created_at": {
          "description": "The creation date of the feature",
          "type": "string"
        },
        "updated_at": {
          "description": "The date the feature was last updated at",
          "type": "string"
        }
      }
    },
    "GlobalFeatureFlagsResponse": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "description": "The dictionary of global state values indexed by feature flag names",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "InternalUserSignupResponse": {
      "required": [
        "id",
        "display_name",
        "email",
        "name"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "external_provider": {
          "description": "The name of the external auth provider",
          "type": "string"
        },
        "external_user_id": {
          "description": "The user ID given by the external provider",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "status": {
          "description": "The current status of the user record after signup",
          "enum": [
            "Complete",
            "NeedsVerification"
          ],
          "type": "string"
        }
      }
    },
    "InvitationDetailResponse": {
      "required": [
        "invited_by",
        "invitation_id"
      ],
      "properties": {
        "invitation_id": {
          "format": "uuid",
          "description": "The id of the invitation",
          "type": "string"
        },
        "invited_by": {
          "required": [
            "id",
            "display_name",
            "email",
            "name",
            "origin"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique id (UUID) of the user",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the user",
              "type": "string"
            },
            "can_change_password": {
              "description": "User is required to send an old password in order to change the password.",
              "type": "boolean"
            },
            "display_name": {
              "description": "The full name of the user. Might for example be first and last name",
              "type": "string"
            },
            "email": {
              "description": "The email address of the user",
              "type": "string"
            },
            "name": {
              "description": "The unique name that is used to identify the user.",
              "type": "string"
            },
            "permissions": {
              "description": "The permissions the user has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            },
            "origin": {
              "description": "The creation origin of this user",
              "enum": [
                "appcenter",
                "hockeyapp",
                "codepush"
              ],
              "type": "string"
            }
          }
        },
        "organization": {
          "required": [
            "id",
            "display_name",
            "name",
            "origin",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the organization.",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the organization",
              "type": "string"
            },
            "name": {
              "description": "The slug name of the organization",
              "type": "string"
            },
            "avatar_url": {
              "description": "The URL to a user-uploaded Avatar image",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this organization",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The creation date of this organization",
              "type": "string"
            },
            "updated_at": {
              "description": "The date the organization was last updated at",
              "type": "string"
            }
          }
        },
        "app": {
          "required": [
            "app_secret",
            "platform",
            "origin"
          ],
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "name",
                "os",
                "owner"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID (UUID) of the app",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "icon_url": {
                  "description": "The string representation of the URL pointing to the app's icon",
                  "type": "string"
                },
                "icon_source": {
                  "description": "The string representation of the source of the app's icon",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "owner": {
                  "description": "The information about the app's owner",
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique id (UUID) of the owner",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The avatar URL of the owner",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The owner's display name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The owner's email address",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that used to identify the owner",
                      "type": "string"
                    },
                    "type": {
                      "description": "The owner type. Can either be 'org' or 'user'",
                      "enum": [
                        "org",
                        "user"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "app_secret": {
                  "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                  "type": "string"
                },
                "azure_subscription": {
                  "required": [
                    "subscription_id",
                    "tenant_id",
                    "subscription_name"
                  ],
                  "properties": {
                    "subscription_id": {
                      "format": "uuid",
                      "description": "The azure subscription id",
                      "type": "string"
                    },
                    "tenant_id": {
                      "format": "uuid",
                      "description": "The tenant id of the azure subscription belongs to",
                      "type": "string"
                    },
                    "subscription_name": {
                      "description": "The name of the azure subscription",
                      "type": "string"
                    },
                    "is_billing": {
                      "description": "If the subscription is used for billing",
                      "type": "boolean"
                    },
                    "is_billable": {
                      "description": "If the subscription can be used for billing",
                      "type": "boolean"
                    },
                    "is_microsoft_internal": {
                      "description": "If the subscription is internal Microsoft subscription",
                      "type": "boolean"
                    }
                  }
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Unity",
                    "Electron",
                    "Xamarin",
                    "WPF",
                    "WinForms",
                    "Unknown",
                    "Custom"
                  ],
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this app",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The created date of this app",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The last updated date of this app",
                  "type": "string"
                },
                "member_permissions": {
                  "description": "The permissions of the calling user",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "GDPRInvitationDetailResponse": {
      "required": [
        "invitation_id"
      ],
      "properties": {
        "invitation_id": {
          "format": "uuid",
          "description": "The id of the invitation",
          "type": "string"
        },
        "organization": {
          "required": [
            "id",
            "display_name",
            "name",
            "origin",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the organization.",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the organization",
              "type": "string"
            },
            "name": {
              "description": "The slug name of the organization",
              "type": "string"
            },
            "avatar_url": {
              "description": "The URL to a user-uploaded Avatar image",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this organization",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The creation date of this organization",
              "type": "string"
            },
            "updated_at": {
              "description": "The date the organization was last updated at",
              "type": "string"
            }
          }
        },
        "app": {
          "required": [
            "app_secret",
            "platform",
            "origin"
          ],
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "name",
                "os",
                "owner"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique ID (UUID) of the app",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the app",
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                },
                "icon_url": {
                  "description": "The string representation of the URL pointing to the app's icon",
                  "type": "string"
                },
                "icon_source": {
                  "description": "The string representation of the source of the app's icon",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "owner": {
                  "description": "The information about the app's owner",
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "description": "The unique id (UUID) of the owner",
                      "type": "string"
                    },
                    "avatar_url": {
                      "description": "The avatar URL of the owner",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The owner's display name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The owner's email address",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that used to identify the owner",
                      "type": "string"
                    },
                    "type": {
                      "description": "The owner type. Can either be 'org' or 'user'",
                      "enum": [
                        "org",
                        "user"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "app_secret": {
                  "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                  "type": "string"
                },
                "azure_subscription": {
                  "required": [
                    "subscription_id",
                    "tenant_id",
                    "subscription_name"
                  ],
                  "properties": {
                    "subscription_id": {
                      "format": "uuid",
                      "description": "The azure subscription id",
                      "type": "string"
                    },
                    "tenant_id": {
                      "format": "uuid",
                      "description": "The tenant id of the azure subscription belongs to",
                      "type": "string"
                    },
                    "subscription_name": {
                      "description": "The name of the azure subscription",
                      "type": "string"
                    },
                    "is_billing": {
                      "description": "If the subscription is used for billing",
                      "type": "boolean"
                    },
                    "is_billable": {
                      "description": "If the subscription can be used for billing",
                      "type": "boolean"
                    },
                    "is_microsoft_internal": {
                      "description": "If the subscription is internal Microsoft subscription",
                      "type": "boolean"
                    }
                  }
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Unity",
                    "Electron",
                    "Xamarin",
                    "WPF",
                    "WinForms",
                    "Unknown",
                    "Custom"
                  ],
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this app",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The created date of this app",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The last updated date of this app",
                  "type": "string"
                },
                "member_permissions": {
                  "description": "The permissions of the calling user",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "OrgNameAvailabilityResponse": {
      "required": [
        "available",
        "name"
      ],
      "properties": {
        "available": {
          "description": "The availability status of the requested org name",
          "type": "boolean"
        },
        "name": {
          "description": "The generated org name",
          "type": "string"
        }
      }
    },
    "OrganizationInvitationDetailResponse": {
      "required": [
        "id",
        "email",
        "is_existing_user",
        "invited_by",
        "organization"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the invitation",
          "type": "string"
        },
        "organization": {
          "required": [
            "id",
            "display_name",
            "name",
            "origin",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the organization.",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the organization",
              "type": "string"
            },
            "name": {
              "description": "The slug name of the organization",
              "type": "string"
            },
            "avatar_url": {
              "description": "The URL to a user-uploaded Avatar image",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this organization",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The creation date of this organization",
              "type": "string"
            },
            "updated_at": {
              "description": "The date the organization was last updated at",
              "type": "string"
            }
          }
        },
        "email": {
          "description": "The email address of the invited user",
          "type": "string"
        },
        "invited_by": {
          "required": [
            "id",
            "display_name",
            "email",
            "name",
            "origin"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique id (UUID) of the user",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the user",
              "type": "string"
            },
            "can_change_password": {
              "description": "User is required to send an old password in order to change the password.",
              "type": "boolean"
            },
            "display_name": {
              "description": "The full name of the user. Might for example be first and last name",
              "type": "string"
            },
            "email": {
              "description": "The email address of the user",
              "type": "string"
            },
            "name": {
              "description": "The unique name that is used to identify the user.",
              "type": "string"
            },
            "permissions": {
              "description": "The permissions the user has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            },
            "origin": {
              "description": "The creation origin of this user",
              "enum": [
                "appcenter",
                "hockeyapp",
                "codepush"
              ],
              "type": "string"
            }
          }
        },
        "is_existing_user": {
          "description": "Indicates whether the invited user already exists",
          "type": "boolean"
        },
        "role": {
          "description": "The role assigned to the invited user",
          "type": "string"
        }
      }
    },
    "OrganizationInvitationSimpleDetailResponse": {
      "required": [
        "id",
        "email",
        "role"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the invitation",
          "type": "string"
        },
        "email": {
          "description": "The email address of the invited user",
          "type": "string"
        },
        "role": {
          "description": "The role assigned to the invited user",
          "type": "string"
        }
      }
    },
    "AdministeredOrgsResponse": {
      "required": [
        "organizations"
      ],
      "type": "object",
      "properties": {
        "organizations": {
          "required": [
            "id",
            "display_name",
            "name",
            "origin",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the organization.",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the organization",
              "type": "string"
            },
            "name": {
              "description": "The slug name of the organization",
              "type": "string"
            },
            "avatar_url": {
              "description": "The URL to a user-uploaded Avatar image",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this organization",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The creation date of this organization",
              "type": "string"
            },
            "updated_at": {
              "description": "The date the organization was last updated at",
              "type": "string"
            }
          }
        }
      }
    },
    "OrganizationResponse": {
      "required": [
        "id",
        "display_name",
        "name",
        "origin",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the organization.",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the organization",
          "type": "string"
        },
        "name": {
          "description": "The slug name of the organization",
          "type": "string"
        },
        "avatar_url": {
          "description": "The URL to a user-uploaded Avatar image",
          "type": "string"
        },
        "origin": {
          "description": "The creation origin of this organization",
          "enum": [
            "appcenter",
            "hockeyapp"
          ],
          "type": "string"
        },
        "created_at": {
          "description": "The creation date of this organization",
          "type": "string"
        },
        "updated_at": {
          "description": "The date the organization was last updated at",
          "type": "string"
        }
      }
    },
    "OrganizationResponseInternal": {
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "name",
            "origin",
            "created_at",
            "updated_at"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the organization.",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the organization",
              "type": "string"
            },
            "name": {
              "description": "The slug name of the organization",
              "type": "string"
            },
            "avatar_url": {
              "description": "The URL to a user-uploaded Avatar image",
              "type": "string"
            },
            "origin": {
              "description": "The creation origin of this organization",
              "enum": [
                "appcenter",
                "hockeyapp"
              ],
              "type": "string"
            },
            "created_at": {
              "description": "The creation date of this organization",
              "type": "string"
            },
            "updated_at": {
              "description": "The date the organization was last updated at",
              "type": "string"
            }
          }
        },
        {
          "properties": {
            "feature_flags": {
              "description": "The feature flags that are enabled for this organization",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "OrganizationResponseManagement": {
      "allOf": [
        {
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "name",
                "origin",
                "created_at",
                "updated_at"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The internal unique id (UUID) of the organization.",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the organization",
                  "type": "string"
                },
                "name": {
                  "description": "The slug name of the organization",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The URL to a user-uploaded Avatar image",
                  "type": "string"
                },
                "origin": {
                  "description": "The creation origin of this organization",
                  "enum": [
                    "appcenter",
                    "hockeyapp"
                  ],
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of this organization",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The date the organization was last updated at",
                  "type": "string"
                }
              }
            },
            {
              "properties": {
                "feature_flags": {
                  "description": "The feature flags that are enabled for this organization",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        {
          "properties": {
            "email": {
              "description": "The organization email, if the app was synced from HockeyApp",
              "type": "string"
            },
            "created_at": {
              "description": "The date when the organization was created",
              "type": "string"
            },
            "updated_at": {
              "description": "The date when the organization was updated",
              "type": "string"
            }
          }
        }
      ]
    },
    "OrganizationUserResponse": {
      "required": [
        "display_name",
        "email",
        "joined_at",
        "name",
        "role"
      ],
      "properties": {
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "joined_at": {
          "description": "The date when the user joined the organization",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "role": {
          "description": "The role the user has within the organization",
          "type": "string"
        }
      }
    },
    "TeamAppUpdateRequest": {
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "description": "The permissions all members of the team have on the app",
          "type": "array",
          "items": {
            "enum": [
              "manager",
              "developer",
              "viewer"
            ],
            "type": "string"
          }
        }
      }
    },
    "TeamRequest": {
      "required": [
        "display_name"
      ],
      "properties": {
        "display_name": {
          "description": "The display name of the team",
          "type": "string"
        },
        "name": {
          "description": "The name of the team",
          "type": "string"
        },
        "description": {
          "description": "The description of the team",
          "type": "string"
        }
      }
    },
    "TeamUpdateRequest": {
      "required": [
        "display_name"
      ],
      "properties": {
        "display_name": {
          "description": "The new display name of the team",
          "type": "string"
        }
      }
    },
    "TeamResponse": {
      "required": [
        "id",
        "name",
        "display_name"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The internal unique id (UUID) of the team.",
          "type": "string"
        },
        "name": {
          "description": "The name of the team",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the team",
          "type": "string"
        },
        "description": {
          "description": "The description of the team",
          "type": "string"
        }
      }
    },
    "TeamAppResponse": {
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "display_name"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The internal unique id (UUID) of the team.",
              "type": "string"
            },
            "name": {
              "description": "The name of the team",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the team",
              "type": "string"
            },
            "description": {
              "description": "The description of the team",
              "type": "string"
            }
          }
        },
        {
          "properties": {
            "permissions": {
              "description": "The permissions the team has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "StatusResponse": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "PurgeResponse": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "ServiceBusStatusResponse": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "required": [
              "name",
              "message_count"
            ],
            "properties": {
              "name": {
                "description": "The name of the subsciption (prefixed with the topic name)",
                "type": "string"
              },
              "message_count": {
                "description": "The number of messages in the subscription",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "SubscriptionMetrics": {
      "required": [
        "name",
        "message_count"
      ],
      "properties": {
        "name": {
          "description": "The name of the subsciption (prefixed with the topic name)",
          "type": "string"
        },
        "message_count": {
          "description": "The number of messages in the subscription",
          "type": "number"
        }
      }
    },
    "TeamUserResponse": {
      "required": [
        "email",
        "display_name",
        "name",
        "role"
      ],
      "properties": {
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "role": {
          "description": "The role of the user has within the team",
          "enum": [
            "maintainer",
            "collaborator"
          ]
        }
      }
    },
    "UserAuthResponse": {
      "required": [
        "id",
        "display_name",
        "email",
        "name",
        "origin"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "external_provider": {
          "description": "The name of the external auth provider",
          "type": "string"
        },
        "external_user_id": {
          "description": "The user ID given by the external provider",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user",
          "type": "string"
        },
        "origin": {
          "description": "The creation origin of this user",
          "enum": [
            "appcenter",
            "hockeyapp",
            "codepush"
          ],
          "type": "string"
        }
      }
    },
    "UserLiteProfileResponse": {
      "required": [
        "id",
        "display_name",
        "email"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        }
      }
    },
    "UserNameAvailabilityResponse": {
      "required": [
        "available",
        "name"
      ],
      "properties": {
        "available": {
          "description": "The availability status of the requested user name",
          "type": "boolean"
        },
        "name": {
          "description": "The requested user name",
          "type": "string"
        }
      }
    },
    "AppIntegration": {
      "required": [
        "app_id",
        "state",
        "provider"
      ],
      "properties": {
        "app_id": {
          "format": "uuid",
          "description": "app id",
          "type": "string"
        },
        "state": {
          "description": "integration state",
          "type": "string"
        },
        "provider": {
          "description": "provider type",
          "type": "string"
        }
      }
    },
    "AppIntegrationResponse": {
      "required": [
        "app_id"
      ],
      "properties": {
        "app_id": {
          "format": "uuid",
          "description": "app id",
          "type": "string"
        }
      }
    },
    "AppMembershipsResponse": {
      "properties": {
        "app_origin": {
          "description": "The app's origin",
          "type": "string"
        },
        "memberships": {
          "description": "An array of all ways a user has access to the app, based on the app_memberships table.",
          "type": "array",
          "items": {
            "properties": {
              "app_id": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "origin": {
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush",
                  "testcloud",
                  "hockeyapp-dogfood"
                ],
                "type": "string"
              },
              "source_type": {
                "enum": [
                  "user",
                  "org",
                  "distribution_group",
                  "team",
                  "release"
                ],
                "type": "string"
              },
              "source_id": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "AppMembership": {
      "properties": {
        "app_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "origin": {
          "enum": [
            "appcenter",
            "hockeyapp",
            "codepush",
            "testcloud",
            "hockeyapp-dogfood"
          ],
          "type": "string"
        },
        "source_type": {
          "enum": [
            "user",
            "org",
            "distribution_group",
            "team",
            "release"
          ],
          "type": "string"
        },
        "source_id": {
          "type": "string"
        }
      }
    },
    "AppMembershipsValidationResponse": {
      "properties": {
        "excess_app_memberships": {
          "properties": {
            "app_users_memberships": {
              "type": "array",
              "items": {
                "properties": {
                  "app_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "origin": {
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush",
                      "testcloud",
                      "hockeyapp-dogfood"
                    ],
                    "type": "string"
                  },
                  "source_type": {
                    "enum": [
                      "user",
                      "org",
                      "distribution_group",
                      "team",
                      "release"
                    ],
                    "type": "string"
                  },
                  "source_id": {
                    "type": "string"
                  }
                }
              }
            },
            "distribution_group_memberships": {
              "type": "array",
              "items": {
                "properties": {
                  "app_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "origin": {
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush",
                      "testcloud",
                      "hockeyapp-dogfood"
                    ],
                    "type": "string"
                  },
                  "source_type": {
                    "enum": [
                      "user",
                      "org",
                      "distribution_group",
                      "team",
                      "release"
                    ],
                    "type": "string"
                  },
                  "source_id": {
                    "type": "string"
                  }
                }
              }
            },
            "organization_admin_memberships": {
              "type": "array",
              "items": {
                "properties": {
                  "app_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "origin": {
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush",
                      "testcloud",
                      "hockeyapp-dogfood"
                    ],
                    "type": "string"
                  },
                  "source_type": {
                    "enum": [
                      "user",
                      "org",
                      "distribution_group",
                      "team",
                      "release"
                    ],
                    "type": "string"
                  },
                  "source_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "app_users_with_missing_memberships": {
          "type": "array",
          "items": {
            "properties": {
              "app_id": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "origin": {
                "type": "string"
              }
            }
          }
        },
        "distribution_group_users_with_missing_memberships": {
          "type": "array",
          "items": {
            "properties": {
              "distribution_group_id": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "origin": {
                "type": "string"
              }
            }
          }
        },
        "organization_admins_with_missing_memberships": {
          "type": "array",
          "items": {
            "properties": {
              "organization_id": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "role": {
                "type": "string"
              },
              "origin": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "UserProfileResponse": {
      "required": [
        "id",
        "display_name",
        "email",
        "name",
        "origin"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the user",
          "type": "string"
        },
        "can_change_password": {
          "description": "User is required to send an old password in order to change the password.",
          "type": "boolean"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "permissions": {
          "description": "The permissions the user has for the app",
          "type": "array",
          "items": {
            "enum": [
              "manager",
              "developer",
              "viewer",
              "tester"
            ],
            "type": "string"
          }
        },
        "origin": {
          "description": "The creation origin of this user",
          "enum": [
            "appcenter",
            "hockeyapp",
            "codepush"
          ],
          "type": "string"
        }
      }
    },
    "UserProfileAdminResponse": {
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "email",
            "name",
            "origin"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique id (UUID) of the user",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the user",
              "type": "string"
            },
            "can_change_password": {
              "description": "User is required to send an old password in order to change the password.",
              "type": "boolean"
            },
            "display_name": {
              "description": "The full name of the user. Might for example be first and last name",
              "type": "string"
            },
            "email": {
              "description": "The email address of the user",
              "type": "string"
            },
            "name": {
              "description": "The unique name that is used to identify the user.",
              "type": "string"
            },
            "permissions": {
              "description": "The permissions the user has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            },
            "origin": {
              "description": "The creation origin of this user",
              "enum": [
                "appcenter",
                "hockeyapp",
                "codepush"
              ],
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "role": {
              "description": "The user's role in the organization",
              "enum": [
                "admin",
                "collaborator",
                "member"
              ],
              "type": "string"
            }
          }
        }
      ]
    },
    "UserProfileResponseInternal": {
      "allOf": [
        {
          "required": [
            "id",
            "display_name",
            "email",
            "name",
            "origin"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The unique id (UUID) of the user",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the user",
              "type": "string"
            },
            "can_change_password": {
              "description": "User is required to send an old password in order to change the password.",
              "type": "boolean"
            },
            "display_name": {
              "description": "The full name of the user. Might for example be first and last name",
              "type": "string"
            },
            "email": {
              "description": "The email address of the user",
              "type": "string"
            },
            "name": {
              "description": "The unique name that is used to identify the user.",
              "type": "string"
            },
            "permissions": {
              "description": "The permissions the user has for the app",
              "type": "array",
              "items": {
                "enum": [
                  "manager",
                  "developer",
                  "viewer",
                  "tester"
                ],
                "type": "string"
              }
            },
            "origin": {
              "description": "The creation origin of this user",
              "enum": [
                "appcenter",
                "hockeyapp",
                "codepush"
              ],
              "type": "string"
            }
          }
        },
        {
          "properties": {
            "feature_flags": {
              "description": "The feature flags that are enabled for this app",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "admin_role": {
              "description": "The new admin_role",
              "enum": [
                "superAdmin",
                "admin",
                "devOps",
                "customerSupport",
                "notAdmin"
              ],
              "type": "string"
            },
            "settings": {
              "description": "The user's settings",
              "properties": {
                "marketing_opt_in": {
                  "description": "The marketing opt-in setting",
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "UserProfileResponseManagement": {
      "allOf": [
        {
          "allOf": [
            {
              "required": [
                "id",
                "display_name",
                "email",
                "name",
                "origin"
              ],
              "properties": {
                "id": {
                  "format": "uuid",
                  "description": "The unique id (UUID) of the user",
                  "type": "string"
                },
                "avatar_url": {
                  "description": "The avatar URL of the user",
                  "type": "string"
                },
                "can_change_password": {
                  "description": "User is required to send an old password in order to change the password.",
                  "type": "boolean"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                },
                "permissions": {
                  "description": "The permissions the user has for the app",
                  "type": "array",
                  "items": {
                    "enum": [
                      "manager",
                      "developer",
                      "viewer",
                      "tester"
                    ],
                    "type": "string"
                  }
                },
                "origin": {
                  "description": "The creation origin of this user",
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush"
                  ],
                  "type": "string"
                }
              }
            },
            {
              "properties": {
                "feature_flags": {
                  "description": "The feature flags that are enabled for this app",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "admin_role": {
                  "description": "The new admin_role",
                  "enum": [
                    "superAdmin",
                    "admin",
                    "devOps",
                    "customerSupport",
                    "notAdmin"
                  ],
                  "type": "string"
                },
                "settings": {
                  "description": "The user's settings",
                  "properties": {
                    "marketing_opt_in": {
                      "description": "The marketing opt-in setting",
                      "type": "string"
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "properties": {
            "updated_at": {
              "description": "The date when the app was last updated",
              "type": "string"
            },
            "verified": {
              "description": "A boolean flag that indicates if the user is already verified",
              "type": "boolean"
            },
            "identity_providers": {
              "description": "The identity providers associated with the user's account",
              "type": "array",
              "items": {
                "properties": {
                  "provider_name": {
                    "description": "The name of the identity provider type",
                    "enum": [
                      "github",
                      "aad",
                      "facebook",
                      "google"
                    ],
                    "type": "string"
                  },
                  "origin": {
                    "description": "Whether the identity provider originated in HockeyApp or App Center",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "UserSettingResponse": {
      "description": "A user's setting",
      "properties": {
        "marketing_opt_in": {
          "description": "The marketing opt-in setting",
          "type": "string"
        }
      }
    },
    "Owner": {
      "description": "The information about the app's owner",
      "required": [
        "id",
        "display_name",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the owner",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the owner",
          "type": "string"
        },
        "display_name": {
          "description": "The owner's display name",
          "type": "string"
        },
        "email": {
          "description": "The owner's email address",
          "type": "string"
        },
        "name": {
          "description": "The unique name that used to identify the owner",
          "type": "string"
        },
        "type": {
          "description": "The owner type. Can either be 'org' or 'user'",
          "enum": [
            "org",
            "user"
          ],
          "type": "string"
        }
      }
    },
    "AADGroup": {
      "required": [
        "aad_group_id",
        "tenant_id",
        "display_name"
      ],
      "properties": {
        "aad_group_id": {
          "format": "uuid",
          "description": "The id of the aad group",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "description": "The id of the aad tenant",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the aad group",
          "type": "string"
        }
      }
    },
    "AADUser": {
      "description": "an AAD user's id and tenant id",
      "required": [
        "object_id",
        "tenant_id"
      ],
      "properties": {
        "object_id": {
          "format": "uuid",
          "description": "the aad user's id",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "description": "the aad user's tenant id",
          "type": "string"
        }
      }
    },
    "MSAUser": {
      "description": "an MSA user's hex CID",
      "required": [
        "hexcid"
      ],
      "properties": {
        "hexcid": {
          "description": "the user's CID",
          "type": "string"
        }
      }
    },
    "LinkAADtoUserRequest": {
      "required": [
        "aad_tenant_ids"
      ],
      "properties": {
        "aad_tenant_ids": {
          "description": "An array of AAD tenant data needed to link the user to the tenants",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "role": {
          "description": "The role of the user to be added",
          "enum": [
            "admin",
            "collaborator",
            "member"
          ],
          "type": "string"
        }
      }
    },
    "AddUserAsRoleRequest": {
      "properties": {
        "role": {
          "description": "The role of the user to be added",
          "enum": [
            "admin",
            "collaborator",
            "member"
          ],
          "type": "string"
        }
      }
    },
    "OrganizationAadGroupPatchRequest": {
      "properties": {
        "role": {
          "description": "The user's role in the organizatiion",
          "enum": [
            "admin",
            "collaborator",
            "member"
          ],
          "type": "string"
        }
      }
    },
    "AddAADGroupResponse": {
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique ID (UUID) of the aad group",
          "type": "string"
        }
      }
    },
    "SharedConnectionPatchRequest": {
      "description": "Shared connection patch request",
      "required": [
        "data"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name of the shared connection",
          "type": "string"
        },
        "data": {
          "description": "Represents the data for connecting to service",
          "type": "object"
        }
      }
    },
    "SharedConnectionRequest": {
      "description": "SharedConnectionRequest",
      "required": [
        "serviceType"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "display name of shared connection",
          "type": "string"
        },
        "serviceType": {
          "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
          "enum": [
            "apple",
            "jira",
            "googleplay",
            "gitlab"
          ],
          "type": "string"
        },
        "credentialType": {
          "description": "credential type of the shared connection. Values can be credentials|certificate",
          "default": "credentials",
          "enum": [
            "credentials",
            "certificate"
          ],
          "type": "string"
        }
      },
      "discriminator": "serviceType"
    },
    "SharedConnectionResponse": {
      "description": "SharedConnectionResponse",
      "required": [
        "id",
        "serviceType",
        "credentialType"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "id of the shared connection",
          "type": "string"
        },
        "displayName": {
          "description": "display name of shared connection",
          "type": "string"
        },
        "serviceType": {
          "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
          "enum": [
            "apple",
            "jira",
            "googleplay",
            "gitlab"
          ],
          "type": "string"
        },
        "credentialType": {
          "description": "the type of the credential",
          "enum": [
            "credentials",
            "certificate"
          ],
          "type": "string"
        },
        "isValid": {
          "description": "whether the credentials are valid or not",
          "type": "boolean"
        },
        "is2FA": {
          "description": "if the account is a 2FA account or not",
          "type": "boolean"
        }
      },
      "discriminator": "serviceType"
    },
    "PrivateSharedConnectionResponse": {
      "description": "PrivateSharedConnectionResponse",
      "required": [
        "id",
        "serviceType"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "id of the shared connection",
          "type": "string"
        },
        "displayName": {
          "description": "display name of shared connection",
          "type": "string"
        },
        "serviceType": {
          "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
          "enum": [
            "apple",
            "jira",
            "googleplay",
            "gitlab"
          ],
          "type": "string"
        },
        "isValid": {
          "description": "whether the credentials are valid or not",
          "type": "boolean"
        },
        "is2FA": {
          "description": "if the account is a 2FA account or not",
          "type": "boolean"
        }
      },
      "discriminator": "serviceType"
    },
    "AppleConnectionSecretRequest": {
      "description": "Apple connection secrets",
      "allOf": [
        {
          "description": "SharedConnectionRequest",
          "required": [
            "serviceType"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "credential type of the shared connection. Values can be credentials|certificate",
              "default": "credentials",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "discriminator": "credentialType",
      "x-ms-discriminator-value": "apple"
    },
    "AppleCredentialsMultifactorSecretRequest": {
      "description": "Apple connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Apple connection secrets",
          "allOf": [
            {
              "description": "SharedConnectionRequest",
              "required": [
                "serviceType"
              ],
              "type": "object",
              "properties": {
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "credential type of the shared connection. Values can be credentials|certificate",
                  "default": "credentials",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "apple secret details",
          "required": [
            "username",
            "password",
            "authCode"
          ],
          "type": "object",
          "properties": {
            "username": {
              "description": "username to connect to apple store.",
              "type": "string"
            },
            "password": {
              "description": "password to connect to apple store.",
              "type": "string"
            },
            "authCode": {
              "description": "The 6 digit Apple OTP for Multifactor accounts",
              "type": "string"
            },
            "appSpecificPassword": {
              "description": "The app specific password required for app publishing for 2FA accounts",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "credentials"
    },
    "AppleCredentialsSecretRequest": {
      "description": "Apple connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Apple connection secrets",
          "allOf": [
            {
              "description": "SharedConnectionRequest",
              "required": [
                "serviceType"
              ],
              "type": "object",
              "properties": {
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "credential type of the shared connection. Values can be credentials|certificate",
                  "default": "credentials",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "apple secret details",
          "type": "object",
          "properties": {
            "username": {
              "description": "username to connect to apple store.",
              "type": "string"
            },
            "authCode": {
              "description": "6 digit auth code",
              "maxLength": 6,
              "minLength": 6,
              "type": "string"
            },
            "password": {
              "description": "password to connect to apple store.",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "credentials"
    },
    "AppleCertificateSecretRequest": {
      "description": "Apple certificate secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Apple connection secrets",
          "allOf": [
            {
              "description": "SharedConnectionRequest",
              "required": [
                "serviceType"
              ],
              "type": "object",
              "properties": {
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "credential type of the shared connection. Values can be credentials|certificate",
                  "default": "credentials",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "apple secret details",
          "required": [
            "base64Certificate",
            "password"
          ],
          "type": "object",
          "properties": {
            "base64Certificate": {
              "description": "The certificate contents in base 64 encoded string",
              "type": "string"
            },
            "password": {
              "description": "The password for the certificate",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "certificate"
    },
    "PrivateAppleSecretResponse": {
      "description": "private Apple connection secrets response",
      "allOf": [
        {
          "description": "PrivateSharedConnectionResponse",
          "required": [
            "id",
            "serviceType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "discriminator": "credentialType",
      "x-ms-discriminator-value": "apple"
    },
    "PrivateAppleCredentialsSecretResponse": {
      "description": "private Apple connection secrets response",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "private Apple connection secrets response",
          "allOf": [
            {
              "description": "PrivateSharedConnectionResponse",
              "required": [
                "id",
                "serviceType"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "id of the shared connection",
                  "type": "string"
                },
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "isValid": {
                  "description": "whether the credentials are valid or not",
                  "type": "boolean"
                },
                "is2FA": {
                  "description": "if the account is a 2FA account or not",
                  "type": "boolean"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "apple secret details",
          "type": "object",
          "properties": {
            "username": {
              "description": "username to connect to apple store.",
              "type": "string"
            },
            "authCode": {
              "description": "6 digit auth code",
              "maxLength": 6,
              "minLength": 6,
              "type": "string"
            },
            "password": {
              "description": "password to connect to apple store.",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "certificate"
    },
    "PrivateAppleCertificateSecretResponse": {
      "description": "private Apple connection secrets response",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "private Apple connection secrets response",
          "allOf": [
            {
              "description": "PrivateSharedConnectionResponse",
              "required": [
                "id",
                "serviceType"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "id of the shared connection",
                  "type": "string"
                },
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "isValid": {
                  "description": "whether the credentials are valid or not",
                  "type": "boolean"
                },
                "is2FA": {
                  "description": "if the account is a 2FA account or not",
                  "type": "boolean"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "apple secret details",
          "required": [
            "base64Certificate",
            "password",
            "displayName",
            "certificateValidityStartDate",
            "certificateValidityEndDate"
          ],
          "type": "object",
          "properties": {
            "base64Certificate": {
              "description": "The certificate contents in base 64 encoded string",
              "type": "string"
            },
            "password": {
              "description": "The password for the certificate",
              "type": "string"
            },
            "displayName": {
              "description": "The display name (CN) of the certificate",
              "type": "string"
            },
            "certificateValidityStartDate": {
              "description": "The date-time from which the certificate is valid",
              "type": "string"
            },
            "certificateValidityEndDate": {
              "description": "The date-time till which the certificate is valid",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "certificate"
    },
    "AppleSecretDetails": {
      "description": "Apple secret details",
      "type": "object",
      "properties": {
        "username": {
          "description": "username to connect to apple store.",
          "type": "string"
        },
        "authCode": {
          "description": "6 digit auth code",
          "maxLength": 6,
          "minLength": 6,
          "type": "string"
        },
        "password": {
          "description": "password to connect to apple store.",
          "type": "string"
        }
      }
    },
    "AppleMultifactorSecretDetails": {
      "description": "Apple secret details",
      "required": [
        "username",
        "password",
        "authCode"
      ],
      "type": "object",
      "properties": {
        "username": {
          "description": "username to connect to apple store.",
          "type": "string"
        },
        "password": {
          "description": "password to connect to apple store.",
          "type": "string"
        },
        "authCode": {
          "description": "The 6 digit Apple OTP for Multifactor accounts",
          "type": "string"
        },
        "appSpecificPassword": {
          "description": "The app specific password required for app publishing for 2FA accounts",
          "type": "string"
        }
      }
    },
    "AppleSecretDetailsResponse": {
      "description": "Apple secret details",
      "required": [
        "username"
      ],
      "type": "object",
      "properties": {
        "username": {
          "description": "username to connect to apple store",
          "type": "string"
        }
      }
    },
    "AppleConnectionSecretResponse": {
      "description": "Apple connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "apple secret details",
          "required": [
            "username"
          ],
          "type": "object",
          "properties": {
            "username": {
              "description": "username to connect to apple store",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "apple"
    },
    "AppleConnectionNonSecretResponse": {
      "description": "Apple connection secrets",
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "discriminator": "credentialType",
      "x-ms-discriminator-value": "apple"
    },
    "AppleCredentialNonSecretDetailsResponse": {
      "description": "Apple credentials non-secret details",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Apple connection secrets",
          "allOf": [
            {
              "description": "SharedConnectionResponse",
              "required": [
                "id",
                "serviceType",
                "credentialType"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "id of the shared connection",
                  "type": "string"
                },
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "the type of the credential",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                },
                "isValid": {
                  "description": "whether the credentials are valid or not",
                  "type": "boolean"
                },
                "is2FA": {
                  "description": "if the account is a 2FA account or not",
                  "type": "boolean"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "Apple credentials non-secret data",
          "required": [
            "username"
          ],
          "type": "object",
          "properties": {
            "username": {
              "description": "username to connect to apple store",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "credentials"
    },
    "AppleCertificateNonSecretDetailsResponse": {
      "description": "Apple certificate non-secret details",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Apple connection secrets",
          "allOf": [
            {
              "description": "SharedConnectionResponse",
              "required": [
                "id",
                "serviceType",
                "credentialType"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "id of the shared connection",
                  "type": "string"
                },
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "the type of the credential",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                },
                "isValid": {
                  "description": "whether the credentials are valid or not",
                  "type": "boolean"
                },
                "is2FA": {
                  "description": "if the account is a 2FA account or not",
                  "type": "boolean"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "apple"
        }
      ],
      "properties": {
        "data": {
          "description": "apple certificate non-secret details",
          "required": [
            "displayName",
            "certificateValidityStartDate",
            "certificateValidityEndDate"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "description": "The display name (CN) of the certificate",
              "type": "string"
            },
            "certificateValidityStartDate": {
              "description": "The date-time from which the certificate is valid",
              "type": "string"
            },
            "certificateValidityEndDate": {
              "description": "The date-time till which the certificate is valid",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "certificate"
    },
    "AppleCertificateSecretDetailsResponse": {
      "description": "Apple connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "apple certificate secret details.",
          "required": [
            "base64Certificate",
            "password",
            "displayName",
            "certificateValidityStartDate",
            "certificateValidityEndDate"
          ],
          "type": "object",
          "properties": {
            "base64Certificate": {
              "description": "The certificate contents in base 64 encoded string",
              "type": "string"
            },
            "password": {
              "description": "The password for the certificate",
              "type": "string"
            },
            "displayName": {
              "description": "The display name (CN) of the certificate",
              "type": "string"
            },
            "certificateValidityStartDate": {
              "description": "The date-time from which the certificate is valid",
              "type": "string"
            },
            "certificateValidityEndDate": {
              "description": "The date-time till which the certificate is valid",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "apple"
    },
    "AppleCertificateSecretDetails": {
      "description": "Apple Certificate Secret Details",
      "required": [
        "base64Certificate",
        "password",
        "displayName",
        "certificateValidityStartDate",
        "certificateValidityEndDate"
      ],
      "type": "object",
      "properties": {
        "base64Certificate": {
          "description": "The certificate contents in base 64 encoded string",
          "type": "string"
        },
        "password": {
          "description": "The password for the certificate",
          "type": "string"
        },
        "displayName": {
          "description": "The display name (CN) of the certificate",
          "type": "string"
        },
        "certificateValidityStartDate": {
          "description": "The date-time from which the certificate is valid",
          "type": "string"
        },
        "certificateValidityEndDate": {
          "description": "The date-time till which the certificate is valid",
          "type": "string"
        }
      }
    },
    "AppleCertificateDetails": {
      "description": "Apple Certificate Details",
      "required": [
        "base64Certificate",
        "password"
      ],
      "type": "object",
      "properties": {
        "base64Certificate": {
          "description": "The certificate contents in base 64 encoded string",
          "type": "string"
        },
        "password": {
          "description": "The password for the certificate",
          "type": "string"
        }
      }
    },
    "AppleCertificateNonSecretDetails": {
      "description": "Apple Certificate Secret Details",
      "required": [
        "displayName",
        "certificateValidityStartDate",
        "certificateValidityEndDate"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "The display name (CN) of the certificate",
          "type": "string"
        },
        "certificateValidityStartDate": {
          "description": "The date-time from which the certificate is valid",
          "type": "string"
        },
        "certificateValidityEndDate": {
          "description": "The date-time till which the certificate is valid",
          "type": "string"
        }
      }
    },
    "JiraConnectionSecretRequest": {
      "description": "Jira connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "SharedConnectionRequest",
          "required": [
            "serviceType"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "credential type of the shared connection. Values can be credentials|certificate",
              "default": "credentials",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "jira secret details",
          "required": [
            "baseUrl",
            "username",
            "password"
          ],
          "type": "object",
          "properties": {
            "baseUrl": {
              "description": "baseUrl to connect to jira instance",
              "type": "string"
            },
            "username": {
              "description": "username to connect to jira instance",
              "type": "string"
            },
            "password": {
              "description": "password to connect to jira instance",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "jira"
    },
    "JiraConnectionSecretResponse": {
      "description": "Jira connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "jira secret details",
          "required": [
            "baseUrl",
            "username"
          ],
          "type": "object",
          "properties": {
            "baseUrl": {
              "description": "baseUrl to connect to jira instance",
              "type": "string"
            },
            "username": {
              "description": "username to connect to jira instance",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "jira"
    },
    "PrivateJiraConnectionSecretResponse": {
      "description": "private Jira connection secrets response",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "PrivateSharedConnectionResponse",
          "required": [
            "id",
            "serviceType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "jira secret details",
          "required": [
            "baseUrl",
            "username",
            "password"
          ],
          "type": "object",
          "properties": {
            "baseUrl": {
              "description": "baseUrl to connect to jira instance",
              "type": "string"
            },
            "username": {
              "description": "username to connect to jira instance",
              "type": "string"
            },
            "password": {
              "description": "password to connect to jira instance",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "jira"
    },
    "JiraSecretDetails": {
      "description": "Jira secret details",
      "required": [
        "baseUrl",
        "username",
        "password"
      ],
      "type": "object",
      "properties": {
        "baseUrl": {
          "description": "baseUrl to connect to jira instance",
          "type": "string"
        },
        "username": {
          "description": "username to connect to jira instance",
          "type": "string"
        },
        "password": {
          "description": "password to connect to jira instance",
          "type": "string"
        }
      }
    },
    "JiraSecretDetailsResponse": {
      "description": "Jira secret details",
      "required": [
        "baseUrl",
        "username"
      ],
      "type": "object",
      "properties": {
        "baseUrl": {
          "description": "baseUrl to connect to jira instance",
          "type": "string"
        },
        "username": {
          "description": "username to connect to jira instance",
          "type": "string"
        }
      }
    },
    "GooglePlayConnectionSecretRequest": {
      "description": "Google Play connection secrets this should be the JSON file data which is provided by google play",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "SharedConnectionRequest",
          "required": [
            "serviceType"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "credential type of the shared connection. Values can be credentials|certificate",
              "default": "credentials",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "google secret details",
          "type": "object"
        }
      },
      "x-ms-discriminator-value": "googleplay"
    },
    "GooglePlayConnectionSecretResponse": {
      "description": "Google Play connection secrets",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "google play secret details",
          "type": "object"
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "googleplay"
    },
    "PrivateGooglePlayConnectionSecretResponse": {
      "description": "private google connection secrets response",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "PrivateSharedConnectionResponse",
          "required": [
            "id",
            "serviceType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "properties": {
        "data": {
          "description": "google secret details",
          "type": "object"
        }
      },
      "discriminator": "serviceType",
      "x-ms-discriminator-value": "googleplay"
    },
    "GooglePlayConnectionNonSecretResponse": {
      "description": "Google Play non-secret data",
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "discriminator": "credentialType",
      "x-ms-discriminator-value": "googleplay"
    },
    "GooglePlayCredentialNonSecretDetailsResponse": {
      "description": "Google Play credentials non-secret details",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Google Play non-secret data",
          "allOf": [
            {
              "description": "SharedConnectionResponse",
              "required": [
                "id",
                "serviceType",
                "credentialType"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "id of the shared connection",
                  "type": "string"
                },
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "the type of the credential",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                },
                "isValid": {
                  "description": "whether the credentials are valid or not",
                  "type": "boolean"
                },
                "is2FA": {
                  "description": "if the account is a 2FA account or not",
                  "type": "boolean"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "googleplay"
        }
      ],
      "properties": {
        "data": {
          "description": "Google Play credentials non-secret details",
          "type": "object"
        }
      },
      "x-ms-discriminator-value": "credentials"
    },
    "JiraConnectionNonSecretResponse": {
      "description": "Jira non-secret data",
      "allOf": [
        {
          "description": "SharedConnectionResponse",
          "required": [
            "id",
            "serviceType",
            "credentialType"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "id of the shared connection",
              "type": "string"
            },
            "displayName": {
              "description": "display name of shared connection",
              "type": "string"
            },
            "serviceType": {
              "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
              "enum": [
                "apple",
                "jira",
                "googleplay",
                "gitlab"
              ],
              "type": "string"
            },
            "credentialType": {
              "description": "the type of the credential",
              "enum": [
                "credentials",
                "certificate"
              ],
              "type": "string"
            },
            "isValid": {
              "description": "whether the credentials are valid or not",
              "type": "boolean"
            },
            "is2FA": {
              "description": "if the account is a 2FA account or not",
              "type": "boolean"
            }
          },
          "discriminator": "serviceType"
        }
      ],
      "discriminator": "credentialType",
      "x-ms-discriminator-value": "jira"
    },
    "JiraCredentialNonSecretDetailsResponse": {
      "description": "Jira credentials non-secret details",
      "required": [
        "data"
      ],
      "allOf": [
        {
          "description": "Google Play non-secret data",
          "allOf": [
            {
              "description": "SharedConnectionResponse",
              "required": [
                "id",
                "serviceType",
                "credentialType"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "id of the shared connection",
                  "type": "string"
                },
                "displayName": {
                  "description": "display name of shared connection",
                  "type": "string"
                },
                "serviceType": {
                  "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                  "enum": [
                    "apple",
                    "jira",
                    "googleplay",
                    "gitlab"
                  ],
                  "type": "string"
                },
                "credentialType": {
                  "description": "the type of the credential",
                  "enum": [
                    "credentials",
                    "certificate"
                  ],
                  "type": "string"
                },
                "isValid": {
                  "description": "whether the credentials are valid or not",
                  "type": "boolean"
                },
                "is2FA": {
                  "description": "if the account is a 2FA account or not",
                  "type": "boolean"
                }
              },
              "discriminator": "serviceType"
            }
          ],
          "discriminator": "credentialType",
          "x-ms-discriminator-value": "googleplay"
        }
      ],
      "properties": {
        "data": {
          "description": "Jira credentials non-secret details",
          "required": [
            "baseUrl",
            "username"
          ],
          "type": "object",
          "properties": {
            "baseUrl": {
              "description": "baseUrl to connect to jira instance",
              "type": "string"
            },
            "username": {
              "description": "username to connect to jira instance",
              "type": "string"
            }
          }
        }
      },
      "x-ms-discriminator-value": "credentials"
    },
    "ApiTokenResponsev2": {
      "required": [
        "id",
        "created_at"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the api token",
          "type": "string"
        },
        "created_at": {
          "description": "The creation time",
          "type": "string"
        },
        "scope": {
          "description": "The token's scope. A list of allowed roles.",
          "type": "array",
          "items": {
            "enum": [
              "all",
              "in_app_update",
              "viewer"
            ],
            "type": "string"
          }
        },
        "encrypted_token": {
          "description": "The encrypted value of a token. This value will only be returned for token of type in_app_update.",
          "type": "string"
        },
        "description": {
          "description": "The description of the token",
          "type": "string"
        }
      }
    },
    "UserDataResponse": {
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The display name of the user",
          "type": "string"
        },
        "name": {
          "description": "The name of the user",
          "type": "string"
        },
        "avatar_url": {
          "description": "The url at which the user's avatar can be reached",
          "type": "string"
        }
      }
    },
    "UserProfileResponsev2": {
      "required": [
        "id",
        "display_name",
        "email",
        "name",
        "origin"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the user",
          "type": "string"
        },
        "can_change_password": {
          "description": "User is required to send an old password in order to change the password.",
          "type": "boolean"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "created_at": {
          "description": "The created date of the user",
          "type": "string"
        },
        "next_nps_survey_date": {
          "description": "The date in the future when the user should be checked again for NPS eligibility",
          "type": "string"
        },
        "origin": {
          "description": "The creation origin of this user",
          "enum": [
            "appcenter",
            "hockeyapp",
            "codepush"
          ],
          "type": "string"
        },
        "feature_flags": {
          "description": "The feature flags that are enabled for this user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "admin_role": {
          "description": "The new admin_role",
          "enum": [
            "superAdmin",
            "admin",
            "devOps",
            "customerSupport",
            "notAdmin"
          ],
          "type": "string"
        },
        "settings": {
          "description": "The user's settings",
          "type": "object"
        },
        "session_hash": {
          "description": "The session hash of the user",
          "type": "string"
        }
      }
    },
    "MbaasSurveyDataResponse": {
      "properties": {
        "nextSurveyDate": {
          "format": "dateTime",
          "description": "The next mbaas survey date for the user",
          "type": "string"
        }
      }
    },
    "ErrorDetailsv2": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "enum": [
            "BadRequest",
            "Conflict",
            "NotAcceptable",
            "NotFound",
            "InternalServerError",
            "Unauthorized"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorResponsev2": {
      "required": [
        "error"
      ],
      "type": "object",
      "properties": {
        "error": {
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "enum": [
                "BadRequest",
                "Conflict",
                "NotAcceptable",
                "NotFound",
                "InternalServerError",
                "Unauthorized"
              ],
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      }
    },
    "OptimizelyUserMetaDataResponse": {
      "properties": {
        "userId": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "OptimizelyUserMetaDataRequest": {
      "properties": {
        "metadata": {
          "type": "object"
        }
      }
    },
    "FileAsset": {
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "uploadDomain": {
          "type": "string"
        },
        "uploadWindowLocation": {
          "type": "string"
        },
        "urlEncodedToken": {
          "type": "string"
        }
      }
    },
    "SourceRepository": {
      "description": "The source repository",
      "properties": {
        "name": {
          "description": "The repository name",
          "type": "string"
        },
        "clone_url": {
          "description": "URL used to clone the repository",
          "type": "string"
        }
      }
    },
    "SourceRepositories": {
      "description": "A list of source repositories",
      "type": "array",
      "items": {
        "description": "The source repository",
        "properties": {
          "name": {
            "description": "The repository name",
            "type": "string"
          },
          "clone_url": {
            "description": "URL used to clone the repository",
            "type": "string"
          }
        }
      }
    },
    "GitHubInstallationLite": {
      "description": "The GitHub Installation",
      "properties": {
        "id": {
          "description": "GitHub Installation Id",
          "type": "number"
        },
        "account": {
          "description": "The GitHub Installation",
          "properties": {
            "id": {
              "description": "GitHub Account Id",
              "type": "string"
            },
            "login": {
              "description": "GitHub Account Login Name",
              "type": "string"
            },
            "type": {
              "description": "GitHub Account Type",
              "type": "string"
            },
            "url": {
              "description": "GitHub Account Url",
              "type": "string"
            }
          }
        },
        "app_id": {
          "description": "GitHub Installation App Id",
          "type": "number"
        }
      }
    },
    "GitHubAccountLite": {
      "description": "The GitHub Installation",
      "properties": {
        "id": {
          "description": "GitHub Account Id",
          "type": "string"
        },
        "login": {
          "description": "GitHub Account Login Name",
          "type": "string"
        },
        "type": {
          "description": "GitHub Account Type",
          "type": "string"
        },
        "url": {
          "description": "GitHub Account Url",
          "type": "string"
        }
      }
    },
    "GitHubInstallationRepository": {
      "description": "The repository which is accessiable by GitHub App Installation",
      "properties": {
        "name": {
          "description": "The repository name",
          "type": "string"
        },
        "description": {
          "description": "The discription of repository",
          "type": "string"
        },
        "clone_url": {
          "description": "URL used to clone the repository",
          "type": "string"
        },
        "default_branch": {
          "description": "The default branch for the repo",
          "type": "string"
        },
        "language": {
          "description": "The language in the repository",
          "type": "string"
        },
        "updated_at": {
          "format": "dateTime",
          "description": "The repository updated time",
          "type": "string"
        },
        "fork": {
          "description": "Whether the repository is a fork",
          "type": "boolean"
        }
      }
    },
    "GitHubInstallationRepositories": {
      "description": "A list of the repositories which is accessible by GitHub App Installation",
      "type": "array",
      "items": {
        "description": "The repository which is accessiable by GitHub App Installation",
        "properties": {
          "name": {
            "description": "The repository name",
            "type": "string"
          },
          "description": {
            "description": "The discription of repository",
            "type": "string"
          },
          "clone_url": {
            "description": "URL used to clone the repository",
            "type": "string"
          },
          "default_branch": {
            "description": "The default branch for the repo",
            "type": "string"
          },
          "language": {
            "description": "The language in the repository",
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "description": "The repository updated time",
            "type": "string"
          },
          "fork": {
            "description": "Whether the repository is a fork",
            "type": "boolean"
          }
        }
      }
    },
    "GitHubBillingAccount": {
      "description": "App Center account details from GitHub billing",
      "required": [
        "id",
        "display_name",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "description": "The unique id (UUID) of the account",
          "type": "string"
        },
        "display_name": {
          "description": "The account's display name",
          "type": "string"
        },
        "name": {
          "description": "The unique name that used to identify the owner",
          "type": "string"
        },
        "type": {
          "description": "The owner type. Can either be 'org' or 'user'",
          "enum": [
            "org",
            "user"
          ],
          "type": "string"
        }
      }
    },
    "GitHubPullRequestLite": {
      "description": "The lite version of GitHub pull request",
      "properties": {
        "head": {
          "description": "The lite version of GitHub branch",
          "properties": {
            "ref": {
              "description": "The repository name",
              "type": "string"
            },
            "sha": {
              "description": "The discription of repository",
              "type": "string"
            },
            "repo": {
              "description": "The lite version of GitHub repository",
              "properties": {
                "id": {
                  "description": "The repository id",
                  "type": "number"
                }
              }
            }
          }
        },
        "base": {
          "description": "The lite version of GitHub branch",
          "properties": {
            "ref": {
              "description": "The repository name",
              "type": "string"
            },
            "sha": {
              "description": "The discription of repository",
              "type": "string"
            },
            "repo": {
              "description": "The lite version of GitHub repository",
              "properties": {
                "id": {
                  "description": "The repository id",
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "GitHubBranchLite": {
      "description": "The lite version of GitHub branch",
      "properties": {
        "ref": {
          "description": "The repository name",
          "type": "string"
        },
        "sha": {
          "description": "The discription of repository",
          "type": "string"
        },
        "repo": {
          "description": "The lite version of GitHub repository",
          "properties": {
            "id": {
              "description": "The repository id",
              "type": "number"
            }
          }
        }
      }
    },
    "GitHubRepositoryLite": {
      "description": "The lite version of GitHub repository",
      "properties": {
        "id": {
          "description": "The repository id",
          "type": "number"
        }
      }
    },
    "IosAppExtensionInfo": {
      "description": "App extension information",
      "required": [
        "name",
        "targetBundleIdentifier"
      ],
      "properties": {
        "name": {
          "description": "App extension name",
          "type": "string"
        },
        "targetBundleIdentifier": {
          "description": "App extension bundle identifier",
          "type": "string"
        }
      }
    },
    "ProvisioningProfileFile": {
      "description": "Provisioning profile fetch and store information",
      "properties": {
        "fileName": {
          "description": "Name of uploaded provisioning profile",
          "type": "string"
        },
        "fileId": {
          "description": "File id from secure file storage",
          "type": "string"
        },
        "uploadId": {
          "description": "Upload id to App Center File Upload Store",
          "type": "string"
        },
        "targetBundleIdentifier": {
          "description": "Target the provisioning profile is used to sign",
          "type": "string"
        }
      }
    },
    "VSTSProfile": {
      "description": "VSTS user profile",
      "properties": {
        "id": {
          "description": "Profile id",
          "type": "string"
        },
        "displayName": {
          "description": "Profile display name",
          "type": "string"
        },
        "publicAlias": {
          "description": "Profile alias",
          "type": "string"
        },
        "emailAddress": {
          "description": "Profile email",
          "type": "string"
        }
      }
    },
    "VSTSProject": {
      "description": "VSTS project",
      "properties": {
        "id": {
          "description": "Project id",
          "type": "string"
        },
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "description": {
          "description": "Project description",
          "type": "string"
        },
        "url": {
          "description": "Project URL",
          "type": "string"
        },
        "state": {
          "description": "Project state",
          "type": "string"
        },
        "visibility": {
          "description": "Project visibility",
          "type": "string"
        }
      }
    },
    "VSTSAccount": {
      "description": "VSTS account with projects list and user info",
      "properties": {
        "accountId": {
          "description": "Account id",
          "type": "string"
        },
        "accountUri": {
          "description": "Account uri",
          "type": "string"
        },
        "accountName": {
          "description": "Account name",
          "type": "string"
        },
        "accountType": {
          "description": "Account type",
          "type": "string"
        },
        "accountStatus": {
          "description": "Account status",
          "type": "string"
        },
        "user": {
          "description": "VSTS user profile",
          "properties": {
            "id": {
              "description": "Profile id",
              "type": "string"
            },
            "displayName": {
              "description": "Profile display name",
              "type": "string"
            },
            "publicAlias": {
              "description": "Profile alias",
              "type": "string"
            },
            "emailAddress": {
              "description": "Profile email",
              "type": "string"
            }
          }
        },
        "projects": {
          "description": "Account projects",
          "type": "array",
          "items": {
            "description": "VSTS project",
            "properties": {
              "id": {
                "description": "Project id",
                "type": "string"
              },
              "name": {
                "description": "Project name",
                "type": "string"
              },
              "description": {
                "description": "Project description",
                "type": "string"
              },
              "url": {
                "description": "Project URL",
                "type": "string"
              },
              "state": {
                "description": "Project state",
                "type": "string"
              },
              "visibility": {
                "description": "Project visibility",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "VSTSAccounts": {
      "description": "A list of VSTS accounts with projects",
      "type": "array",
      "items": {
        "description": "VSTS account with projects list and user info",
        "properties": {
          "accountId": {
            "description": "Account id",
            "type": "string"
          },
          "accountUri": {
            "description": "Account uri",
            "type": "string"
          },
          "accountName": {
            "description": "Account name",
            "type": "string"
          },
          "accountType": {
            "description": "Account type",
            "type": "string"
          },
          "accountStatus": {
            "description": "Account status",
            "type": "string"
          },
          "user": {
            "description": "VSTS user profile",
            "properties": {
              "id": {
                "description": "Profile id",
                "type": "string"
              },
              "displayName": {
                "description": "Profile display name",
                "type": "string"
              },
              "publicAlias": {
                "description": "Profile alias",
                "type": "string"
              },
              "emailAddress": {
                "description": "Profile email",
                "type": "string"
              }
            }
          },
          "projects": {
            "description": "Account projects",
            "type": "array",
            "items": {
              "description": "VSTS project",
              "properties": {
                "id": {
                  "description": "Project id",
                  "type": "string"
                },
                "name": {
                  "description": "Project name",
                  "type": "string"
                },
                "description": {
                  "description": "Project description",
                  "type": "string"
                },
                "url": {
                  "description": "Project URL",
                  "type": "string"
                },
                "state": {
                  "description": "Project state",
                  "type": "string"
                },
                "visibility": {
                  "description": "Project visibility",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "DownloadContainer": {
      "description": "A download reference",
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "description": "Download URI",
          "type": "string"
        }
      }
    },
    "WebSocketContainer": {
      "description": "A websocket reference",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "description": "WebSocket URL",
          "type": "string"
        }
      }
    },
    "XcodeArchiveProject": {
      "required": [
        "archiveTargetId",
        "projectName"
      ],
      "properties": {
        "archiveTargetId": {
          "description": "The Id of the target to archive",
          "type": "string"
        },
        "projectName": {
          "description": "The project to archive container name",
          "type": "string"
        },
        "projectPath": {
          "description": "Full path of the target project",
          "type": "string"
        }
      }
    },
    "XcodeScheme": {
      "required": [
        "name",
        "hasTestAction"
      ],
      "properties": {
        "name": {
          "description": "Scheme name",
          "type": "string"
        },
        "hasTestAction": {
          "description": "Does scheme have a test action?",
          "type": "boolean"
        },
        "archiveConfiguration": {
          "description": "Build configuration set in Archive action",
          "type": "string"
        },
        "archiveProject": {
          "required": [
            "archiveTargetId",
            "projectName"
          ],
          "properties": {
            "archiveTargetId": {
              "description": "The Id of the target to archive",
              "type": "string"
            },
            "projectName": {
              "description": "The project to archive container name",
              "type": "string"
            },
            "projectPath": {
              "description": "Full path of the target project",
              "type": "string"
            }
          }
        }
      }
    },
    "XcodeToolset": {
      "required": [
        "xcodeSchemeContainers"
      ],
      "properties": {
        "xcodeSchemeContainers": {
          "description": "The Xcode scheme containers",
          "type": "array",
          "items": {
            "required": [
              "path",
              "sharedSchemes"
            ],
            "properties": {
              "path": {
                "description": "Path to project",
                "type": "string"
              },
              "sharedSchemes": {
                "description": "Project schemes",
                "type": "array",
                "items": {
                  "required": [
                    "name",
                    "hasTestAction"
                  ],
                  "properties": {
                    "name": {
                      "description": "Scheme name",
                      "type": "string"
                    },
                    "hasTestAction": {
                      "description": "Does scheme have a test action?",
                      "type": "boolean"
                    },
                    "archiveConfiguration": {
                      "description": "Build configuration set in Archive action",
                      "type": "string"
                    },
                    "archiveProject": {
                      "required": [
                        "archiveTargetId",
                        "projectName"
                      ],
                      "properties": {
                        "archiveTargetId": {
                          "description": "The Id of the target to archive",
                          "type": "string"
                        },
                        "projectName": {
                          "description": "The project to archive container name",
                          "type": "string"
                        },
                        "projectPath": {
                          "description": "Full path of the target project",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "podfilePath": {
                "description": "Path to CocoaPods file, if present",
                "type": "string"
              },
              "cartfilePath": {
                "description": "Path to Carthage file, if present",
                "type": "string"
              },
              "xcodeProjectSha": {
                "description": "repo object Id of the pbxproject",
                "type": "string"
              },
              "workspaceProjectPaths": {
                "description": "Related projects paths for xcworkspace",
                "type": "string"
              },
              "appExtensionTargets": {
                "description": "Information regarding project app extensions, if present",
                "type": "array",
                "items": {
                  "description": "App extension information",
                  "required": [
                    "name",
                    "targetBundleIdentifier"
                  ],
                  "properties": {
                    "name": {
                      "description": "App extension name",
                      "type": "string"
                    },
                    "targetBundleIdentifier": {
                      "description": "App extension bundle identifier",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "XcodeSchemeContainer": {
      "required": [
        "path",
        "sharedSchemes"
      ],
      "properties": {
        "path": {
          "description": "Path to project",
          "type": "string"
        },
        "sharedSchemes": {
          "description": "Project schemes",
          "type": "array",
          "items": {
            "required": [
              "name",
              "hasTestAction"
            ],
            "properties": {
              "name": {
                "description": "Scheme name",
                "type": "string"
              },
              "hasTestAction": {
                "description": "Does scheme have a test action?",
                "type": "boolean"
              },
              "archiveConfiguration": {
                "description": "Build configuration set in Archive action",
                "type": "string"
              },
              "archiveProject": {
                "required": [
                  "archiveTargetId",
                  "projectName"
                ],
                "properties": {
                  "archiveTargetId": {
                    "description": "The Id of the target to archive",
                    "type": "string"
                  },
                  "projectName": {
                    "description": "The project to archive container name",
                    "type": "string"
                  },
                  "projectPath": {
                    "description": "Full path of the target project",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "podfilePath": {
          "description": "Path to CocoaPods file, if present",
          "type": "string"
        },
        "cartfilePath": {
          "description": "Path to Carthage file, if present",
          "type": "string"
        },
        "xcodeProjectSha": {
          "description": "repo object Id of the pbxproject",
          "type": "string"
        },
        "workspaceProjectPaths": {
          "description": "Related projects paths for xcworkspace",
          "type": "string"
        },
        "appExtensionTargets": {
          "description": "Information regarding project app extensions, if present",
          "type": "array",
          "items": {
            "description": "App extension information",
            "required": [
              "name",
              "targetBundleIdentifier"
            ],
            "properties": {
              "name": {
                "description": "App extension name",
                "type": "string"
              },
              "targetBundleIdentifier": {
                "description": "App extension bundle identifier",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "XamarinToolset": {
      "required": [
        "xamarinSolutions"
      ],
      "properties": {
        "xamarinSolutions": {
          "description": "Xamarin solutions for the toolset",
          "type": "array",
          "items": {
            "required": [
              "path",
              "configurations"
            ],
            "properties": {
              "path": {
                "description": "Path to solution",
                "type": "string"
              },
              "configurations": {
                "description": "Solution configurations",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "defaultConfiguration": {
                "description": "Solution default configuration",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "XamarinSolution": {
      "required": [
        "path",
        "configurations"
      ],
      "properties": {
        "path": {
          "description": "Path to solution",
          "type": "string"
        },
        "configurations": {
          "description": "Solution configurations",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultConfiguration": {
          "description": "Solution default configuration",
          "type": "string"
        }
      }
    },
    "AndroidProject": {
      "required": [
        "androidModules"
      ],
      "properties": {
        "androidModules": {
          "description": "Android Gradle modules",
          "type": "array",
          "items": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of the Android module",
                "type": "string"
              },
              "hasBundle": {
                "description": "Module contains bundle settings",
                "type": "boolean"
              },
              "productFlavors": {
                "description": "The product flavors of the Android module",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "buildVariants": {
                "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "buildTypes": {
                "description": "The detected build types of the Android module",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "buildConfigurations": {
                "description": "The detected build configurations of the Android module",
                "type": "array",
                "items": {
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of build configuration (the same as a build type name)",
                      "type": "string"
                    },
                    "signingConfig": {
                      "description": "Android signing config. Null if not specified",
                      "properties": {
                        "hasStoreFile": {
                          "description": "Indicates if storeFile is specified in the signing configuration",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              },
              "isRoot": {
                "description": "Whether the module is at the root level of the project",
                "type": "boolean"
              }
            }
          }
        },
        "gradleWrapperPath": {
          "description": "The path of the Gradle wrapper",
          "type": "string"
        }
      }
    },
    "AndroidModule": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the Android module",
          "type": "string"
        },
        "hasBundle": {
          "description": "Module contains bundle settings",
          "type": "boolean"
        },
        "productFlavors": {
          "description": "The product flavors of the Android module",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "buildVariants": {
          "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "buildTypes": {
          "description": "The detected build types of the Android module",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "buildConfigurations": {
          "description": "The detected build configurations of the Android module",
          "type": "array",
          "items": {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of build configuration (the same as a build type name)",
                "type": "string"
              },
              "signingConfig": {
                "description": "Android signing config. Null if not specified",
                "properties": {
                  "hasStoreFile": {
                    "description": "Indicates if storeFile is specified in the signing configuration",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "isRoot": {
          "description": "Whether the module is at the root level of the project",
          "type": "boolean"
        }
      }
    },
    "BuildConfiguration": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of build configuration (the same as a build type name)",
          "type": "string"
        },
        "signingConfig": {
          "description": "Android signing config. Null if not specified",
          "properties": {
            "hasStoreFile": {
              "description": "Indicates if storeFile is specified in the signing configuration",
              "type": "boolean"
            }
          }
        }
      }
    },
    "SigningConfig": {
      "properties": {
        "hasStoreFile": {
          "description": "Indicates if storeFile is specified in the signing configuration",
          "type": "boolean"
        }
      }
    },
    "JavaScriptToolset": {
      "required": [
        "packageJsonPaths"
      ],
      "properties": {
        "packageJsonPaths": {
          "description": "Paths for detected package.json files",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "javascriptSolutions": {
          "description": "The React Native solutions detected",
          "type": "array",
          "items": {
            "required": [
              "packageJsonPath"
            ],
            "properties": {
              "packageJsonPath": {
                "description": "The path to the detected package.json",
                "type": "string"
              },
              "reactNativeVersion": {
                "description": "Version of React Native from package.json files",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "JavaScriptSolution": {
      "required": [
        "packageJsonPath"
      ],
      "properties": {
        "packageJsonPath": {
          "description": "The path to the detected package.json",
          "type": "string"
        },
        "reactNativeVersion": {
          "description": "Version of React Native from package.json files",
          "type": "string"
        }
      }
    },
    "UWPToolset": {
      "required": [
        "uwpSolutions"
      ],
      "properties": {
        "uwpSolutions": {
          "description": "The UWP solutions detected",
          "type": "array",
          "items": {
            "required": [
              "path",
              "configurations"
            ],
            "properties": {
              "path": {
                "description": "The path to the UWP solution",
                "type": "string"
              },
              "configurations": {
                "description": "The possible configurations detected for the UWP solution",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "UWPSolution": {
      "required": [
        "path",
        "configurations"
      ],
      "properties": {
        "path": {
          "description": "The path to the UWP solution",
          "type": "string"
        },
        "configurations": {
          "description": "The possible configurations detected for the UWP solution",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestCloudToolset": {
      "required": [
        "projects"
      ],
      "properties": {
        "projects": {
          "description": "The TestCloud projects detected",
          "type": "array",
          "items": {
            "required": [
              "path",
              "frameworkType"
            ],
            "properties": {
              "path": {
                "description": "The path to the TestCloud project",
                "type": "string"
              },
              "frameworkType": {
                "enum": [
                  "Appium",
                  "Calabash",
                  "Espresso",
                  "UITest",
                  "Generated"
                ],
                "type": "string"
              },
              "frameworkProperties": {
                "properties": {
                  "configurations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "TestCloudProject": {
      "required": [
        "path",
        "frameworkType"
      ],
      "properties": {
        "path": {
          "description": "The path to the TestCloud project",
          "type": "string"
        },
        "frameworkType": {
          "enum": [
            "Appium",
            "Calabash",
            "Espresso",
            "UITest",
            "Generated"
          ],
          "type": "string"
        },
        "frameworkProperties": {
          "properties": {
            "configurations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "TestCloudProjectFrameworkProperties": {
      "properties": {
        "configurations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ToolsetProjects": {
      "description": "A collection of projects for each type of toolset",
      "properties": {
        "commit": {
          "description": "The commit hash of the analyzed commit",
          "type": "string"
        },
        "xcode": {
          "required": [
            "xcodeSchemeContainers"
          ],
          "properties": {
            "xcodeSchemeContainers": {
              "description": "The Xcode scheme containers",
              "type": "array",
              "items": {
                "required": [
                  "path",
                  "sharedSchemes"
                ],
                "properties": {
                  "path": {
                    "description": "Path to project",
                    "type": "string"
                  },
                  "sharedSchemes": {
                    "description": "Project schemes",
                    "type": "array",
                    "items": {
                      "required": [
                        "name",
                        "hasTestAction"
                      ],
                      "properties": {
                        "name": {
                          "description": "Scheme name",
                          "type": "string"
                        },
                        "hasTestAction": {
                          "description": "Does scheme have a test action?",
                          "type": "boolean"
                        },
                        "archiveConfiguration": {
                          "description": "Build configuration set in Archive action",
                          "type": "string"
                        },
                        "archiveProject": {
                          "required": [
                            "archiveTargetId",
                            "projectName"
                          ],
                          "properties": {
                            "archiveTargetId": {
                              "description": "The Id of the target to archive",
                              "type": "string"
                            },
                            "projectName": {
                              "description": "The project to archive container name",
                              "type": "string"
                            },
                            "projectPath": {
                              "description": "Full path of the target project",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "podfilePath": {
                    "description": "Path to CocoaPods file, if present",
                    "type": "string"
                  },
                  "cartfilePath": {
                    "description": "Path to Carthage file, if present",
                    "type": "string"
                  },
                  "xcodeProjectSha": {
                    "description": "repo object Id of the pbxproject",
                    "type": "string"
                  },
                  "workspaceProjectPaths": {
                    "description": "Related projects paths for xcworkspace",
                    "type": "string"
                  },
                  "appExtensionTargets": {
                    "description": "Information regarding project app extensions, if present",
                    "type": "array",
                    "items": {
                      "description": "App extension information",
                      "required": [
                        "name",
                        "targetBundleIdentifier"
                      ],
                      "properties": {
                        "name": {
                          "description": "App extension name",
                          "type": "string"
                        },
                        "targetBundleIdentifier": {
                          "description": "App extension bundle identifier",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "javascript": {
          "required": [
            "packageJsonPaths"
          ],
          "properties": {
            "packageJsonPaths": {
              "description": "Paths for detected package.json files",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "javascriptSolutions": {
              "description": "The React Native solutions detected",
              "type": "array",
              "items": {
                "required": [
                  "packageJsonPath"
                ],
                "properties": {
                  "packageJsonPath": {
                    "description": "The path to the detected package.json",
                    "type": "string"
                  },
                  "reactNativeVersion": {
                    "description": "Version of React Native from package.json files",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "xamarin": {
          "required": [
            "xamarinSolutions"
          ],
          "properties": {
            "xamarinSolutions": {
              "description": "Xamarin solutions for the toolset",
              "type": "array",
              "items": {
                "required": [
                  "path",
                  "configurations"
                ],
                "properties": {
                  "path": {
                    "description": "Path to solution",
                    "type": "string"
                  },
                  "configurations": {
                    "description": "Solution configurations",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "defaultConfiguration": {
                    "description": "Solution default configuration",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "android": {
          "required": [
            "androidModules"
          ],
          "properties": {
            "androidModules": {
              "description": "Android Gradle modules",
              "type": "array",
              "items": {
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the Android module",
                    "type": "string"
                  },
                  "hasBundle": {
                    "description": "Module contains bundle settings",
                    "type": "boolean"
                  },
                  "productFlavors": {
                    "description": "The product flavors of the Android module",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "buildVariants": {
                    "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "buildTypes": {
                    "description": "The detected build types of the Android module",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "buildConfigurations": {
                    "description": "The detected build configurations of the Android module",
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of build configuration (the same as a build type name)",
                          "type": "string"
                        },
                        "signingConfig": {
                          "description": "Android signing config. Null if not specified",
                          "properties": {
                            "hasStoreFile": {
                              "description": "Indicates if storeFile is specified in the signing configuration",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "isRoot": {
                    "description": "Whether the module is at the root level of the project",
                    "type": "boolean"
                  }
                }
              }
            },
            "gradleWrapperPath": {
              "description": "The path of the Gradle wrapper",
              "type": "string"
            }
          }
        },
        "buildscripts": {
          "description": "A collection of detected pre/post buildscripts for current platform toolset",
          "additionalProperties": {
            "description": "Abstract platform project",
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          }
        },
        "uwp": {
          "required": [
            "uwpSolutions"
          ],
          "properties": {
            "uwpSolutions": {
              "description": "The UWP solutions detected",
              "type": "array",
              "items": {
                "required": [
                  "path",
                  "configurations"
                ],
                "properties": {
                  "path": {
                    "description": "The path to the UWP solution",
                    "type": "string"
                  },
                  "configurations": {
                    "description": "The possible configurations detected for the UWP solution",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "testcloud": {
          "required": [
            "projects"
          ],
          "properties": {
            "projects": {
              "description": "The TestCloud projects detected",
              "type": "array",
              "items": {
                "required": [
                  "path",
                  "frameworkType"
                ],
                "properties": {
                  "path": {
                    "description": "The path to the TestCloud project",
                    "type": "string"
                  },
                  "frameworkType": {
                    "enum": [
                      "Appium",
                      "Calabash",
                      "Espresso",
                      "UITest",
                      "Generated"
                    ],
                    "type": "string"
                  },
                  "frameworkProperties": {
                    "properties": {
                      "configurations": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BuildScripts": {
      "description": "A collection of detected pre/post buildscripts for current platform toolset",
      "additionalProperties": {
        "description": "Abstract platform project",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      }
    },
    "ToolsetProject": {
      "description": "Abstract platform project",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "BranchStatusCollection": {
      "description": "A collection of branch status",
      "type": "array",
      "items": {
        "description": "The branch build status",
        "required": [
          "configured"
        ],
        "properties": {
          "configured": {
            "type": "boolean"
          },
          "lastBuild": {
            "required": [
              "id",
              "buildNumber",
              "queueTime",
              "status",
              "result",
              "sourceBranch",
              "sourceVersion"
            ],
            "properties": {
              "id": {
                "description": "The build ID",
                "minimum": 0,
                "exclusiveMinimum": true,
                "type": "integer"
              },
              "buildNumber": {
                "description": "The build number",
                "type": "string"
              },
              "queueTime": {
                "format": "dateTime",
                "description": "The time the build was queued",
                "type": "string"
              },
              "startTime": {
                "format": "dateTime",
                "description": "The time the build was started",
                "type": "string"
              },
              "finishTime": {
                "format": "dateTime",
                "description": "The time the build was finished",
                "type": "string"
              },
              "lastChangedDate": {
                "format": "dateTime",
                "description": "The time the build status was last changed",
                "type": "string"
              },
              "status": {
                "description": "The build status",
                "type": "string"
              },
              "result": {
                "description": "The build result",
                "type": "string"
              },
              "sourceBranch": {
                "description": "The source branch name",
                "type": "string"
              },
              "sourceVersion": {
                "description": "The source SHA",
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": {
          "description": "The branch build core properties",
          "properties": {
            "branch": {
              "required": [
                "name",
                "commit"
              ],
              "properties": {
                "name": {
                  "description": "The branch name",
                  "type": "string"
                },
                "commit": {
                  "properties": {
                    "sha": {
                      "description": "The commit SHA",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to the commit",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "enabled": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "BranchStatus": {
      "description": "The branch build status",
      "required": [
        "configured"
      ],
      "properties": {
        "configured": {
          "type": "boolean"
        },
        "lastBuild": {
          "required": [
            "id",
            "buildNumber",
            "queueTime",
            "status",
            "result",
            "sourceBranch",
            "sourceVersion"
          ],
          "properties": {
            "id": {
              "description": "The build ID",
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "integer"
            },
            "buildNumber": {
              "description": "The build number",
              "type": "string"
            },
            "queueTime": {
              "format": "dateTime",
              "description": "The time the build was queued",
              "type": "string"
            },
            "startTime": {
              "format": "dateTime",
              "description": "The time the build was started",
              "type": "string"
            },
            "finishTime": {
              "format": "dateTime",
              "description": "The time the build was finished",
              "type": "string"
            },
            "lastChangedDate": {
              "format": "dateTime",
              "description": "The time the build status was last changed",
              "type": "string"
            },
            "status": {
              "description": "The build status",
              "type": "string"
            },
            "result": {
              "description": "The build result",
              "type": "string"
            },
            "sourceBranch": {
              "description": "The source branch name",
              "type": "string"
            },
            "sourceVersion": {
              "description": "The source SHA",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": {
        "description": "The branch build core properties",
        "properties": {
          "branch": {
            "required": [
              "name",
              "commit"
            ],
            "properties": {
              "name": {
                "description": "The branch name",
                "type": "string"
              },
              "commit": {
                "properties": {
                  "sha": {
                    "description": "The commit SHA",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to the commit",
                    "type": "string"
                  }
                }
              }
            }
          },
          "enabled": {
            "type": "boolean"
          }
        }
      }
    },
    "BranchProperties": {
      "description": "The branch build core properties",
      "properties": {
        "branch": {
          "required": [
            "name",
            "commit"
          ],
          "properties": {
            "name": {
              "description": "The branch name",
              "type": "string"
            },
            "commit": {
              "properties": {
                "sha": {
                  "description": "The commit SHA",
                  "type": "string"
                },
                "url": {
                  "description": "The URL to the commit",
                  "type": "string"
                }
              }
            }
          }
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "BranchConfiguration": {
      "description": "The branch build configuration",
      "properties": {
        "trigger": {
          "enum": [
            "continous",
            "continuous",
            "manual"
          ],
          "type": "string"
        },
        "testsEnabled": {
          "type": "boolean"
        },
        "badgeIsEnabled": {
          "type": "boolean"
        },
        "signed": {
          "type": "boolean"
        },
        "cloneFromBranch": {
          "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
          "type": "string"
        },
        "toolsets": {
          "description": "The branch build configuration for each toolset",
          "properties": {
            "xcode": {
              "description": "Build configuration when Xcode is part of the build steps",
              "properties": {
                "projectOrWorkspacePath": {
                  "description": "Xcode project/workspace path",
                  "type": "string"
                },
                "podfilePath": {
                  "description": "Path to CococaPods file, if present",
                  "type": "string"
                },
                "cartfilePath": {
                  "description": "Path to Carthage file, if present",
                  "type": "string"
                },
                "provisioningProfileEncoded": {
                  "type": "string"
                },
                "certificateEncoded": {
                  "type": "string"
                },
                "provisioningProfileFileId": {
                  "type": "string"
                },
                "certificateFileId": {
                  "type": "string"
                },
                "provisioningProfileUploadId": {
                  "type": "string"
                },
                "appExtensionProvisioningProfileFiles": {
                  "type": "array",
                  "items": {
                    "description": "Provisioning profile fetch and store information",
                    "properties": {
                      "fileName": {
                        "description": "Name of uploaded provisioning profile",
                        "type": "string"
                      },
                      "fileId": {
                        "description": "File id from secure file storage",
                        "type": "string"
                      },
                      "uploadId": {
                        "description": "Upload id to App Center File Upload Store",
                        "type": "string"
                      },
                      "targetBundleIdentifier": {
                        "description": "Target the provisioning profile is used to sign",
                        "type": "string"
                      }
                    }
                  }
                },
                "certificateUploadId": {
                  "type": "string"
                },
                "certificatePassword": {
                  "type": "string"
                },
                "scheme": {
                  "type": "string"
                },
                "xcodeVersion": {
                  "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                  "type": "string"
                },
                "provisioningProfileFilename": {
                  "type": "string"
                },
                "certificateFilename": {
                  "type": "string"
                },
                "teamId": {
                  "type": "string"
                },
                "automaticSigning": {
                  "type": "boolean"
                },
                "xcodeProjectSha": {
                  "description": "The selected pbxproject hash to the repositroy",
                  "type": "string"
                },
                "archiveConfiguration": {
                  "description": "The build configuration of the target to archive",
                  "type": "string"
                },
                "targetToArchive": {
                  "description": "The target id of the selected scheme to archive",
                  "type": "string"
                },
                "forceLegacyBuildSystem": {
                  "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                  "type": "boolean"
                }
              }
            },
            "javascript": {
              "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
              "properties": {
                "packageJsonPath": {
                  "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                  "type": "string"
                },
                "runTests": {
                  "description": "Whether to run Jest unit tests, via npm test, during the build",
                  "type": "boolean"
                },
                "reactNativeVersion": {
                  "description": "Version of React Native from package.json files",
                  "type": "string"
                }
              }
            },
            "xamarin": {
              "description": "Build configuration for Xamarin projects",
              "properties": {
                "slnPath": {
                  "type": "string"
                },
                "isSimBuild": {
                  "type": "boolean"
                },
                "args": {
                  "type": "string"
                },
                "configuration": {
                  "type": "string"
                },
                "p12File": {
                  "type": "string"
                },
                "p12Pwd": {
                  "type": "string"
                },
                "provProfile": {
                  "type": "string"
                },
                "monoVersion": {
                  "type": "string"
                },
                "sdkBundle": {
                  "type": "string"
                },
                "symlink": {
                  "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                  "type": "string"
                }
              }
            },
            "android": {
              "description": "Build configuration for Android projects",
              "properties": {
                "gradleWrapperPath": {
                  "description": "Path to the Gradle wrapper script",
                  "type": "string",
                  "example": "android/gradlew"
                },
                "module": {
                  "description": "The Gradle module to build",
                  "type": "string",
                  "example": "app"
                },
                "buildVariant": {
                  "description": "The Android build variant to build",
                  "type": "string",
                  "example": "release"
                },
                "runTests": {
                  "description": "Whether to run unit tests during the build (default)",
                  "default": true,
                  "type": "boolean"
                },
                "runLint": {
                  "description": "Whether to run lint checks during the build (default)",
                  "type": "boolean"
                },
                "isRoot": {
                  "description": "Whether it is the root module or not",
                  "type": "boolean"
                },
                "automaticSigning": {
                  "description": "Whether to apply automatic signing or not",
                  "type": "boolean"
                },
                "keystorePassword": {
                  "description": "The password of the keystore",
                  "type": "string"
                },
                "keyAlias": {
                  "description": "The key alias",
                  "type": "string"
                },
                "keyPassword": {
                  "description": "The key password",
                  "type": "string"
                },
                "keystoreFilename": {
                  "description": "The name of the keystore file",
                  "type": "string"
                },
                "keystoreEncoded": {
                  "description": "The keystore encoded value",
                  "type": "string"
                }
              }
            }
          }
        },
        "artifactVersioning": {
          "description": "The versioning configuration for artifacts built for this branch",
          "properties": {
            "buildNumberFormat": {
              "enum": [
                "buildId",
                "timestamp"
              ],
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": {
        "description": "The branch build core properties",
        "properties": {
          "branch": {
            "required": [
              "name",
              "commit"
            ],
            "properties": {
              "name": {
                "description": "The branch name",
                "type": "string"
              },
              "commit": {
                "properties": {
                  "sha": {
                    "description": "The commit SHA",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to the commit",
                    "type": "string"
                  }
                }
              }
            }
          },
          "enabled": {
            "type": "boolean"
          }
        }
      }
    },
    "BranchConfigurationRevisions": {
      "description": "list of branch configuration revisions",
      "type": "array",
      "items": {
        "description": "branch configuration revision",
        "properties": {
          "id": {
            "type": "string"
          },
          "revision": {
            "type": "number"
          },
          "changedDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "changeType": {
            "type": "string"
          },
          "definitionUrl": {
            "type": "string"
          },
          "changedBy": {
            "description": "user who made a change in branch configuration",
            "properties": {
              "displayName": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "BranchConfigurationRevision": {
      "description": "branch configuration revision",
      "properties": {
        "id": {
          "type": "string"
        },
        "revision": {
          "type": "number"
        },
        "changedDate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "changeType": {
          "type": "string"
        },
        "definitionUrl": {
          "type": "string"
        },
        "changedBy": {
          "description": "user who made a change in branch configuration",
          "properties": {
            "displayName": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      }
    },
    "BranchConfigurationRevisionAuthor": {
      "description": "user who made a change in branch configuration",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "BranchConfigurationWithId": {
      "allOf": [
        {
          "description": "The branch build configuration",
          "properties": {
            "trigger": {
              "enum": [
                "continous",
                "continuous",
                "manual"
              ],
              "type": "string"
            },
            "testsEnabled": {
              "type": "boolean"
            },
            "badgeIsEnabled": {
              "type": "boolean"
            },
            "signed": {
              "type": "boolean"
            },
            "cloneFromBranch": {
              "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
              "type": "string"
            },
            "toolsets": {
              "description": "The branch build configuration for each toolset",
              "properties": {
                "xcode": {
                  "description": "Build configuration when Xcode is part of the build steps",
                  "properties": {
                    "projectOrWorkspacePath": {
                      "description": "Xcode project/workspace path",
                      "type": "string"
                    },
                    "podfilePath": {
                      "description": "Path to CococaPods file, if present",
                      "type": "string"
                    },
                    "cartfilePath": {
                      "description": "Path to Carthage file, if present",
                      "type": "string"
                    },
                    "provisioningProfileEncoded": {
                      "type": "string"
                    },
                    "certificateEncoded": {
                      "type": "string"
                    },
                    "provisioningProfileFileId": {
                      "type": "string"
                    },
                    "certificateFileId": {
                      "type": "string"
                    },
                    "provisioningProfileUploadId": {
                      "type": "string"
                    },
                    "appExtensionProvisioningProfileFiles": {
                      "type": "array",
                      "items": {
                        "description": "Provisioning profile fetch and store information",
                        "properties": {
                          "fileName": {
                            "description": "Name of uploaded provisioning profile",
                            "type": "string"
                          },
                          "fileId": {
                            "description": "File id from secure file storage",
                            "type": "string"
                          },
                          "uploadId": {
                            "description": "Upload id to App Center File Upload Store",
                            "type": "string"
                          },
                          "targetBundleIdentifier": {
                            "description": "Target the provisioning profile is used to sign",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "certificateUploadId": {
                      "type": "string"
                    },
                    "certificatePassword": {
                      "type": "string"
                    },
                    "scheme": {
                      "type": "string"
                    },
                    "xcodeVersion": {
                      "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                      "type": "string"
                    },
                    "provisioningProfileFilename": {
                      "type": "string"
                    },
                    "certificateFilename": {
                      "type": "string"
                    },
                    "teamId": {
                      "type": "string"
                    },
                    "automaticSigning": {
                      "type": "boolean"
                    },
                    "xcodeProjectSha": {
                      "description": "The selected pbxproject hash to the repositroy",
                      "type": "string"
                    },
                    "archiveConfiguration": {
                      "description": "The build configuration of the target to archive",
                      "type": "string"
                    },
                    "targetToArchive": {
                      "description": "The target id of the selected scheme to archive",
                      "type": "string"
                    },
                    "forceLegacyBuildSystem": {
                      "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                      "type": "boolean"
                    }
                  }
                },
                "javascript": {
                  "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                  "properties": {
                    "packageJsonPath": {
                      "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                      "type": "string"
                    },
                    "runTests": {
                      "description": "Whether to run Jest unit tests, via npm test, during the build",
                      "type": "boolean"
                    },
                    "reactNativeVersion": {
                      "description": "Version of React Native from package.json files",
                      "type": "string"
                    }
                  }
                },
                "xamarin": {
                  "description": "Build configuration for Xamarin projects",
                  "properties": {
                    "slnPath": {
                      "type": "string"
                    },
                    "isSimBuild": {
                      "type": "boolean"
                    },
                    "args": {
                      "type": "string"
                    },
                    "configuration": {
                      "type": "string"
                    },
                    "p12File": {
                      "type": "string"
                    },
                    "p12Pwd": {
                      "type": "string"
                    },
                    "provProfile": {
                      "type": "string"
                    },
                    "monoVersion": {
                      "type": "string"
                    },
                    "sdkBundle": {
                      "type": "string"
                    },
                    "symlink": {
                      "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                      "type": "string"
                    }
                  }
                },
                "android": {
                  "description": "Build configuration for Android projects",
                  "properties": {
                    "gradleWrapperPath": {
                      "description": "Path to the Gradle wrapper script",
                      "type": "string",
                      "example": "android/gradlew"
                    },
                    "module": {
                      "description": "The Gradle module to build",
                      "type": "string",
                      "example": "app"
                    },
                    "buildVariant": {
                      "description": "The Android build variant to build",
                      "type": "string",
                      "example": "release"
                    },
                    "runTests": {
                      "description": "Whether to run unit tests during the build (default)",
                      "default": true,
                      "type": "boolean"
                    },
                    "runLint": {
                      "description": "Whether to run lint checks during the build (default)",
                      "type": "boolean"
                    },
                    "isRoot": {
                      "description": "Whether it is the root module or not",
                      "type": "boolean"
                    },
                    "automaticSigning": {
                      "description": "Whether to apply automatic signing or not",
                      "type": "boolean"
                    },
                    "keystorePassword": {
                      "description": "The password of the keystore",
                      "type": "string"
                    },
                    "keyAlias": {
                      "description": "The key alias",
                      "type": "string"
                    },
                    "keyPassword": {
                      "description": "The key password",
                      "type": "string"
                    },
                    "keystoreFilename": {
                      "description": "The name of the keystore file",
                      "type": "string"
                    },
                    "keystoreEncoded": {
                      "description": "The keystore encoded value",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "artifactVersioning": {
              "description": "The versioning configuration for artifacts built for this branch",
              "properties": {
                "buildNumberFormat": {
                  "enum": [
                    "buildId",
                    "timestamp"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": {
            "description": "The branch build core properties",
            "properties": {
              "branch": {
                "required": [
                  "name",
                  "commit"
                ],
                "properties": {
                  "name": {
                    "description": "The branch name",
                    "type": "string"
                  },
                  "commit": {
                    "properties": {
                      "sha": {
                        "description": "The commit SHA",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL to the commit",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "enabled": {
                "type": "boolean"
              }
            }
          }
        },
        {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            }
          }
        }
      ]
    },
    "BranchConfigurationToolsets": {
      "description": "The branch build configuration for each toolset",
      "properties": {
        "xcode": {
          "description": "Build configuration when Xcode is part of the build steps",
          "properties": {
            "projectOrWorkspacePath": {
              "description": "Xcode project/workspace path",
              "type": "string"
            },
            "podfilePath": {
              "description": "Path to CococaPods file, if present",
              "type": "string"
            },
            "cartfilePath": {
              "description": "Path to Carthage file, if present",
              "type": "string"
            },
            "provisioningProfileEncoded": {
              "type": "string"
            },
            "certificateEncoded": {
              "type": "string"
            },
            "provisioningProfileFileId": {
              "type": "string"
            },
            "certificateFileId": {
              "type": "string"
            },
            "provisioningProfileUploadId": {
              "type": "string"
            },
            "appExtensionProvisioningProfileFiles": {
              "type": "array",
              "items": {
                "description": "Provisioning profile fetch and store information",
                "properties": {
                  "fileName": {
                    "description": "Name of uploaded provisioning profile",
                    "type": "string"
                  },
                  "fileId": {
                    "description": "File id from secure file storage",
                    "type": "string"
                  },
                  "uploadId": {
                    "description": "Upload id to App Center File Upload Store",
                    "type": "string"
                  },
                  "targetBundleIdentifier": {
                    "description": "Target the provisioning profile is used to sign",
                    "type": "string"
                  }
                }
              }
            },
            "certificateUploadId": {
              "type": "string"
            },
            "certificatePassword": {
              "type": "string"
            },
            "scheme": {
              "type": "string"
            },
            "xcodeVersion": {
              "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
              "type": "string"
            },
            "provisioningProfileFilename": {
              "type": "string"
            },
            "certificateFilename": {
              "type": "string"
            },
            "teamId": {
              "type": "string"
            },
            "automaticSigning": {
              "type": "boolean"
            },
            "xcodeProjectSha": {
              "description": "The selected pbxproject hash to the repositroy",
              "type": "string"
            },
            "archiveConfiguration": {
              "description": "The build configuration of the target to archive",
              "type": "string"
            },
            "targetToArchive": {
              "description": "The target id of the selected scheme to archive",
              "type": "string"
            },
            "forceLegacyBuildSystem": {
              "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
              "type": "boolean"
            }
          }
        },
        "javascript": {
          "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
          "properties": {
            "packageJsonPath": {
              "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
              "type": "string"
            },
            "runTests": {
              "description": "Whether to run Jest unit tests, via npm test, during the build",
              "type": "boolean"
            },
            "reactNativeVersion": {
              "description": "Version of React Native from package.json files",
              "type": "string"
            }
          }
        },
        "xamarin": {
          "description": "Build configuration for Xamarin projects",
          "properties": {
            "slnPath": {
              "type": "string"
            },
            "isSimBuild": {
              "type": "boolean"
            },
            "args": {
              "type": "string"
            },
            "configuration": {
              "type": "string"
            },
            "p12File": {
              "type": "string"
            },
            "p12Pwd": {
              "type": "string"
            },
            "provProfile": {
              "type": "string"
            },
            "monoVersion": {
              "type": "string"
            },
            "sdkBundle": {
              "type": "string"
            },
            "symlink": {
              "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
              "type": "string"
            }
          }
        },
        "android": {
          "description": "Build configuration for Android projects",
          "properties": {
            "gradleWrapperPath": {
              "description": "Path to the Gradle wrapper script",
              "type": "string",
              "example": "android/gradlew"
            },
            "module": {
              "description": "The Gradle module to build",
              "type": "string",
              "example": "app"
            },
            "buildVariant": {
              "description": "The Android build variant to build",
              "type": "string",
              "example": "release"
            },
            "runTests": {
              "description": "Whether to run unit tests during the build (default)",
              "default": true,
              "type": "boolean"
            },
            "runLint": {
              "description": "Whether to run lint checks during the build (default)",
              "type": "boolean"
            },
            "isRoot": {
              "description": "Whether it is the root module or not",
              "type": "boolean"
            },
            "automaticSigning": {
              "description": "Whether to apply automatic signing or not",
              "type": "boolean"
            },
            "keystorePassword": {
              "description": "The password of the keystore",
              "type": "string"
            },
            "keyAlias": {
              "description": "The key alias",
              "type": "string"
            },
            "keyPassword": {
              "description": "The key password",
              "type": "string"
            },
            "keystoreFilename": {
              "description": "The name of the keystore file",
              "type": "string"
            },
            "keystoreEncoded": {
              "description": "The keystore encoded value",
              "type": "string"
            }
          }
        }
      }
    },
    "BranchConfigurationArtifactVersioning": {
      "description": "The versioning configuration for artifacts built for this branch",
      "properties": {
        "buildNumberFormat": {
          "enum": [
            "buildId",
            "timestamp"
          ],
          "type": "string"
        }
      }
    },
    "XcodeBranchConfigurationProperties": {
      "description": "Build configuration when Xcode is part of the build steps",
      "properties": {
        "projectOrWorkspacePath": {
          "description": "Xcode project/workspace path",
          "type": "string"
        },
        "podfilePath": {
          "description": "Path to CococaPods file, if present",
          "type": "string"
        },
        "cartfilePath": {
          "description": "Path to Carthage file, if present",
          "type": "string"
        },
        "provisioningProfileEncoded": {
          "type": "string"
        },
        "certificateEncoded": {
          "type": "string"
        },
        "provisioningProfileFileId": {
          "type": "string"
        },
        "certificateFileId": {
          "type": "string"
        },
        "provisioningProfileUploadId": {
          "type": "string"
        },
        "appExtensionProvisioningProfileFiles": {
          "type": "array",
          "items": {
            "description": "Provisioning profile fetch and store information",
            "properties": {
              "fileName": {
                "description": "Name of uploaded provisioning profile",
                "type": "string"
              },
              "fileId": {
                "description": "File id from secure file storage",
                "type": "string"
              },
              "uploadId": {
                "description": "Upload id to App Center File Upload Store",
                "type": "string"
              },
              "targetBundleIdentifier": {
                "description": "Target the provisioning profile is used to sign",
                "type": "string"
              }
            }
          }
        },
        "certificateUploadId": {
          "type": "string"
        },
        "certificatePassword": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "xcodeVersion": {
          "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
          "type": "string"
        },
        "provisioningProfileFilename": {
          "type": "string"
        },
        "certificateFilename": {
          "type": "string"
        },
        "teamId": {
          "type": "string"
        },
        "automaticSigning": {
          "type": "boolean"
        },
        "xcodeProjectSha": {
          "description": "The selected pbxproject hash to the repositroy",
          "type": "string"
        },
        "archiveConfiguration": {
          "description": "The build configuration of the target to archive",
          "type": "string"
        },
        "targetToArchive": {
          "description": "The target id of the selected scheme to archive",
          "type": "string"
        },
        "forceLegacyBuildSystem": {
          "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
          "type": "boolean"
        }
      }
    },
    "AndroidBranchConfigurationProperties": {
      "description": "Build configuration for Android projects",
      "properties": {
        "gradleWrapperPath": {
          "description": "Path to the Gradle wrapper script",
          "type": "string",
          "example": "android/gradlew"
        },
        "module": {
          "description": "The Gradle module to build",
          "type": "string",
          "example": "app"
        },
        "buildVariant": {
          "description": "The Android build variant to build",
          "type": "string",
          "example": "release"
        },
        "runTests": {
          "description": "Whether to run unit tests during the build (default)",
          "default": true,
          "type": "boolean"
        },
        "runLint": {
          "description": "Whether to run lint checks during the build (default)",
          "type": "boolean"
        },
        "isRoot": {
          "description": "Whether it is the root module or not",
          "type": "boolean"
        },
        "automaticSigning": {
          "description": "Whether to apply automatic signing or not",
          "type": "boolean"
        },
        "keystorePassword": {
          "description": "The password of the keystore",
          "type": "string"
        },
        "keyAlias": {
          "description": "The key alias",
          "type": "string"
        },
        "keyPassword": {
          "description": "The key password",
          "type": "string"
        },
        "keystoreFilename": {
          "description": "The name of the keystore file",
          "type": "string"
        },
        "keystoreEncoded": {
          "description": "The keystore encoded value",
          "type": "string"
        }
      }
    },
    "JavaScriptBranchConfigurationProperties": {
      "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
      "properties": {
        "packageJsonPath": {
          "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
          "type": "string"
        },
        "runTests": {
          "description": "Whether to run Jest unit tests, via npm test, during the build",
          "type": "boolean"
        },
        "reactNativeVersion": {
          "description": "Version of React Native from package.json files",
          "type": "string"
        }
      }
    },
    "XamarinBranchConfigurationProperties": {
      "description": "Build configuration for Xamarin projects",
      "properties": {
        "slnPath": {
          "type": "string"
        },
        "isSimBuild": {
          "type": "boolean"
        },
        "args": {
          "type": "string"
        },
        "configuration": {
          "type": "string"
        },
        "p12File": {
          "type": "string"
        },
        "p12Pwd": {
          "type": "string"
        },
        "provProfile": {
          "type": "string"
        },
        "monoVersion": {
          "type": "string"
        },
        "sdkBundle": {
          "type": "string"
        },
        "symlink": {
          "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
          "type": "string"
        }
      }
    },
    "Branch": {
      "required": [
        "name",
        "commit"
      ],
      "properties": {
        "name": {
          "description": "The branch name",
          "type": "string"
        },
        "commit": {
          "properties": {
            "sha": {
              "description": "The commit SHA",
              "type": "string"
            },
            "url": {
              "description": "The URL to the commit",
              "type": "string"
            }
          }
        }
      }
    },
    "Commit": {
      "properties": {
        "sha": {
          "description": "The commit SHA",
          "type": "string"
        },
        "url": {
          "description": "The URL to the commit",
          "type": "string"
        }
      }
    },
    "CommitDetails": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "sha": {
              "description": "The commit SHA",
              "type": "string"
            },
            "url": {
              "description": "The URL to the commit",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "commit": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "Commit message",
                  "type": "string"
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "description": "Date and time of the commit",
                      "type": "string"
                    },
                    "name": {
                      "description": "Author name",
                      "type": "string"
                    },
                    "email": {
                      "description": "Author's email",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "CommitDetailsList": {
      "description": "A list of commits",
      "type": "array",
      "items": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "sha": {
                "description": "The commit SHA",
                "type": "string"
              },
              "url": {
                "description": "The URL to the commit",
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "commit": {
                "type": "object",
                "properties": {
                  "message": {
                    "description": "Commit message",
                    "type": "string"
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "description": "Date and time of the commit",
                        "type": "string"
                      },
                      "name": {
                        "description": "Author name",
                        "type": "string"
                      },
                      "email": {
                        "description": "Author's email",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "RepoConfig": {
      "required": [
        "id",
        "type",
        "state",
        "repo_url"
      ],
      "allOf": [
        {
          "required": [
            "repo_url"
          ],
          "allOf": [
            {
              "properties": {
                "repo_url": {
                  "description": "The repository's git url, must be a HTTPS URL",
                  "type": "string",
                  "example": "https://github.com/foo/bar.git"
                },
                "repo_id": {
                  "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                  "type": "string"
                },
                "external_user_id": {
                  "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                  "type": "string"
                },
                "service_connection_id": {
                  "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                  "type": "string"
                }
              }
            }
          ],
          "properties": {
            "installation_id": {
              "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
              "type": "string"
            }
          }
        }
      ],
      "properties": {
        "id": {
          "description": "Repository configuration identifier",
          "type": "string"
        },
        "type": {
          "description": "Type of repository",
          "type": "string"
        },
        "state": {
          "description": "State of the configuration",
          "enum": [
            "unauthorized",
            "inactive",
            "active"
          ],
          "type": "string"
        },
        "user_email": {
          "description": "Email of the user who linked the repository",
          "type": "string"
        }
      }
    },
    "RepoConfigPostRequest": {
      "required": [
        "repo_url"
      ],
      "allOf": [
        {
          "properties": {
            "repo_url": {
              "description": "The repository's git url, must be a HTTPS URL",
              "type": "string",
              "example": "https://github.com/foo/bar.git"
            },
            "repo_id": {
              "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
              "type": "string"
            },
            "external_user_id": {
              "description": "The external user id from the repository provider. Required for GitLab.com repositories",
              "type": "string"
            },
            "service_connection_id": {
              "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
              "type": "string"
            }
          }
        }
      ],
      "properties": {
        "installation_id": {
          "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
          "type": "string"
        }
      }
    },
    "RepoConfigCommon": {
      "properties": {
        "repo_url": {
          "description": "The repository's git url, must be a HTTPS URL",
          "type": "string",
          "example": "https://github.com/foo/bar.git"
        },
        "repo_id": {
          "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
          "type": "string"
        },
        "external_user_id": {
          "description": "The external user id from the repository provider. Required for GitLab.com repositories",
          "type": "string"
        },
        "service_connection_id": {
          "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
          "type": "string"
        }
      }
    },
    "RepoConfigs": {
      "description": "A list of repo configurations",
      "type": "array",
      "items": {
        "required": [
          "id",
          "type",
          "state",
          "repo_url"
        ],
        "allOf": [
          {
            "required": [
              "repo_url"
            ],
            "allOf": [
              {
                "properties": {
                  "repo_url": {
                    "description": "The repository's git url, must be a HTTPS URL",
                    "type": "string",
                    "example": "https://github.com/foo/bar.git"
                  },
                  "repo_id": {
                    "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                    "type": "string"
                  },
                  "external_user_id": {
                    "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                    "type": "string"
                  },
                  "service_connection_id": {
                    "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                    "type": "string"
                  }
                }
              }
            ],
            "properties": {
              "installation_id": {
                "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                "type": "string"
              }
            }
          }
        ],
        "properties": {
          "id": {
            "description": "Repository configuration identifier",
            "type": "string"
          },
          "type": {
            "description": "Type of repository",
            "type": "string"
          },
          "state": {
            "description": "State of the configuration",
            "enum": [
              "unauthorized",
              "inactive",
              "active"
            ],
            "type": "string"
          },
          "user_email": {
            "description": "Email of the user who linked the repository",
            "type": "string"
          }
        }
      }
    },
    "RepoInfo": {
      "required": [
        "repo_url"
      ],
      "properties": {
        "repo_url": {
          "description": "The repository url",
          "type": "string"
        },
        "external_user_id": {
          "description": "The external user ID",
          "type": "string"
        }
      }
    },
    "PatchRepoInfo": {
      "properties": {
        "external_user_id": {
          "description": "The external user ID",
          "type": "string"
        }
      }
    },
    "Toolsets": {
      "description": "Set of toolsets available for app",
      "type": "object",
      "properties": {
        "xamarin": {
          "description": "A list of Xamarin SDK bundles",
          "type": "array",
          "items": {
            "description": "The Xamarin SDK bundle",
            "properties": {
              "monoVersion": {
                "description": "The Mono version",
                "type": "string"
              },
              "sdkBundle": {
                "description": "The Xamarin SDK version",
                "type": "string"
              },
              "current": {
                "description": "If the SDK is latest stable",
                "type": "boolean"
              },
              "stable": {
                "description": "If the SDK is stable",
                "type": "boolean"
              },
              "xcodeVersions": {
                "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "xcode": {
          "description": "A list of Xcode versions",
          "type": "array",
          "items": {
            "description": "The Xcode version",
            "properties": {
              "name": {
                "description": "The version name",
                "type": "string"
              },
              "current": {
                "description": "If the Xcode is latest stable",
                "type": "boolean"
              }
            }
          }
        },
        "node": {
          "description": "A list of Node versions",
          "type": "array",
          "items": {
            "description": "The Node version",
            "properties": {
              "name": {
                "description": "The version name",
                "type": "string"
              },
              "current": {
                "description": "If the Node version is default for AppCenter",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "XcodeVersions": {
      "description": "A list of Xcode versions",
      "type": "array",
      "items": {
        "description": "The Xcode version",
        "properties": {
          "name": {
            "description": "The version name",
            "type": "string"
          },
          "current": {
            "description": "If the Xcode is latest stable",
            "type": "boolean"
          }
        }
      }
    },
    "XcodeVersion": {
      "description": "The Xcode version",
      "properties": {
        "name": {
          "description": "The version name",
          "type": "string"
        },
        "current": {
          "description": "If the Xcode is latest stable",
          "type": "boolean"
        }
      }
    },
    "XamarinSDKBundles": {
      "description": "A list of Xamarin SDK bundles",
      "type": "array",
      "items": {
        "description": "The Xamarin SDK bundle",
        "properties": {
          "monoVersion": {
            "description": "The Mono version",
            "type": "string"
          },
          "sdkBundle": {
            "description": "The Xamarin SDK version",
            "type": "string"
          },
          "current": {
            "description": "If the SDK is latest stable",
            "type": "boolean"
          },
          "stable": {
            "description": "If the SDK is stable",
            "type": "boolean"
          },
          "xcodeVersions": {
            "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "XamarinSDKBundle": {
      "description": "The Xamarin SDK bundle",
      "properties": {
        "monoVersion": {
          "description": "The Mono version",
          "type": "string"
        },
        "sdkBundle": {
          "description": "The Xamarin SDK version",
          "type": "string"
        },
        "current": {
          "description": "If the SDK is latest stable",
          "type": "boolean"
        },
        "stable": {
          "description": "If the SDK is stable",
          "type": "boolean"
        },
        "xcodeVersions": {
          "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NodeVersions": {
      "description": "A list of Node versions",
      "type": "array",
      "items": {
        "description": "The Node version",
        "properties": {
          "name": {
            "description": "The version name",
            "type": "string"
          },
          "current": {
            "description": "If the Node version is default for AppCenter",
            "type": "boolean"
          }
        }
      }
    },
    "NodeVersion": {
      "description": "The Node version",
      "properties": {
        "name": {
          "description": "The version name",
          "type": "string"
        },
        "current": {
          "description": "If the Node version is default for AppCenter",
          "type": "boolean"
        }
      }
    },
    "Builds": {
      "description": "A list of builds",
      "type": "array",
      "items": {
        "required": [
          "id",
          "buildNumber",
          "queueTime",
          "status",
          "result",
          "sourceBranch",
          "sourceVersion"
        ],
        "properties": {
          "id": {
            "description": "The build ID",
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer"
          },
          "buildNumber": {
            "description": "The build number",
            "type": "string"
          },
          "queueTime": {
            "format": "dateTime",
            "description": "The time the build was queued",
            "type": "string"
          },
          "startTime": {
            "format": "dateTime",
            "description": "The time the build was started",
            "type": "string"
          },
          "finishTime": {
            "format": "dateTime",
            "description": "The time the build was finished",
            "type": "string"
          },
          "lastChangedDate": {
            "format": "dateTime",
            "description": "The time the build status was last changed",
            "type": "string"
          },
          "status": {
            "description": "The build status",
            "type": "string"
          },
          "result": {
            "description": "The build result",
            "type": "string"
          },
          "sourceBranch": {
            "description": "The source branch name",
            "type": "string"
          },
          "sourceVersion": {
            "description": "The source SHA",
            "type": "string"
          }
        }
      }
    },
    "BuildParams": {
      "type": "object",
      "properties": {
        "sourceVersion": {
          "description": "Version to build which represents the full Git commit reference",
          "type": "string"
        },
        "debug": {
          "description": "Run build in debug mode",
          "type": "boolean"
        }
      }
    },
    "Build": {
      "required": [
        "id",
        "buildNumber",
        "queueTime",
        "status",
        "result",
        "sourceBranch",
        "sourceVersion"
      ],
      "properties": {
        "id": {
          "description": "The build ID",
          "minimum": 0,
          "exclusiveMinimum": true,
          "type": "integer"
        },
        "buildNumber": {
          "description": "The build number",
          "type": "string"
        },
        "queueTime": {
          "format": "dateTime",
          "description": "The time the build was queued",
          "type": "string"
        },
        "startTime": {
          "format": "dateTime",
          "description": "The time the build was started",
          "type": "string"
        },
        "finishTime": {
          "format": "dateTime",
          "description": "The time the build was finished",
          "type": "string"
        },
        "lastChangedDate": {
          "format": "dateTime",
          "description": "The time the build status was last changed",
          "type": "string"
        },
        "status": {
          "description": "The build status",
          "type": "string"
        },
        "result": {
          "description": "The build result",
          "type": "string"
        },
        "sourceBranch": {
          "description": "The source branch name",
          "type": "string"
        },
        "sourceVersion": {
          "description": "The source SHA",
          "type": "string"
        }
      }
    },
    "BuildPatch": {
      "properties": {
        "status": {
          "description": "The build status; used to cancel builds",
          "enum": [
            "cancelling"
          ],
          "type": "string"
        }
      }
    },
    "BuildLog": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BuildTimeline": {
      "properties": {
        "id": {
          "type": "string"
        },
        "records": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "order": {
                "type": "number"
              },
              "percentComplete": {
                "type": "number"
              },
              "currentOperation": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "result": {
                "type": "string"
              },
              "errorCount": {
                "type": "number"
              },
              "warningCount": {
                "type": "number"
              },
              "issues": {
                "type": "array",
                "items": {
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              },
              "startTime": {
                "type": "string"
              },
              "finishTime": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "BuildTimelineRecord": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "number"
        },
        "percentComplete": {
          "type": "number"
        },
        "currentOperation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "errorCount": {
          "type": "number"
        },
        "warningCount": {
          "type": "number"
        },
        "issues": {
          "type": "array",
          "items": {
            "properties": {
              "category": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        },
        "startTime": {
          "type": "string"
        },
        "finishTime": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "BuildIssue": {
      "properties": {
        "category": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DistributionRequest": {
      "properties": {
        "destinations": {
          "description": "Array of objects {id:string, type:string} with \"id\" being the distribution group ID, store ID, or tester email, and \"type\" being \"group\", \"store\", or \"tester\"",
          "type": "array",
          "items": {
            "description": "Destination details for distributing build releases",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "store",
                  "group",
                  "tester"
                ],
                "type": "string"
              }
            }
          }
        },
        "releaseNotes": {
          "description": "The release notes",
          "type": "string"
        },
        "mandatoryUpdate": {
          "type": "boolean"
        },
        "notifyTesters": {
          "default": true,
          "type": "boolean"
        }
      }
    },
    "DistributionResponse": {
      "properties": {
        "status": {
          "description": "Status of the Request",
          "type": "string"
        },
        "upload_id": {
          "description": "A unique ID of the upload",
          "type": "string"
        }
      }
    },
    "BuildServiceStatus": {
      "properties": {
        "status": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "valid_until": {
          "type": "integer"
        },
        "os": {
          "type": "string"
        }
      }
    },
    "BuildAgentQueue": {
      "required": [
        "queue"
      ],
      "properties": {
        "queue": {
          "type": "string"
        }
      }
    },
    "ValidationErrorResponse": {
      "required": [
        "id",
        "code",
        "message"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "BuildAgentQueuesResponse": {
      "description": "A list of queues configured in build definitions",
      "type": "array",
      "items": {
        "description": "Queue configured in build definition",
        "properties": {
          "buildDefinition": {
            "description": "Name of the build definition",
            "type": "string"
          },
          "name": {
            "description": "Name of the queue",
            "type": "string"
          }
        }
      }
    },
    "BuildAgentQueueResponse": {
      "description": "Queue configured in build definition",
      "properties": {
        "buildDefinition": {
          "description": "Name of the build definition",
          "type": "string"
        },
        "name": {
          "description": "Name of the queue",
          "type": "string"
        }
      }
    },
    "AgentQueuesResponse": {
      "description": "A list of agent queues",
      "type": "array",
      "items": {
        "description": "Agent queue",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      }
    },
    "AgentQueueResponse": {
      "description": "Agent queue",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AppBuildFeatures": {
      "description": "A list of supported features",
      "type": "array",
      "items": {
        "description": "supported feature",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "AppBuildFeature": {
      "description": "supported feature",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "boolean"
        }
      }
    },
    "DestinationDetails": {
      "description": "Destination details for distributing build releases",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "store",
            "group",
            "tester"
          ],
          "type": "string"
        }
      }
    },
    "FileValidationDetails": {
      "description": "Additional details required for file validation",
      "required": [
        "p12password"
      ],
      "properties": {
        "p12password": {
          "type": "string"
        },
        "certificateUploadId": {
          "type": "string"
        }
      }
    },
    "BuildConcurrencyResponse": {
      "description": "Number of pipelines",
      "properties": {
        "quantity": {
          "description": "The number of pipelines set by the billing plan",
          "type": "number"
        },
        "committed_quantity": {
          "description": "The number of pipelines committed, which can be equal or greater than the number from the billing plan",
          "type": "number"
        }
      }
    },
    "CreateReleaseUploadResponse": {
      "required": [
        "id",
        "upload_domain",
        "token",
        "url_encoded_token",
        "package_asset_id"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The ID for the newly created upload. It is going to be required later in the process.",
          "type": "string"
        },
        "upload_domain": {
          "description": "The URL domain used to upload the release.",
          "type": "string"
        },
        "token": {
          "description": "The access token used for upload permissions.",
          "type": "string"
        },
        "url_encoded_token": {
          "description": "The access token used for upload permissions (URL encoded to use as a single query parameter).",
          "type": "string"
        },
        "package_asset_id": {
          "format": "uuid",
          "description": "The associated asset ID in the file management service associated with this uploaded.",
          "type": "string"
        }
      }
    },
    "GetReleaseStatusResponse": {
      "required": [
        "id",
        "upload_status"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The ID for the upload.",
          "type": "string"
        },
        "upload_status": {
          "description": "The current upload status.",
          "enum": [
            "uploadStarted",
            "uploadFinished",
            "readyToBePublished",
            "malwareDetected",
            "error"
          ],
          "type": "string"
        },
        "error_details": {
          "description": "Details describing what went wrong processing the upload. Will only be set if status = 'error'.",
          "type": "string"
        },
        "release_distinct_id": {
          "description": "The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.",
          "type": "number"
        },
        "release_url": {
          "description": "The URL of the release. Will only be set when the status = 'readyToBePublished'."
        }
      }
    },
    "PatchReleaseUploadStatusRequest": {
      "required": [
        "upload_status"
      ],
      "properties": {
        "upload_status": {
          "description": "The new status of the release upload",
          "enum": [
            "uploadFinished",
            "uploadCanceled"
          ],
          "type": "string"
        }
      }
    },
    "PostCreateReleaseUploadRequest": {
      "properties": {
        "build_version": {
          "description": "User defined build version",
          "type": "string"
        },
        "build_number": {
          "description": "User defined build number",
          "type": "string"
        }
      }
    },
    "PatchReleaseUploadStatusResponse": {
      "required": [
        "id",
        "upload_status"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The ID for the upload.",
          "type": "string"
        },
        "upload_status": {
          "description": "The current upload status.",
          "enum": [
            "uploadStarted",
            "uploadFinished",
            "uploadCanceled",
            "readyToBePublished",
            "malwareDetected",
            "error"
          ],
          "type": "string"
        }
      }
    },
    "TesterAppWithReleaseResponse": {
      "properties": {
        "id": {
          "description": "The unique ID (UUID) of the app",
          "type": "string"
        },
        "release": {
          "allOf": [
            {
              "description": "Response for getting a list of releases in a distribution group",
              "required": [
                "id",
                "version",
                "enabled",
                "uploaded_at",
                "short_version",
                "mandatory_update"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID identifying this unique release.",
                  "type": "integer"
                },
                "version": {
                  "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                  "type": "string"
                },
                "origin": {
                  "description": "The release's origin",
                  "enum": [
                    "hockeyapp",
                    "appcenter"
                  ],
                  "type": "string"
                },
                "short_version": {
                  "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                  "type": "string"
                },
                "mandatory_update": {
                  "description": "A boolean which determines whether the release is a mandatory update or not.",
                  "type": "boolean"
                },
                "uploaded_at": {
                  "description": "UTC time in ISO 8601 format of the uploaded time.",
                  "type": "string"
                },
                "enabled": {
                  "description": "This value determines the whether a release currently is enabled or disabled.",
                  "type": "boolean"
                },
                "is_external_build": {
                  "description": "This value determines if a release is external or not.",
                  "type": "boolean"
                }
              }
            },
            {
              "required": [
                "size"
              ],
              "type": "object",
              "properties": {
                "size": {
                  "description": "The release's size in bytes.",
                  "type": "integer"
                },
                "install_url": {
                  "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                  "type": "string"
                },
                "release_notes": {
                  "description": "The release's release notes.",
                  "type": "string"
                }
              }
            }
          ]
        },
        "name": {
          "description": "The app's name.",
          "type": "string"
        },
        "display_name": {
          "description": "The app's display name.",
          "type": "string"
        },
        "description": {
          "description": "The description of the app",
          "type": "string"
        },
        "icon_url": {
          "description": "A URL to the app's icon.",
          "type": "string"
        },
        "os": {
          "description": "The app's os.",
          "type": "string"
        },
        "owner": {
          "description": "The information about the app's owner",
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique id (UUID) of the owner",
              "type": "string"
            },
            "avatar_url": {
              "description": "The avatar URL of the owner",
              "type": "string"
            },
            "display_name": {
              "description": "The owner's display name",
              "type": "string"
            },
            "email": {
              "description": "The owner's email address",
              "type": "string"
            },
            "name": {
              "description": "The unique name that used to identify the owner",
              "type": "string"
            },
            "type": {
              "description": "The owner type. Can either be 'org' or 'user'",
              "enum": [
                "org",
                "user"
              ],
              "type": "string"
            }
          }
        }
      }
    },
    "TesterAppRelease": {
      "allOf": [
        {
          "description": "Response for getting a list of releases in a distribution group",
          "required": [
            "id",
            "version",
            "enabled",
            "uploaded_at",
            "short_version",
            "mandatory_update"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "ID identifying this unique release.",
              "type": "integer"
            },
            "version": {
              "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
              "type": "string"
            },
            "origin": {
              "description": "The release's origin",
              "enum": [
                "hockeyapp",
                "appcenter"
              ],
              "type": "string"
            },
            "short_version": {
              "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
              "type": "string"
            },
            "mandatory_update": {
              "description": "A boolean which determines whether the release is a mandatory update or not.",
              "type": "boolean"
            },
            "uploaded_at": {
              "description": "UTC time in ISO 8601 format of the uploaded time.",
              "type": "string"
            },
            "enabled": {
              "description": "This value determines the whether a release currently is enabled or disabled.",
              "type": "boolean"
            },
            "is_external_build": {
              "description": "This value determines if a release is external or not.",
              "type": "boolean"
            }
          }
        },
        {
          "required": [
            "size"
          ],
          "type": "object",
          "properties": {
            "size": {
              "description": "The release's size in bytes.",
              "type": "integer"
            },
            "install_url": {
              "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
              "type": "string"
            },
            "release_notes": {
              "description": "The release's release notes.",
              "type": "string"
            }
          }
        }
      ]
    },
    "SendNotificationRequest": {
      "required": [
        "userIds"
      ],
      "properties": {
        "userIds": {
          "description": "user list to send email notification",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserInteractionMetricsResponse": {
      "description": "Response for retrieving user interaction metrics.",
      "properties": {
        "less_than_100_apps": {
          "description": "check if the user has less than 100 apps.",
          "type": "boolean"
        },
        "has_more_than_1_release": {
          "description": "check if the user's whole apps has more than 1 releases.",
          "type": "boolean"
        }
      }
    },
    "ReleaseUpdateResponse": {
      "description": "Response for updating a release",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "mandatory_update": {
          "type": "boolean"
        },
        "release_notes": {
          "type": "string"
        },
        "provisioning_status_url": {
          "type": "string"
        },
        "destinations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ReleaseDetailsUpdateResponse": {
      "description": "Response for updating release details",
      "properties": {
        "release_notes": {
          "type": "string"
        }
      }
    },
    "ReleaseExternalUrlUpdateResponse": {
      "description": "Response for updating release external url",
      "properties": {
        "external_download_url": {
          "type": "string"
        }
      }
    },
    "ReleaseProvisionResponse": {
      "description": "Response for provisioning a release",
      "properties": {
        "status_url": {
          "description": "The url to check provisioning status.",
          "type": "string"
        }
      }
    },
    "PrivateReleaseDetailsResponse": {
      "description": "Details of an uploaded release",
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "integer"
        },
        "status": {
          "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
          "enum": [
            "available",
            "unavailable"
          ],
          "type": "string"
        },
        "app_name": {
          "description": "The app's name (extracted from the uploaded release).",
          "type": "string"
        },
        "app_display_name": {
          "description": "The app's display name.",
          "type": "string"
        },
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "origin": {
          "description": "The release's origin",
          "enum": [
            "hockeyapp",
            "appcenter"
          ],
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "release_notes": {
          "description": "The release's release notes.",
          "type": "string"
        },
        "provisioning_profile_name": {
          "description": "The release's provisioning profile name.",
          "type": "string"
        },
        "provisioning_profile_type": {
          "description": "The type of the provisioning profile for the requested app version.",
          "enum": [
            "adhoc",
            "enterprise",
            "other"
          ],
          "type": "string"
        },
        "is_provisioning_profile_syncing": {
          "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
          "type": "boolean"
        },
        "size": {
          "description": "The release's size in bytes.",
          "type": "integer"
        },
        "min_os": {
          "description": "The release's minimum required operating system.",
          "type": "string"
        },
        "device_family": {
          "description": "The release's device family.",
          "type": "string"
        },
        "android_min_api_level": {
          "description": "The release's minimum required Android API level.",
          "type": "string"
        },
        "bundle_identifier": {
          "description": "The identifier of the apps bundle.",
          "type": "string"
        },
        "fingerprint": {
          "description": "MD5 checksum of the release binary.",
          "type": "string"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "download_url": {
          "description": "The URL that hosts the binary for this release.",
          "type": "string"
        },
        "app_icon_url": {
          "description": "A URL to the app's icon.",
          "type": "string"
        },
        "install_url": {
          "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
          "type": "string"
        },
        "distribution_group_id": {
          "description": "the destination where release is distributed",
          "type": "string"
        },
        "publishing_status": {
          "description": "the publishing status of the distributed release",
          "type": "string"
        },
        "destination_type": {
          "description": "The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
          "enum": [
            "group",
            "store",
            "tester"
          ],
          "type": "string"
        },
        "is_external_build": {
          "description": "This value determines if a release is external or not.",
          "type": "boolean"
        }
      }
    },
    "PrivateBasicReleaseDetailsResponse": {
      "description": "Basic information on a release for private apis",
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "integer"
        },
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "origin": {
          "description": "The release's origin",
          "enum": [
            "hockeyapp",
            "appcenter"
          ],
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "distribution_group_id": {
          "description": "the destination id of release where it is distributed.",
          "type": "string"
        },
        "destination_type": {
          "description": "The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
          "enum": [
            "group",
            "store",
            "tester"
          ],
          "type": "string"
        },
        "is_latest": {
          "description": "Indicates if this is the latest release in the group.",
          "type": "boolean"
        },
        "mandatory_update": {
          "description": "A boolean which determines whether the release is a mandatory update or not.",
          "type": "boolean"
        },
        "publishing_status": {
          "description": "the publishing status of the distributed release",
          "type": "string"
        },
        "is_external_build": {
          "description": "This value determines if a release is external or not.",
          "type": "boolean"
        }
      }
    },
    "DistributionGroupReleasesResponse": {
      "description": "Response for getting a list of releases in a distribution group",
      "type": "array",
      "items": {
        "description": "Response for getting a list of releases in a distribution group",
        "required": [
          "id",
          "version",
          "enabled",
          "uploaded_at",
          "short_version",
          "mandatory_update"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "mandatory_update": {
            "description": "A boolean which determines whether the release is a mandatory update or not.",
            "type": "boolean"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "enabled": {
            "description": "This value determines the whether a release currently is enabled or disabled.",
            "type": "boolean"
          },
          "is_external_build": {
            "description": "This value determines if a release is external or not.",
            "type": "boolean"
          }
        }
      }
    },
    "DistributionGroupRelease": {
      "description": "Response for getting a list of releases in a distribution group",
      "required": [
        "id",
        "version",
        "enabled",
        "uploaded_at",
        "short_version",
        "mandatory_update"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "integer"
        },
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "origin": {
          "description": "The release's origin",
          "enum": [
            "hockeyapp",
            "appcenter"
          ],
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "mandatory_update": {
          "description": "A boolean which determines whether the release is a mandatory update or not.",
          "type": "boolean"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "enabled": {
          "description": "This value determines the whether a release currently is enabled or disabled.",
          "type": "boolean"
        },
        "is_external_build": {
          "description": "This value determines if a release is external or not.",
          "type": "boolean"
        }
      }
    },
    "BasicReleaseDetailsResponse": {
      "description": "Basic information on a release",
      "required": [
        "id",
        "version",
        "enabled",
        "uploaded_at",
        "short_version"
      ],
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "integer"
        },
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "origin": {
          "description": "The release's origin",
          "enum": [
            "hockeyapp",
            "appcenter"
          ],
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "enabled": {
          "description": "This value determines the whether a release currently is enabled or disabled.",
          "type": "boolean"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "destination_type": {
          "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
          "enum": [
            "group",
            "store",
            "tester"
          ],
          "type": "string"
        },
        "distribution_groups": {
          "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "ID identifying a unique distribution group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A name identifying a unique distribution group.",
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "is_latest": {
                    "description": "Is the containing release the latest one in this distribution group.",
                    "type": "boolean"
                  }
                }
              }
            ]
          }
        },
        "distribution_stores": {
          "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "ID identifying a unique distribution store.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A name identifying a unique distribution store.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                    "enum": [
                      "intune",
                      "googleplay",
                      "apple",
                      "none"
                    ],
                    "type": "string"
                  },
                  "publishing_status": {
                    "description": "publishing status of the release in the store.",
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "is_latest": {
                    "description": "Is the containing release the latest one in this distribution store.",
                    "type": "boolean"
                  }
                }
              }
            ]
          }
        },
        "destinations": {
          "description": "A list of distribution groups or stores.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "allOf": [
                  {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution group.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "is_latest": {
                        "description": "Is the containing release the latest one in this distribution group.",
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution store.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution store.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                        "enum": [
                          "intune",
                          "googleplay",
                          "apple",
                          "none"
                        ],
                        "type": "string"
                      },
                      "publishing_status": {
                        "description": "publishing status of the release in the store.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "is_latest": {
                        "description": "Is the containing release the latest one in this distribution store.",
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              {
                "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "destination_type": {
                    "description": "Destination can be either store or group.",
                    "enum": [
                      "group",
                      "store",
                      "tester"
                    ],
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name for the group or tester",
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "build": {
          "description": "Build information for the release\n",
          "type": "object",
          "properties": {
            "branch_name": {
              "description": "The branch name of the build producing the release",
              "type": "string"
            },
            "commit_hash": {
              "description": "The commit hash of the build producing the release",
              "type": "string"
            },
            "commit_message": {
              "description": "The commit message of the build producing the release",
              "type": "string"
            }
          }
        },
        "is_external_build": {
          "description": "This value determines if a release is external or not.",
          "type": "boolean"
        }
      }
    },
    "ReleaseDetailsResponse": {
      "description": "Details of an uploaded release",
      "required": [
        "id",
        "app_name",
        "app_display_name",
        "uploaded_at",
        "version",
        "short_version",
        "app_icon_url",
        "enabled"
      ],
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "integer"
        },
        "app_name": {
          "description": "The app's name (extracted from the uploaded release).",
          "type": "string"
        },
        "app_display_name": {
          "description": "The app's display name.",
          "type": "string"
        },
        "app_os": {
          "description": "The app's OS.",
          "type": "string"
        },
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "origin": {
          "description": "The release's origin",
          "enum": [
            "hockeyapp",
            "appcenter"
          ],
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "release_notes": {
          "description": "The release's release notes.",
          "type": "string"
        },
        "provisioning_profile_name": {
          "description": "The release's provisioning profile name.",
          "type": "string"
        },
        "provisioning_profile_type": {
          "description": "The type of the provisioning profile for the requested app version.",
          "enum": [
            "adhoc",
            "enterprise",
            "other"
          ],
          "type": "string"
        },
        "provisioning_profile_expiry_date": {
          "description": "expiration date of provisioning profile in UTC format.",
          "type": "string"
        },
        "is_provisioning_profile_syncing": {
          "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
          "type": "boolean"
        },
        "size": {
          "description": "The release's size in bytes.",
          "type": "integer"
        },
        "min_os": {
          "description": "The release's minimum required operating system.",
          "type": "string"
        },
        "device_family": {
          "description": "The release's device family.",
          "type": "string"
        },
        "android_min_api_level": {
          "description": "The release's minimum required Android API level.",
          "type": "string"
        },
        "bundle_identifier": {
          "description": "The identifier of the apps bundle.",
          "type": "string"
        },
        "package_hashes": {
          "description": "Hashes for the packages.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fingerprint": {
          "description": "MD5 checksum of the release binary.",
          "type": "string"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "download_url": {
          "description": "The URL that hosts the binary for this release.",
          "type": "string"
        },
        "app_icon_url": {
          "description": "A URL to the app's icon.",
          "type": "string"
        },
        "install_url": {
          "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
          "type": "string"
        },
        "destination_type": {
          "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
          "enum": [
            "group",
            "store",
            "tester"
          ],
          "type": "string"
        },
        "distribution_groups": {
          "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
          "type": "array",
          "items": {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "ID identifying a unique distribution group.",
                "type": "string"
              },
              "name": {
                "description": "A name identifying a unique distribution group.",
                "type": "string"
              }
            }
          }
        },
        "distribution_stores": {
          "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
          "type": "array",
          "items": {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "ID identifying a unique distribution store.",
                "type": "string"
              },
              "name": {
                "description": "A name identifying a unique distribution store.",
                "type": "string"
              },
              "type": {
                "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                "enum": [
                  "intune",
                  "googleplay",
                  "apple",
                  "none"
                ],
                "type": "string"
              },
              "publishing_status": {
                "description": "publishing status of the release in the store.",
                "type": "string"
              }
            }
          }
        },
        "destinations": {
          "description": "A list of distribution groups or stores.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "allOf": [
                  {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution group.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "is_latest": {
                        "description": "Is the containing release the latest one in this distribution group.",
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID identifying a unique distribution store.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A name identifying a unique distribution store.",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                        "enum": [
                          "intune",
                          "googleplay",
                          "apple",
                          "none"
                        ],
                        "type": "string"
                      },
                      "publishing_status": {
                        "description": "publishing status of the release in the store.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "is_latest": {
                        "description": "Is the containing release the latest one in this distribution store.",
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              {
                "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "destination_type": {
                    "description": "Destination can be either store or group.",
                    "enum": [
                      "group",
                      "store",
                      "tester"
                    ],
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name for the group or tester",
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "is_udid_provisioned": {
          "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
          "type": "boolean"
        },
        "can_resign": {
          "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
          "type": "boolean"
        },
        "build": {
          "description": "Contains metadata about the build that produced the release being uploaded",
          "type": "object",
          "properties": {
            "branch_name": {
              "description": "The branch name of the build producing the release",
              "type": "string"
            },
            "commit_hash": {
              "description": "The commit hash of the build producing the release",
              "type": "string"
            },
            "commit_message": {
              "description": "The commit message of the build producing the release",
              "type": "string"
            }
          }
        },
        "enabled": {
          "description": "This value determines the whether a release currently is enabled or disabled.",
          "type": "boolean"
        },
        "status": {
          "description": "Status of the release.",
          "type": "string"
        },
        "is_external_build": {
          "description": "This value determines if a release is external or not.",
          "type": "boolean"
        }
      }
    },
    "ManagementReleaseDetailsResponse": {
      "description": "Details of an uploaded release",
      "properties": {
        "distinctId": {
          "description": "ID identifying this unique release.",
          "type": "integer"
        },
        "origin": {
          "description": "The release's origin",
          "enum": [
            "hockeyapp",
            "appcenter"
          ],
          "type": "string"
        },
        "version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "buildVersion": {
          "description": "The release's buildVersion.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "sortVersion": {
          "description": "The release's sortVersion.",
          "type": "string"
        },
        "createdAt": {
          "description": "UTC time the release was created in ISO 8601 format.",
          "type": "string"
        },
        "enabled": {
          "description": "This value determines the whether a release currently is enabled or disabled.",
          "type": "boolean"
        },
        "deletedAt": {
          "description": "UTC time the release was created in ISO 8601 format.",
          "type": "string"
        }
      }
    },
    "ReleaseUploadBeginResponse": {
      "description": "A response containing information pertaining to starting a release upload process",
      "required": [
        "upload_id",
        "upload_url"
      ],
      "properties": {
        "upload_id": {
          "description": "The ID for the current upload",
          "type": "string"
        },
        "upload_url": {
          "description": "The URL where the client needs to upload the release to",
          "type": "string"
        },
        "asset_id": {
          "description": "The ID for the current upload, reserved for future use",
          "type": "string"
        },
        "asset_domain": {
          "description": "The URL for the current upload, reserved for future use",
          "type": "string"
        },
        "asset_token": {
          "description": "The token for the current upload, reserved for future use",
          "type": "string"
        }
      }
    },
    "GDPRValidationRequest": {
      "description": "A request containing a set of release ids to validate",
      "required": [
        "release_ids"
      ],
      "properties": {
        "release_ids": {
          "description": "a list of release ids to validate (AC flow)",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "hockeyapp_release_ids": {
          "description": "a list of release ids to validate (HA flow)",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "release_upload_ids": {
          "description": "a list of release uploads ids to validate",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReleaseUploadBeginRequest": {
      "description": "A request containing information pertaining to begin a release upload process",
      "properties": {
        "release_id": {
          "description": "Optional value for explicitly specifying the ID of existing release.",
          "type": "number"
        },
        "build_version": {
          "description": "The build version of the uploaded binary, used for macOS, Windows and Custom app support.",
          "type": "string"
        },
        "build_number": {
          "description": "The build number of the uploaded binary, used with build_version for macOS app support.",
          "type": "string"
        }
      }
    },
    "ReleaseUploadEndRequest": {
      "description": "A request containing information pertaining to complete a release upload process",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "The desired operation for the upload",
          "enum": [
            "committed",
            "aborted"
          ],
          "type": "string"
        }
      }
    },
    "ReleaseUploadEndResponse": {
      "description": "A response containing information about the uploaded release.",
      "properties": {
        "release_id": {
          "description": "The ID of the release.",
          "type": "number"
        },
        "release_url": {
          "description": "A URL to the new release. If upload was aborted will be null.",
          "type": "string"
        }
      }
    },
    "ReleaseCreateRequest": {
      "description": "A request containing information for creating a release.",
      "required": [
        "fingerprint",
        "size",
        "upload_id"
      ],
      "properties": {
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "build_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "unique_identifier": {
          "description": "The identifier of the app's bundle.",
          "type": "string"
        },
        "minimum_os_version": {
          "description": "The release's minimum required operating system.",
          "type": "string"
        },
        "device_family": {
          "description": "The release's device family.",
          "type": "string"
        },
        "languages": {
          "description": "The languages supported by the release. Limited to 510 characters in a serialized array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fingerprint": {
          "description": "MD5 checksum of the release binary.",
          "type": "string"
        },
        "size": {
          "description": "The release's size in bytes.",
          "type": "integer"
        },
        "package_url": {
          "description": "The URL to the release's binary.",
          "type": "string"
        },
        "file_extension": {
          "description": "The file extension of the asset. Does not include the initial period.",
          "type": "string"
        },
        "upload_id": {
          "description": "The upload id associated with the release, to map to the releases upload table.",
          "type": "string"
        },
        "icon_asset_id": {
          "description": "The assetId associated with the icon uploaded to app center file upload service.",
          "type": "string"
        },
        "ipa_uuids": {
          "description": "A list of UUIDs for architectures for an iOS app.",
          "type": "array",
          "items": {
            "description": "An object containing a UUID for an architecture for an iOS app.",
            "required": [
              "architecture",
              "uuid"
            ],
            "type": "object",
            "properties": {
              "architecture": {
                "description": "The architecture that the UUID belongs to, i.e. armv7 or arm64.",
                "type": "string"
              },
              "uuid": {
                "format": "uuid",
                "description": "The unique identifier.",
                "type": "string"
              }
            }
          }
        },
        "provision": {
          "description": "An object containing information about an iOS provisioning profile.",
          "required": [
            "name",
            "application_identifier",
            "team_identifier",
            "profile_type",
            "expired_at"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the provisioning profile.",
              "type": "string"
            },
            "application_identifier": {
              "description": "The application identifier.",
              "type": "string"
            },
            "team_identifier": {
              "description": "The team identifier.",
              "type": "string"
            },
            "profile_type": {
              "enum": [
                "adhoc",
                "enterprise",
                "other"
              ],
              "type": "string"
            },
            "expired_at": {
              "format": "date-time",
              "description": "The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z",
              "type": "string"
            },
            "udids": {
              "type": "array",
              "items": {
                "description": "A UDID of a provisioned device.",
                "type": "string"
              }
            }
          }
        },
        "appex_provisioning_profiles": {
          "description": "iOS app extension provisioning profiles included in the release.",
          "type": "array",
          "items": {
            "description": "An object containing information about an iOS provisioning profile.",
            "required": [
              "name",
              "application_identifier",
              "team_identifier",
              "profile_type",
              "expired_at"
            ],
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the provisioning profile.",
                "type": "string"
              },
              "application_identifier": {
                "description": "The application identifier.",
                "type": "string"
              },
              "team_identifier": {
                "description": "The team identifier.",
                "type": "string"
              },
              "profile_type": {
                "enum": [
                  "adhoc",
                  "enterprise",
                  "other"
                ],
                "type": "string"
              },
              "expired_at": {
                "format": "date-time",
                "description": "The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z",
                "type": "string"
              },
              "udids": {
                "type": "array",
                "items": {
                  "description": "A UDID of a provisioned device.",
                  "type": "string"
                }
              }
            }
          }
        },
        "proxy_flow": {
          "description": "If true this release was uploaded to the AKS upload proxy",
          "type": "boolean"
        }
      }
    },
    "ExternallyHostedReleaseCreateRequest": {
      "description": "A request containing information for creating an externally hosted release.",
      "required": [
        "build_version",
        "external_download_url"
      ],
      "properties": {
        "build_version": {
          "description": "The build version of the uploaded binary",
          "type": "string"
        },
        "build_number": {
          "description": "The build number of the uploaded binary",
          "type": "string"
        },
        "external_download_url": {
          "description": "The external URL to the release's binary.",
          "type": "string"
        }
      }
    },
    "UpdateExternalUrlRequest": {
      "description": "A request containing information for creating an externally hosted release.",
      "required": [
        "external_download_url"
      ],
      "properties": {
        "external_download_url": {
          "description": "The external URL to the release's binary.",
          "type": "string"
        }
      }
    },
    "ReleaseUpdateRequest": {
      "description": "A request containing information for updating a release.",
      "properties": {
        "distribution_group_name": {
          "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.\n",
          "type": "string"
        },
        "distribution_group_id": {
          "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.\n",
          "type": "string"
        },
        "destination_name": {
          "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.\n",
          "type": "string"
        },
        "destination_id": {
          "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.\n",
          "type": "string"
        },
        "destination_type": {
          "description": "Not used anymore.",
          "type": "string"
        },
        "release_notes": {
          "description": "Release notes for this release.",
          "type": "string"
        },
        "mandatory_update": {
          "description": "A boolean which determines whether this version should be a mandatory update or not.",
          "type": "boolean"
        },
        "destinations": {
          "description": "Distribute this release under the following list of destinations (store groups or distribution groups).",
          "type": "array",
          "items": {
            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                "type": "string"
              },
              "id": {
                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                "type": "string"
              }
            }
          }
        },
        "build": {
          "description": "Contains metadata about the build that produced the release being uploaded",
          "type": "object",
          "properties": {
            "branch_name": {
              "description": "The branch name of the build producing the release",
              "type": "string"
            },
            "commit_hash": {
              "description": "The commit hash of the build producing the release",
              "type": "string"
            },
            "commit_message": {
              "description": "The commit message of the build producing the release",
              "type": "string"
            }
          }
        },
        "notify_testers": {
          "description": "A boolean which determines whether to notify testers of a new release, default to true.",
          "default": true,
          "type": "boolean"
        },
        "metadata": {
          "description": "An object containing all the release metadata.",
          "type": "object",
          "properties": {
            "dsa_signature": {
              "description": "dsa signature of the release for the sparkle feed.",
              "type": "string"
            },
            "ed_signature": {
              "description": "edDSA signature of the release for the sparkle feed.",
              "type": "string"
            }
          }
        }
      }
    },
    "ReleaseDetailsUpdateRequest": {
      "description": "A request containing information for updating details of a release",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Toggle this release to be enable distribute/download or not.",
          "type": "boolean"
        },
        "release_notes": {
          "description": "Release notes for this release.",
          "type": "string"
        },
        "build": {
          "description": "Contains metadata about the build that produced the release being uploaded",
          "type": "object",
          "properties": {
            "branch_name": {
              "description": "The branch name of the build producing the release",
              "type": "string"
            },
            "commit_hash": {
              "description": "The commit hash of the build producing the release",
              "type": "string"
            },
            "commit_message": {
              "description": "The commit message of the build producing the release",
              "type": "string"
            }
          }
        }
      }
    },
    "BuildInfo": {
      "description": "Contains metadata about the build that produced the release being uploaded",
      "type": "object",
      "properties": {
        "branch_name": {
          "description": "The branch name of the build producing the release",
          "type": "string"
        },
        "commit_hash": {
          "description": "The commit hash of the build producing the release",
          "type": "string"
        },
        "commit_message": {
          "description": "The commit message of the build producing the release",
          "type": "string"
        }
      }
    },
    "ReleaseMetadata": {
      "description": "An object containing all the release metadata.",
      "type": "object",
      "properties": {
        "dsa_signature": {
          "description": "dsa signature of the release for the sparkle feed.",
          "type": "string"
        },
        "ed_signature": {
          "description": "edDSA signature of the release for the sparkle feed.",
          "type": "string"
        }
      }
    },
    "DestinationId": {
      "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
          "type": "string"
        },
        "id": {
          "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
          "type": "string"
        }
      }
    },
    "ReleaseDestinationRequest": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "format": "uuid",
              "description": "Unique id of the release destination",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "mandatory_update": {
              "description": "Flag to mark the release for the provided destinations as mandatory",
              "type": "boolean"
            },
            "notify_testers": {
              "description": "Flag to enable or disable notifications to testers",
              "default": true,
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ReleaseStoreDestinationRequest": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Unique id of the release destination",
          "type": "string"
        }
      }
    },
    "ReleaseTesterDestinationRequest": {
      "required": [
        "email"
      ],
      "type": "object",
      "properties": {
        "mandatory_update": {
          "description": "Flag to mark the release for the provided destinations as mandatory",
          "type": "boolean"
        },
        "email": {
          "description": "Tester's email address",
          "type": "string"
        },
        "notify_testers": {
          "description": "Flag to enable or disable notifications to testers",
          "default": true,
          "type": "boolean"
        }
      }
    },
    "ReleaseDestinationResponse": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique id for the release destination",
              "type": "string"
            }
          }
        },
        {
          "required": [
            "mandatory_update"
          ],
          "type": "object",
          "properties": {
            "mandatory_update": {
              "description": "Flag to mark the release for the provided destinations as mandatory",
              "type": "boolean"
            },
            "provisioning_status_url": {
              "description": "The url to check provisioning status.",
              "type": "string"
            }
          }
        }
      ]
    },
    "ReleaseStoreDestinationResponse": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique id for the release destination",
          "type": "string"
        }
      }
    },
    "Destination": {
      "allOf": [
        {
          "allOf": [
            {
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "description": "ID identifying a unique distribution group.",
                  "type": "string"
                },
                "name": {
                  "description": "A name identifying a unique distribution group.",
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "is_latest": {
                  "description": "Is the containing release the latest one in this distribution group.",
                  "type": "boolean"
                }
              }
            }
          ]
        },
        {
          "allOf": [
            {
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "description": "ID identifying a unique distribution store.",
                  "type": "string"
                },
                "name": {
                  "description": "A name identifying a unique distribution store.",
                  "type": "string"
                },
                "type": {
                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                  "enum": [
                    "intune",
                    "googleplay",
                    "apple",
                    "none"
                  ],
                  "type": "string"
                },
                "publishing_status": {
                  "description": "publishing status of the release in the store.",
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "is_latest": {
                  "description": "Is the containing release the latest one in this distribution store.",
                  "type": "boolean"
                }
              }
            }
          ]
        },
        {
          "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
              "type": "string"
            },
            "id": {
              "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "destination_type": {
              "description": "Destination can be either store or group.",
              "enum": [
                "group",
                "store",
                "tester"
              ],
              "type": "string"
            },
            "display_name": {
              "description": "Display name for the group or tester",
              "type": "string"
            }
          }
        }
      ]
    },
    "PrivateReleaseUpdateRequest": {
      "description": "A request containing information for updating a release.",
      "properties": {
        "publishing_status": {
          "description": "The store publishing status.",
          "enum": [
            "failed",
            "processing",
            "submitted",
            "timeout"
          ],
          "type": "string"
        }
      }
    },
    "DistributionGroup": {
      "allOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "ID identifying a unique distribution group.",
              "type": "string"
            },
            "name": {
              "description": "A name identifying a unique distribution group.",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "is_latest": {
              "description": "Is the containing release the latest one in this distribution group.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "DistributionGroupWithoutIsLatest": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID identifying a unique distribution group.",
          "type": "string"
        },
        "name": {
          "description": "A name identifying a unique distribution group.",
          "type": "string"
        }
      }
    },
    "DistributionStore": {
      "allOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "ID identifying a unique distribution store.",
              "type": "string"
            },
            "name": {
              "description": "A name identifying a unique distribution store.",
              "type": "string"
            },
            "type": {
              "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
              "enum": [
                "intune",
                "googleplay",
                "apple",
                "none"
              ],
              "type": "string"
            },
            "publishing_status": {
              "description": "publishing status of the release in the store.",
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "is_latest": {
              "description": "Is the containing release the latest one in this distribution store.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "DistributionStoreWithoutIsLatest": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID identifying a unique distribution store.",
          "type": "string"
        },
        "name": {
          "description": "A name identifying a unique distribution store.",
          "type": "string"
        },
        "type": {
          "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
          "enum": [
            "intune",
            "googleplay",
            "apple",
            "none"
          ],
          "type": "string"
        },
        "publishing_status": {
          "description": "publishing status of the release in the store.",
          "type": "string"
        }
      }
    },
    "ArchIdentifier": {
      "description": "An object containing a UUID for an architecture for an iOS app.",
      "required": [
        "architecture",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "architecture": {
          "description": "The architecture that the UUID belongs to, i.e. armv7 or arm64.",
          "type": "string"
        },
        "uuid": {
          "format": "uuid",
          "description": "The unique identifier.",
          "type": "string"
        }
      }
    },
    "ProvisioningProfile": {
      "description": "An object containing information about an iOS provisioning profile.",
      "required": [
        "name",
        "application_identifier",
        "team_identifier",
        "profile_type",
        "expired_at"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the provisioning profile.",
          "type": "string"
        },
        "application_identifier": {
          "description": "The application identifier.",
          "type": "string"
        },
        "team_identifier": {
          "description": "The team identifier.",
          "type": "string"
        },
        "profile_type": {
          "enum": [
            "adhoc",
            "enterprise",
            "other"
          ],
          "type": "string"
        },
        "expired_at": {
          "format": "date-time",
          "description": "The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z",
          "type": "string"
        },
        "udids": {
          "type": "array",
          "items": {
            "description": "A UDID of a provisioned device.",
            "type": "string"
          }
        }
      }
    },
    "ProvisioningProfileResponse": {
      "description": "A response containing information about an iOS provisioning profile.",
      "required": [
        "provisioning_profile_type"
      ],
      "properties": {
        "provisioning_profile_type": {
          "enum": [
            "adhoc",
            "enterprise",
            "other"
          ],
          "type": "string"
        },
        "udids": {
          "type": "array",
          "items": {
            "description": "A UDID of a provisioned device.",
            "type": "string"
          }
        },
        "provisioning_profile_name": {
          "description": "The name of the provisioning profile.",
          "type": "string"
        },
        "team_identifier": {
          "description": "The team identifier.",
          "type": "string"
        },
        "provisioning_bundle_id": {
          "description": "The bundle identifier associated with the profile.",
          "type": "string"
        },
        "appex_profiles": {
          "description": "Array of provisioning profiles for any app extensions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProvisioningProfileResponse"
          }
        }
      }
    },
    "ReleaseUpdateError": {
      "allOf": [
        {
          "required": [
            "code",
            "message"
          ],
          "properties": {
            "code": {
              "enum": [
                "BadRequest",
                "Conflict",
                "NotAcceptable",
                "NotFound",
                "InternalServerError",
                "Unauthorized",
                "TooManyRequests"
              ],
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "release_notes": {
              "type": "string"
            },
            "mandatory_update": {
              "type": "boolean"
            },
            "destinations": {
              "type": "array",
              "items": {
                "properties": {
                  "code": {
                    "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "DestinationError": {
      "properties": {
        "code": {
          "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AutoProvisioningConfigRequest": {
      "description": "A request containing information for creating a Auto Provisioning Config.",
      "properties": {
        "apple_developer_account_key": {
          "description": "A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email.",
          "type": "string"
        },
        "apple_distribution_certificate_key": {
          "description": "A key to a secret in customer-credential-store. distribution_certificate refers to the customer's certificate (that holds the private key) that will be used to sign the app.",
          "type": "string"
        },
        "allow_auto_provisioning": {
          "description": "When *true* enables auto provisioning",
          "type": "boolean"
        }
      }
    },
    "AutoProvisioningConfigResponse": {
      "description": "A response from API containing information for a Auto Provisioning Config.",
      "properties": {
        "id": {
          "description": "The identifier of the config.",
          "type": "number"
        },
        "app_id": {
          "description": "The identifier of the App.",
          "type": "string"
        },
        "destination_id": {
          "description": "The identifier of the destination.",
          "type": "string"
        },
        "apple_developer_account_key": {
          "description": "A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email.",
          "type": "string"
        },
        "apple_distribution_certificate_key": {
          "description": "A key to a secret in customer-credential-store. distribution_certificate refers to the cusomer's certificate (that holds the private key) that will be used to sign the app.",
          "type": "string"
        },
        "allow_auto_provisioning": {
          "description": "When *true* enables auto provisioning",
          "type": "boolean"
        }
      }
    },
    "AnalyticsReleasesResponse": {
      "properties": {
        "releases": {
          "type": "array",
          "items": {
            "required": [
              "release_id",
              "distribution_group_id",
              "user_id"
            ],
            "type": "object",
            "properties": {
              "release_id": {
                "description": "release id",
                "type": "integer"
              },
              "distribution_group_id": {
                "description": "distribution group id",
                "type": "string"
              },
              "user_id": {
                "format": "uuid",
                "description": "user id",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "AnalyticsReleasesParameter": {
      "required": [
        "release_id",
        "distribution_group_id",
        "user_id"
      ],
      "type": "object",
      "properties": {
        "release_id": {
          "description": "release id",
          "type": "integer"
        },
        "distribution_group_id": {
          "description": "distribution group id",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "description": "user id",
          "type": "string"
        }
      }
    },
    "HockeyAppCompatibilityReleaseResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "shortversion": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "uploaded_at": {
          "format": "date-time",
          "type": "string"
        },
        "appsize": {
          "type": "integer"
        },
        "notes": {
          "type": "string"
        },
        "mandatory": {
          "type": "boolean"
        },
        "external": {
          "type": "boolean"
        },
        "device_family": {
          "type": "string"
        },
        "minimum_os_version": {
          "type": "string"
        },
        "install_url": {
          "type": "string"
        },
        "bundle_identifier": {
          "type": "string"
        }
      }
    },
    "ProvisioningProfileMigration": {
      "description": "Describes the migration schema for a provisioning profile defined in HockeyApp.",
      "required": [
        "name",
        "bundle_id",
        "team_identifier",
        "type",
        "is_appex"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the provisioning profile.",
          "type": "string"
        },
        "bundle_id": {
          "description": "The bundle/application identifier.",
          "type": "string"
        },
        "team_identifier": {
          "description": "The team identifier.",
          "type": "string"
        },
        "type": {
          "description": "The type of provisoning profile.",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "is_appex": {
          "description": "A boolean value that indicates whether the provisioning profile represents an app extension.",
          "type": "boolean"
        },
        "expired_at": {
          "format": "date-time",
          "description": "The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z.",
          "type": "string"
        },
        "udids": {
          "description": "A list of UDIDs of provisioned devices.",
          "type": "array",
          "items": {
            "description": "A UDID of a provisioned device.",
            "type": "string"
          }
        },
        "url": {
          "description": "A provisioning profile URL that indicates where to download it from.",
          "type": "string"
        }
      }
    },
    "PrivateUpdateUploadDetails": {
      "description": "Details of the upload to patch",
      "required": [
        "status",
        "error_message"
      ],
      "type": "object",
      "properties": {
        "status": {
          "enum": [
            "uploadStarted",
            "uploadFinished",
            "readyToBePublished",
            "malwareDetected",
            "error"
          ],
          "type": "string"
        },
        "error_message": {
          "description": "Message of the error",
          "type": "string"
        }
      }
    },
    "PostExternalDownloadUrl": {
      "description": "Set the download URL of an external build",
      "type": "object",
      "properties": {
        "download_url": {
          "description": "The new download URL",
          "type": "string"
        }
      }
    },
    "PatchReleaseAssetIdRequest": {
      "description": "Patch the asset id of a release request body",
      "required": [
        "package_asset_id",
        "upload_id"
      ],
      "type": "object",
      "properties": {
        "package_asset_id": {
          "format": "uuid",
          "description": "The release new package id in ACFUS",
          "type": "string"
        },
        "upload_id": {
          "format": "uuid",
          "description": "The release upload id used to upload the release",
          "type": "string"
        },
        "ipa_uuids": {
          "description": "The ipa UUIDs for this release, as a serialized JSON array",
          "type": "string"
        }
      }
    },
    "MalwareScanResultPayload": {
      "description": "Malware scan result from Malware Scan service",
      "required": [
        "requestId",
        "result"
      ],
      "type": "object",
      "properties": {
        "requestId": {
          "format": "uuid",
          "description": "Scan request identifier",
          "type": "string"
        },
        "result": {
          "description": "Scan result",
          "enum": [
            "clean",
            "infected",
            "error"
          ],
          "type": "string"
        }
      }
    },
    "DistributionSettingsResponse": {
      "required": [
        "default_public"
      ],
      "properties": {
        "default_public": {
          "description": "Is this app using the \"Default to Public Distribution Groups\" logic",
          "type": "boolean"
        }
      }
    },
    "PublicDistributionGroupsResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The id of the distribution group",
          "type": "string"
        }
      }
    },
    "DeviceConfigurationResponse": {
      "description": "A response containing the fully encoded binary blob for a mobileconfig",
      "required": [
        "data_url"
      ],
      "properties": {
        "data_url": {
          "description": "A data URL containing a signed mobileconfig profile",
          "type": "string"
        }
      }
    },
    "DeviceInfoRequest": {
      "description": "The information for a single iOS device",
      "required": [
        "udid",
        "model"
      ],
      "properties": {
        "udid": {
          "description": "The Unique Device IDentifier of the device",
          "type": "string"
        },
        "model": {
          "description": "The model identifier of the device, in the format iDeviceM,N",
          "type": "string"
        },
        "os_build": {
          "description": "The build number of the last known OS version running on the device",
          "type": "string"
        },
        "os_version": {
          "description": "The last known OS version running on the device",
          "type": "string"
        },
        "serial": {
          "description": "The device's serial number. Always empty or undefined at present.",
          "type": "string"
        },
        "imei": {
          "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
          "type": "string"
        },
        "owner_id": {
          "description": "The user ID of the device owner.",
          "type": "string"
        }
      }
    },
    "DeviceInfoResponse": {
      "description": "The information for a single iOS device",
      "required": [
        "udid",
        "model",
        "device_name",
        "os_build",
        "os_version",
        "status"
      ],
      "properties": {
        "udid": {
          "description": "The Unique Device IDentifier of the device",
          "type": "string"
        },
        "model": {
          "description": "The model identifier of the device, in the format iDeviceM,N",
          "type": "string"
        },
        "device_name": {
          "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
          "type": "string"
        },
        "full_device_name": {
          "description": "A combination of the device model name and the owner name.",
          "type": "string"
        },
        "os_build": {
          "description": "The last known OS version running on the device",
          "type": "string"
        },
        "os_version": {
          "description": "The last known OS version running on the device",
          "type": "string"
        },
        "serial": {
          "description": "The device's serial number. Always empty or undefined at present.",
          "type": "string"
        },
        "imei": {
          "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
          "type": "string"
        },
        "owner_id": {
          "description": "The user ID of the device owner.",
          "type": "string"
        },
        "status": {
          "description": "The provisioning status of the device.",
          "type": "string"
        },
        "registered_at": {
          "description": "Timestamp of when the device was registered in ISO format.",
          "type": "string"
        }
      }
    },
    "ResignStatus": {
      "description": "The status of the resign operation.",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "The status of the resign",
          "type": "string"
        },
        "error_code": {
          "description": "Error code for any error that occured during the resigning operation.",
          "type": "string"
        },
        "error_message": {
          "description": "Error message for any error that occured during the resigning operation.",
          "type": "string"
        }
      }
    },
    "ResignInfo": {
      "description": "The information for a resign attempt.",
      "properties": {
        "group_name": {
          "description": "The group name of the resign attempt",
          "type": "string"
        },
        "profile_name": {
          "description": "The provisioning profile name of group for the given resign attempt",
          "type": "string"
        },
        "profile_type": {
          "description": "The provisioning profile type of group for the given resign attempt",
          "type": "string"
        },
        "certificate_name": {
          "description": "The name of the certificate used for the resign attempt",
          "type": "string"
        },
        "certificate_expiration": {
          "description": "The expiration date of the certificate used for the resign attempt",
          "type": "string"
        }
      }
    },
    "MemberDevicesInfoResponse": {
      "description": "The information for a single distribution group member and their ios device",
      "required": [
        "id",
        "email",
        "udid",
        "model",
        "device_name",
        "os_build",
        "os_version",
        "status"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id (UUID) of the user",
          "type": "string"
        },
        "avatar_url": {
          "description": "The avatar URL of the user",
          "type": "string"
        },
        "can_change_password": {
          "description": "User is required to send an old password in order to change the password.",
          "type": "boolean"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "invite_pending": {
          "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
          "type": "boolean"
        },
        "name": {
          "description": "The unique name that is used to identify the user.",
          "type": "string"
        },
        "udid": {
          "description": "The Unique Device IDentifier of the device",
          "type": "string"
        },
        "model": {
          "description": "The model identifier of the device, in the format iDeviceM,N",
          "type": "string"
        },
        "device_name": {
          "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
          "type": "string"
        },
        "full_device_name": {
          "description": "A combination of the device model name and the owner name.",
          "type": "string"
        },
        "os_build": {
          "description": "The last known OS version running on the device",
          "type": "string"
        },
        "os_version": {
          "description": "The last known OS version running on the device",
          "type": "string"
        },
        "serial": {
          "description": "The device's serial number. Always empty or undefined at present.",
          "type": "string"
        },
        "imei": {
          "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
          "type": "string"
        },
        "owner_id": {
          "description": "The user ID of the device owner.",
          "type": "string"
        },
        "status": {
          "description": "The provisioning status of the device.",
          "type": "string"
        },
        "registered_at": {
          "description": "Timestamp of when the device was registered in ISO format.",
          "type": "string"
        }
      }
    },
    "PublishDevicesRequest": {
      "description": "The publising information.",
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account to publish the devices to.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account to publish the devices to.",
          "type": "string"
        },
        "account_service_connection_id": {
          "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
          "type": "string"
        },
        "publish_all_devices": {
          "description": "When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.",
          "type": "boolean"
        },
        "devices": {
          "description": "Array of device UDID's to be published to the Apple Developer account.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PublishDevicesResponse": {
      "description": "The information for a single iOS device",
      "required": [
        "profiles_zip_base64"
      ],
      "properties": {
        "profile_file_name": {
          "description": "The file name for the provisioning profile.",
          "type": "string"
        },
        "profiles_zip_base64": {
          "description": "The updated provisioning profiles zip base64 encoded.",
          "type": "string"
        }
      }
    },
    "AppleLoginRequest": {
      "description": "Apple credentials needed to log into the Apple Developer Portal",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account.",
          "type": "string"
        },
        "team_identifier": {
          "description": "Identifier of the team to use when logged in.",
          "type": "string"
        },
        "cookie": {
          "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
          "type": "string"
        }
      }
    },
    "AppleLoginResponse": {
      "description": "Indicates if login was successful.",
      "properties": {
        "successful": {
          "description": "True when login was successful.",
          "type": "boolean"
        }
      }
    },
    "AppleMutifactorLoginRequest": {
      "description": "Apple credentials needed to log into the Apple Developer Portal",
      "required": [
        "username",
        "authcode"
      ],
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "authcode": {
          "description": "This is the six digit OTP used for completing the multi-factor authentication",
          "type": "string"
        }
      }
    },
    "AppleMultifactorLoginResponse": {
      "description": "The response of Multifactor login. This is a 30 day session token generated by apple.",
      "properties": {
        "username": {
          "description": "the apple developer account.",
          "type": "string"
        },
        "cookie": {
          "description": "The 30-day session Token generated by apple after successfully logging in with Multifactor authentication.",
          "type": "string"
        },
        "expires": {
          "description": "The expiry date of the cookie generated by apple",
          "type": "string"
        }
      }
    },
    "ApplicationStatusRequest": {
      "description": "The information needed to fetch the status of an application",
      "required": [
        "username",
        "password",
        "bundle_identifier",
        "track_identifier"
      ],
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account.",
          "type": "string"
        },
        "bundle_identifier": {
          "description": "Bundle Identifier of application in Apple Itunes portal.",
          "type": "string"
        },
        "track_identifier": {
          "description": "Track Identifier for which the status is to be fetched.",
          "type": "string"
        },
        "build_version": {
          "description": "The version of build for which real time status is to be fetched.",
          "type": "string"
        },
        "team_identifier": {
          "description": "Identifier of the team to use when logged in.",
          "type": "string"
        },
        "train_version": {
          "description": "The Train version for which the status is to be fetched.",
          "type": "string"
        }
      }
    },
    "ApplicationStatusResponse": {
      "description": "The status information from Itunes portal",
      "required": [
        "version_type"
      ],
      "properties": {
        "version_type": {
          "description": "The type of version being returned (production/edit/test flight).",
          "type": "string"
        },
        "version": {
          "description": "The version of the application",
          "type": "string"
        }
      }
    },
    "ItunesAppsRequest": {
      "description": "Apple credentials with username, password or service_connection_id of the stored credentials is needed along with team_identifier.",
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account.",
          "type": "string"
        },
        "service_connection_id": {
          "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
          "type": "string"
        },
        "team_identifier": {
          "description": "Identifier of the team to use when logged in.",
          "type": "string"
        },
        "cookie": {
          "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
          "type": "string"
        }
      }
    },
    "ItunesTeamsRequest": {
      "description": "Apple credentials with username, password or service_connection_id of the stored credentials is needed.",
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account.",
          "type": "string"
        },
        "service_connection_id": {
          "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
          "type": "string"
        },
        "cookie": {
          "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
          "type": "string"
        }
      }
    },
    "ItunesTeamsResponse": {
      "description": "Itunes teams details .",
      "properties": {
        "teamId": {
          "description": "Itunes team id.",
          "type": "string"
        },
        "teamName": {
          "description": "Itunes Team Name",
          "type": "string"
        }
      }
    },
    "AllItunesAppsResponse": {
      "description": "Itunes teams details .",
      "properties": {
        "apple_id": {
          "description": "apple id for app team id.",
          "type": "string"
        },
        "bundle_id": {
          "description": "bundle identifier of app",
          "type": "string"
        },
        "name": {
          "description": "App Name",
          "type": "string"
        },
        "iconUrl": {
          "description": "url for the app icon from app store",
          "type": "string"
        }
      }
    },
    "AppleTestFlightGroupRequest": {
      "description": "Apple details for fetching test flight groups from Apple Developer Portal. pass either apple_id or bundle_identifier to get the test flight groups. if both are passed than apple_id will take preference",
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account.",
          "type": "string"
        },
        "apple_id": {
          "description": "apple_id of the app for which test flight groups need to be fetched.",
          "type": "string"
        },
        "bundle_identifier": {
          "description": "apple_id of the app for which test flight groups need to be fetched.",
          "type": "string"
        },
        "team_identifier": {
          "description": "Identifier of the team to use when logged in.",
          "type": "string"
        },
        "cookie": {
          "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
          "type": "string"
        },
        "service_connection_id": {
          "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
          "type": "string"
        }
      }
    },
    "AppleTestFlightGroupResponse": {
      "description": "test flight group details for the app.",
      "properties": {
        "id": {
          "description": "id of the group.",
          "type": "string"
        },
        "providerId": {
          "description": "provider id of the group.",
          "type": "number"
        },
        "appAdamId": {
          "description": "apple id of the group.",
          "type": "number"
        },
        "name": {
          "description": "name of the group.",
          "type": "string"
        },
        "active": {
          "description": "true if group is in active state.",
          "type": "boolean"
        },
        "isInternalGroup": {
          "description": "true if the group is an internal group.",
          "type": "boolean"
        }
      }
    },
    "AvailabilityOfDevicesRequest": {
      "description": "Apple credentials needed to log into the Apple Developer Portal and access provisioning profiles",
      "properties": {
        "username": {
          "description": "The username for the Apple Developer account.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account.",
          "type": "string"
        },
        "service_connection_id": {
          "description": "The service_connection_id of the stored Apple credentials instad of username, password.",
          "type": "string"
        }
      }
    },
    "DeviceAvailability": {
      "description": "...",
      "required": [
        "registered",
        "available",
        "maximum"
      ],
      "properties": {
        "registered": {
          "type": "number"
        },
        "available": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        }
      }
    },
    "AvailabilityOfDevicesResponse": {
      "description": "The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal",
      "required": [
        "iphones",
        "ipads",
        "ipods",
        "watches"
      ],
      "properties": {
        "iphones": {
          "description": "...",
          "required": [
            "registered",
            "available",
            "maximum"
          ],
          "properties": {
            "registered": {
              "type": "number"
            },
            "available": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            }
          }
        },
        "ipads": {
          "description": "...",
          "required": [
            "registered",
            "available",
            "maximum"
          ],
          "properties": {
            "registered": {
              "type": "number"
            },
            "available": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            }
          }
        },
        "ipods": {
          "description": "...",
          "required": [
            "registered",
            "available",
            "maximum"
          ],
          "properties": {
            "registered": {
              "type": "number"
            },
            "available": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            }
          }
        },
        "watches": {
          "description": "...",
          "required": [
            "registered",
            "available",
            "maximum"
          ],
          "properties": {
            "registered": {
              "type": "number"
            },
            "available": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            }
          }
        }
      }
    },
    "UpdateDevicesRequest": {
      "description": "Information required to publish devices to the Apple Developer account and resign the application.",
      "properties": {
        "release_id": {
          "description": "When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.",
          "type": "number"
        },
        "username": {
          "description": "The username for the Apple Developer account to publish the devices to.",
          "type": "string"
        },
        "password": {
          "description": "The password for the Apple Developer account to publish the devices to.",
          "type": "string"
        },
        "account_service_connection_id": {
          "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
          "type": "string"
        },
        "p12_base64": {
          "description": "The certificate to use for resigning the application with the updated provisioning profiles.",
          "type": "string"
        },
        "p12_service_connection_id": {
          "description": "The service_connection_id of the stored Apple certificate instead of p12_base64 value.",
          "type": "string"
        },
        "p12_password": {
          "description": "The password certificate if one is needed.",
          "type": "string"
        },
        "publish_all_devices": {
          "description": "When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.",
          "type": "boolean"
        },
        "devices": {
          "description": "Array of device UDID's to be published to the Apple Developer account.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "destinations": {
          "description": "Array of distribution groups that the devices should be provisioned from.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "UpdateDevicesResponse": {
      "description": "URL that can be used to check the status of the update devices operation and the updated profiles.",
      "required": [
        "status_url"
      ],
      "properties": {
        "status_url": {
          "description": "URL that can be used to check the status of the update devices operation.",
          "type": "string"
        }
      }
    },
    "UpdateResignStatusRequest": {
      "description": "Updates the status of the resign request",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "The updated status for the resigning request.",
          "type": "string"
        },
        "error_code": {
          "description": "Error code if an error occured in the resigning operation.",
          "type": "string"
        },
        "error_message": {
          "description": "Error message if an error occured in the resigning operation.",
          "type": "string"
        }
      }
    },
    "UpdateResignStatusResponse": {
      "description": "URL that can be used to check the status of the update devices operation and the updated profiles.",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "The status.",
          "type": "string"
        },
        "profiles_zip_base64": {
          "description": "A zip of the updated provisioning profiles. Base64 encoded.",
          "type": "string"
        }
      }
    },
    "DeviceRegistrationUrl": {
      "description": "The url that can be navigated to in order to start the device registration process.",
      "required": [
        "registration_url"
      ],
      "properties": {
        "registration_url": {
          "description": "The url that can be navigated to in order to start the device registration process.",
          "type": "string"
        }
      }
    },
    "ResignAttemptResponse": {
      "description": "URL that can be used to check the status of the update devices operation and the updated profiles.",
      "required": [
        "status",
        "appId",
        "originalReleaseId",
        "userId",
        "contextId",
        "resignId",
        "startTime"
      ],
      "properties": {
        "status": {
          "description": "The status of the resigning operation.",
          "type": "string"
        },
        "userId": {
          "description": "ID of the user performing the resign operaiton.",
          "type": "string"
        },
        "appId": {
          "description": "App ID that the resign operation is being performed against.",
          "type": "string"
        },
        "originalReleaseId": {
          "description": "ID of the release which is being resigned.",
          "type": "number"
        },
        "resignId": {
          "description": "ID of the resign operation.",
          "type": "string"
        },
        "contextId": {
          "description": "Context ID for the resigning operation.",
          "type": "string"
        },
        "startTime": {
          "description": "The time that the resign operation was started.",
          "type": "number"
        },
        "destinations": {
          "description": "List of destinations that the resign operation is being performed against.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "errorCode": {
          "description": "Error code associated with the exception.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Error message associated with the exception.",
          "type": "string"
        }
      }
    },
    "StoresReleaseDetails": {
      "description": "Details of an uploaded release",
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "number"
        },
        "status": {
          "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
          "enum": [
            "available",
            "unavailable"
          ],
          "type": "string"
        },
        "app_name": {
          "description": "The app's name (extracted from the uploaded release).",
          "type": "string"
        },
        "app_display_name": {
          "description": "The app's display name.",
          "type": "string"
        },
        "version": {
          "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "release_notes": {
          "description": "The release's release notes.",
          "type": "string"
        },
        "size": {
          "description": "The release's size in bytes.",
          "type": "number"
        },
        "min_os": {
          "description": "The release's minimum required operating system.",
          "type": "string"
        },
        "android_min_api_level": {
          "description": "The release's minimum required Android API level.",
          "type": "string"
        },
        "bundle_identifier": {
          "description": "The identifier of the apps bundle.",
          "type": "string"
        },
        "fingerprint": {
          "description": "MD5 checksum of the release binary.",
          "type": "string"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "download_url": {
          "description": "The URL that hosts the binary for this release.",
          "type": "string"
        },
        "install_url": {
          "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
          "enum": [
            "group",
            "store"
          ],
          "type": "string"
        },
        "distribution_stores": {
          "description": "a list of distribution stores that are associated with this release.",
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "description": "ID identifying a unique distribution store.",
                "type": "string"
              },
              "name": {
                "description": "A name identifying a unique distribution store.",
                "type": "string"
              },
              "type": {
                "description": "type of the distribution store currently stores type can be intune or googleplay.",
                "enum": [
                  "intune",
                  "googleplay"
                ],
                "type": "string"
              },
              "publishing_status": {
                "description": "publishing status of the release in the store.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "StorePatchRequest": {
      "required": [
        "service_connection_id"
      ],
      "properties": {
        "service_connection_id": {
          "description": "Service connection id to updated.",
          "type": "string"
        }
      }
    },
    "ExternalStoreRequest": {
      "description": "ExternalStoreRequest",
      "properties": {
        "type": {
          "description": "store Type",
          "enum": [
            "googleplay",
            "intune",
            "apple"
          ],
          "type": "string"
        },
        "name": {
          "description": "name of the store. In case of googleplay, and Apple store this is fixed to Production.",
          "type": "string"
        },
        "track": {
          "description": "track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.",
          "enum": [
            "production",
            "alpha",
            "beta",
            "testflight-internal",
            "testflight-external"
          ],
          "type": "string"
        },
        "intune_details": {
          "properties": {
            "secret_json": {
              "properties": {
                "id_token": {
                  "description": "the id token of user",
                  "type": "string"
                },
                "refresh_token": {
                  "description": "the refresh token for user",
                  "type": "string"
                },
                "refresh_token_expiry": {
                  "description": "the expiry of refresh token",
                  "type": "string"
                }
              }
            },
            "target_audience": {
              "properties": {
                "name": {
                  "description": "display name for the target audience/group",
                  "type": "string"
                }
              }
            },
            "app_category": {
              "properties": {
                "name": {
                  "description": "display name for the app category",
                  "type": "string"
                }
              }
            },
            "tenant_id": {
              "description": "tenant id of the intune store",
              "type": "string"
            }
          }
        },
        "service_connection_id": {
          "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
          "type": "string"
        }
      }
    },
    "AppleMappingRequest": {
      "description": "Apple Mapping Request Type",
      "required": [
        "service_connection_id",
        "team_identifier"
      ],
      "properties": {
        "service_connection_id": {
          "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
          "type": "string"
        },
        "apple_id": {
          "description": "ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided",
          "type": "string"
        },
        "bundle_identifier": {
          "description": "Bundle Identifier of the apple package",
          "type": "string"
        },
        "team_identifier": {
          "description": "ID of the Team associated with the app in apple store",
          "type": "string"
        }
      }
    },
    "AppleMappingResponse": {
      "description": "Apple Mapping Request Type",
      "properties": {
        "app_id": {
          "description": "ID of the apple application in Mobile Center",
          "type": "string"
        },
        "service_connection_id": {
          "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
          "type": "string"
        },
        "apple_id": {
          "description": "ID of the apple application in apple store",
          "type": "string"
        },
        "team_identifier": {
          "description": "ID of the Team associated with the app in apple store",
          "type": "string"
        }
      }
    },
    "AppleTestFlightGroupsResponse": {
      "description": "Apple Test Flight Groups Response Type",
      "properties": {
        "id": {
          "description": "id of the group.",
          "type": "string"
        },
        "providerId": {
          "description": "provider id of the group.",
          "type": "number"
        },
        "appleId": {
          "description": "apple id of the group.",
          "type": "number"
        },
        "name": {
          "description": "name of the group.",
          "type": "string"
        }
      }
    },
    "PrivateCreateStoreRequest": {
      "description": "create the store through private API. Used by UI.",
      "properties": {
        "type": {
          "description": "store Type",
          "enum": [
            "intune"
          ],
          "type": "string"
        },
        "name": {
          "description": "name of the store.",
          "type": "string"
        },
        "intune_details": {
          "properties": {
            "target_audience": {
              "properties": {
                "name": {
                  "description": "display name for the target audience/group",
                  "type": "string"
                }
              }
            },
            "app_category": {
              "properties": {
                "name": {
                  "description": "display name for the app category",
                  "type": "string"
                }
              }
            },
            "tenant_id": {
              "description": "tenant id of the intune store",
              "type": "string"
            }
          }
        }
      }
    },
    "IntuneSecretDetails": {
      "properties": {
        "id_token": {
          "description": "the id token of user",
          "type": "string"
        },
        "refresh_token": {
          "description": "the refresh token for user",
          "type": "string"
        },
        "refresh_token_expiry": {
          "description": "the expiry of refresh token",
          "type": "string"
        }
      }
    },
    "IntuneCategories": {
      "properties": {
        "odata.context": {
          "description": "context",
          "type": "string"
        },
        "value": {
          "description": "categories for intune app",
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "description": "the id of the category",
                "type": "string"
              },
              "displayName": {
                "description": "the display name for the category",
                "type": "string"
              },
              "lastModifiedDateTime": {
                "description": "modified date for category",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "IntuneCategoryValue": {
      "properties": {
        "id": {
          "description": "the id of the category",
          "type": "string"
        },
        "displayName": {
          "description": "the display name for the category",
          "type": "string"
        },
        "lastModifiedDateTime": {
          "description": "modified date for category",
          "type": "string"
        }
      }
    },
    "IntuneGroups": {
      "properties": {
        "odata.context": {
          "description": "context",
          "type": "string"
        },
        "value": {
          "description": "categories for intune app",
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "description": "the id of the Group",
                "type": "string"
              },
              "displayName": {
                "description": "the display name of the group",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "IntuneGroupValue": {
      "properties": {
        "id": {
          "description": "the id of the Group",
          "type": "string"
        },
        "displayName": {
          "description": "the display name of the group",
          "type": "string"
        }
      }
    },
    "IntuneGroup": {
      "properties": {
        "id": {
          "description": "the id of the Group",
          "type": "string"
        },
        "displayName": {
          "description": "the display name of the group",
          "type": "string"
        },
        "securityEnabled": {
          "description": "species if it is a security group",
          "type": "boolean"
        }
      }
    },
    "CreateStoreSecretRequest": {
      "properties": {
        "secret_json": {
          "properties": {
            "id_token": {
              "description": "the id token of user",
              "type": "string"
            },
            "refresh_token": {
              "description": "the refresh token for user",
              "type": "string"
            },
            "refresh_token_expiry": {
              "description": "the expiry of refresh token",
              "type": "string"
            }
          }
        },
        "tenant_id": {
          "description": "the tenant id for user",
          "type": "string"
        }
      }
    },
    "CreateStoreSecretResponse": {
      "properties": {
        "secret_id": {
          "description": "the secret id for store secret",
          "type": "string"
        }
      }
    },
    "SecretDetails": {
      "properties": {
        "id_token": {
          "description": "the id token of user",
          "type": "string"
        },
        "refresh_token": {
          "description": "the refresh token for user",
          "type": "string"
        },
        "refresh_token_expiry": {
          "description": "the expiry of refresh token",
          "type": "string"
        }
      }
    },
    "ReleasePublishErrorResponse": {
      "description": "ReleasePublishErrorResponse",
      "properties": {
        "message": {
          "description": "error Details",
          "type": "string"
        },
        "is_log_available": {
          "description": "boolean property to tell if logs are available for download",
          "type": "boolean"
        }
      }
    },
    "ReleaseRealTimeStatusResponse": {
      "description": "status of the app from store",
      "properties": {
        "release_id": {
          "description": "release id",
          "type": "string"
        },
        "app_id": {
          "description": "app id",
          "type": "string"
        },
        "status": {
          "description": "Status Data from store",
          "properties": {
            "status": {
              "description": "status from store",
              "type": "string"
            },
            "storetype": {
              "description": "store type",
              "type": "string"
            },
            "track": {
              "description": "track information from store",
              "type": "string"
            },
            "version": {
              "description": "version of the app from store",
              "type": "string"
            }
          }
        }
      }
    },
    "ValidationResponse": {
      "description": "The response which contains the validation data that the connection is valid.",
      "properties": {
        "app_id": {
          "description": "app id",
          "type": "string"
        },
        "status": {
          "description": "Status Data from store",
          "properties": {
            "status": {
              "description": "status from store",
              "type": "string"
            },
            "storetype": {
              "description": "store type",
              "type": "string"
            },
            "track": {
              "description": "track information from store",
              "type": "string"
            },
            "version": {
              "description": "version of the app from store",
              "type": "string"
            }
          }
        }
      }
    },
    "HasBuildUploadedResponse": {
      "description": "The response for the build uploaded check.",
      "properties": {
        "has_build_uploaded": {
          "description": "true if a build has been uploaded, false otherwise",
          "type": "boolean"
        }
      }
    },
    "HasTestflightMetadataResponse": {
      "description": "The response for the testflight metadata check.",
      "properties": {
        "has_testflight_metadata": {
          "description": "true if the app has the testflight metadata, false otherwise",
          "type": "boolean"
        }
      }
    },
    "SkipValidationRequest": {
      "description": "Wheither or not to skip the validation for this release",
      "properties": {
        "skip_validation": {
          "description": "true if we want to skip the validation, false otherwise",
          "type": "boolean"
        }
      }
    },
    "StatusData": {
      "description": "Status Data from store",
      "properties": {
        "status": {
          "description": "status from store",
          "type": "string"
        },
        "storetype": {
          "description": "store type",
          "type": "string"
        },
        "track": {
          "description": "track information from store",
          "type": "string"
        },
        "version": {
          "description": "version of the app from store",
          "type": "string"
        }
      }
    },
    "ExternalStoreResponse": {
      "description": "ExternalStoreResponse",
      "properties": {
        "id": {
          "description": "Store id",
          "type": "string"
        },
        "name": {
          "description": "Store Name",
          "type": "string"
        },
        "type": {
          "description": "Store Type",
          "type": "string"
        },
        "track": {
          "description": "Store track",
          "enum": [
            "production",
            "alpha",
            "beta",
            "testflight-internal",
            "testflight-external"
          ],
          "type": "string"
        },
        "intune_details": {
          "description": "Store details for intune",
          "properties": {
            "target_audience": {
              "properties": {
                "name": {
                  "description": "display name for the target audience/group",
                  "type": "string"
                },
                "id": {
                  "description": "ID for the target audience/group.",
                  "type": "string"
                }
              }
            },
            "app_category": {
              "properties": {
                "name": {
                  "description": "display name for the app category",
                  "type": "string"
                },
                "id": {
                  "description": "ID for the category.",
                  "type": "string"
                }
              }
            }
          }
        },
        "service_connection_id": {
          "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
          "type": "string"
        },
        "created_by": {
          "description": "The ID of the principal that created the store.",
          "type": "string"
        },
        "created_by_principal_type": {
          "description": "The type of the principal that created the store.",
          "type": "string"
        }
      }
    },
    "StoreSecretResponse": {
      "description": "StoreSecretResponse",
      "properties": {
        "id": {
          "description": "Store id",
          "type": "string"
        },
        "name": {
          "description": "Store Name",
          "type": "string"
        },
        "type": {
          "description": "Store Type",
          "type": "string"
        },
        "secret": {
          "description": "Secret Json",
          "type": "string"
        },
        "tenant_id": {
          "description": "Tenant Id for Intune",
          "type": "string"
        }
      }
    },
    "IntuneStoreResponse": {
      "properties": {
        "target_audience": {
          "properties": {
            "name": {
              "description": "display name for the target audience/group",
              "type": "string"
            },
            "id": {
              "description": "ID for the target audience/group.",
              "type": "string"
            }
          }
        },
        "app_category": {
          "properties": {
            "name": {
              "description": "display name for the app category",
              "type": "string"
            },
            "id": {
              "description": "ID for the category.",
              "type": "string"
            }
          }
        }
      }
    },
    "IntuneStoreRequest": {
      "properties": {
        "secret_json": {
          "properties": {
            "id_token": {
              "description": "the id token of user",
              "type": "string"
            },
            "refresh_token": {
              "description": "the refresh token for user",
              "type": "string"
            },
            "refresh_token_expiry": {
              "description": "the expiry of refresh token",
              "type": "string"
            }
          }
        },
        "target_audience": {
          "properties": {
            "name": {
              "description": "display name for the target audience/group",
              "type": "string"
            }
          }
        },
        "app_category": {
          "properties": {
            "name": {
              "description": "display name for the app category",
              "type": "string"
            }
          }
        },
        "tenant_id": {
          "description": "tenant id of the intune store",
          "type": "string"
        }
      }
    },
    "PrivateIntuneStoreRequest": {
      "properties": {
        "target_audience": {
          "properties": {
            "name": {
              "description": "display name for the target audience/group",
              "type": "string"
            }
          }
        },
        "app_category": {
          "properties": {
            "name": {
              "description": "display name for the app category",
              "type": "string"
            }
          }
        },
        "tenant_id": {
          "description": "tenant id of the intune store",
          "type": "string"
        }
      }
    },
    "IntuneTargetAudience": {
      "properties": {
        "name": {
          "description": "display name for the target audience/group",
          "type": "string"
        }
      }
    },
    "IntuneAppCategory": {
      "properties": {
        "name": {
          "description": "display name for the app category",
          "type": "string"
        }
      }
    },
    "IntuneTargetAudienceResponse": {
      "properties": {
        "name": {
          "description": "display name for the target audience/group",
          "type": "string"
        },
        "id": {
          "description": "ID for the target audience/group.",
          "type": "string"
        }
      }
    },
    "IntuneAppCategoryResponse": {
      "properties": {
        "name": {
          "description": "display name for the app category",
          "type": "string"
        },
        "id": {
          "description": "ID for the category.",
          "type": "string"
        }
      }
    },
    "PatchReleaseRequest": {
      "properties": {
        "status": {
          "description": "updated status of release",
          "type": "string"
        },
        "dest_publish_id": {
          "description": "Destination Publish Id",
          "type": "string"
        },
        "error_details": {
          "description": "failure error details from store",
          "type": "string"
        },
        "error_contextId": {
          "description": "contextId for failed error message",
          "type": "string"
        },
        "wrap_package_url": {
          "description": "package url for wrapping request",
          "type": "string"
        },
        "is_wrapper_request": {
          "description": "request is for wrapping or not",
          "type": "boolean"
        }
      }
    },
    "StoresBasicReleaseDetails": {
      "description": "Basic information on a release",
      "properties": {
        "id": {
          "description": "ID identifying this unique release.",
          "type": "number"
        },
        "version": {
          "description": "The release's version.\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
          "type": "string"
        },
        "short_version": {
          "description": "The release's short version.\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
          "type": "string"
        },
        "uploaded_at": {
          "description": "UTC time in ISO 8601 format of the uploaded time.",
          "type": "string"
        },
        "destination_type": {
          "description": "Destination for this release.",
          "enum": [
            "group",
            "store",
            "tester"
          ],
          "type": "string"
        },
        "distribution_stores": {
          "description": "a list of distribution stores that are associated with this release.",
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "description": "ID identifying a unique distribution store.",
                "type": "string"
              },
              "name": {
                "description": "A name identifying a unique distribution store.",
                "type": "string"
              },
              "type": {
                "description": "A type identifying the type of distribution store.",
                "enum": [
                  "googleplay",
                  "intune",
                  "apple"
                ],
                "type": "string"
              },
              "publishing_status": {
                "description": "A status identifying the status of release in the distribution store.",
                "type": "string"
              },
              "is_latest": {
                "description": "Is the containing release the latest one in this distribution store.",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "StoresDetails": {
      "properties": {
        "id": {
          "description": "ID identifying a unique distribution store.",
          "type": "string"
        },
        "name": {
          "description": "A name identifying a unique distribution store.",
          "type": "string"
        },
        "type": {
          "description": "A type identifying the type of distribution store.",
          "enum": [
            "googleplay",
            "intune",
            "apple"
          ],
          "type": "string"
        },
        "publishing_status": {
          "description": "A status identifying the status of release in the distribution store.",
          "type": "string"
        },
        "is_latest": {
          "description": "Is the containing release the latest one in this distribution store.",
          "type": "boolean"
        }
      }
    },
    "StoreDestinationDetails": {
      "properties": {
        "dest_publish_id": {
          "description": "destination ID identifying a unique id in distribution store.",
          "type": "string"
        },
        "store_type": {
          "description": "type of store.",
          "enum": [
            "intune"
          ],
          "type": "string"
        },
        "appId": {
          "description": "app id of application.",
          "type": "string"
        }
      }
    },
    "StoresBasicDetails": {
      "properties": {
        "id": {
          "description": "ID identifying a unique distribution store.",
          "type": "string"
        },
        "name": {
          "description": "A name identifying a unique distribution store.",
          "type": "string"
        },
        "type": {
          "description": "type of the distribution store currently stores type can be intune or googleplay.",
          "enum": [
            "intune",
            "googleplay"
          ],
          "type": "string"
        },
        "publishing_status": {
          "description": "publishing status of the release in the store.",
          "type": "string"
        }
      }
    },
    "IntuneAppsRequest": {
      "description": "IntuneAppsRequest",
      "properties": {
        "created_month": {
          "description": "PartitionKey year-month",
          "type": "string"
        }
      }
    },
    "IntuneAppsResponse": {
      "description": "IntuneAppsResponse",
      "properties": {
        "created_month": {
          "description": "PartitionKey year-month",
          "type": "string"
        },
        "app_id": {
          "description": "App id",
          "type": "string"
        },
        "refreshStatus": {
          "description": "Refresh Status",
          "type": "string"
        }
      }
    },
    "OrgComplianceSettingsRequest": {
      "description": "org settings Request",
      "required": [
        "certificate_connection_id"
      ],
      "properties": {
        "certificate_connection_id": {
          "description": "certificate connection id to wrap and resign the app after wrapping",
          "type": "string"
        }
      }
    },
    "OrgComplianceSettingsResponse": {
      "description": "org settings response",
      "required": [
        "certificate_connection_id",
        "org_id",
        "id"
      ],
      "properties": {
        "id": {
          "description": "The internal unique id (UUID) of the organization compliance setting",
          "type": "string"
        },
        "org_id": {
          "description": "The internal unique id (UUID) of the organization.",
          "type": "string"
        },
        "certificate_connection_id": {
          "description": "certificate connection id to wrap and resign the app after wrapping",
          "type": "string"
        },
        "is_mam_enabled": {
          "description": "flag to tell if mam warpping is enabled on the Org",
          "type": "boolean"
        }
      }
    },
    "StoreNotification": {
      "properties": {
        "service": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "valid_until": {
          "type": "integer"
        }
      }
    },
    "DiagnosticIdResponse": {
      "description": "The diagnostic id for the given publish action",
      "properties": {
        "diagnostic_id": {
          "description": "diagnostic id",
          "type": "string"
        }
      }
    },
    "Symbol": {
      "required": [
        "symbol_id",
        "platform",
        "type",
        "app_id",
        "url",
        "origin",
        "alternate_symbol_ids",
        "status",
        "symbol_upload_id"
      ],
      "properties": {
        "symbol_id": {
          "description": "The unique id for this symbol (uuid)",
          "type": "string"
        },
        "type": {
          "description": "The type of the symbol for the current symbol upload",
          "enum": [
            "Apple",
            "JavaScript",
            "Breakpad",
            "AndroidProguard",
            "UWP"
          ],
          "type": "string"
        },
        "app_id": {
          "description": "The application that this symbol belongs to",
          "type": "string"
        },
        "platform": {
          "description": "The platform that this symbol is associated with",
          "type": "string"
        },
        "url": {
          "description": "The path name of the symbol file in blob storage",
          "type": "string"
        },
        "origin": {
          "description": "The origin of the symbol file",
          "enum": [
            "System",
            "User"
          ],
          "type": "string"
        },
        "alternate_symbol_ids": {
          "description": "The other symbols in the same file",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "Whether the symbol is ignored.",
          "enum": [
            "available",
            "ignored"
          ],
          "type": "string"
        },
        "version": {
          "description": "The version number. Optional for Apple. Required for Android.",
          "type": "string"
        },
        "build": {
          "description": "The build number. Optional for Apple. Required for Android.",
          "type": "string"
        },
        "symbol_upload_id": {
          "description": "The id of the symbol upload this symbol belongs to.",
          "type": "string"
        }
      }
    },
    "Symbols": {
      "description": "A response containing the list of symbols matching the specified filter (if any was provided)",
      "type": "array",
      "items": {
        "required": [
          "symbol_id",
          "platform",
          "type",
          "app_id",
          "url",
          "origin",
          "alternate_symbol_ids",
          "status",
          "symbol_upload_id"
        ],
        "properties": {
          "symbol_id": {
            "description": "The unique id for this symbol (uuid)",
            "type": "string"
          },
          "type": {
            "description": "The type of the symbol for the current symbol upload",
            "enum": [
              "Apple",
              "JavaScript",
              "Breakpad",
              "AndroidProguard",
              "UWP"
            ],
            "type": "string"
          },
          "app_id": {
            "description": "The application that this symbol belongs to",
            "type": "string"
          },
          "platform": {
            "description": "The platform that this symbol is associated with",
            "type": "string"
          },
          "url": {
            "description": "The path name of the symbol file in blob storage",
            "type": "string"
          },
          "origin": {
            "description": "The origin of the symbol file",
            "enum": [
              "System",
              "User"
            ],
            "type": "string"
          },
          "alternate_symbol_ids": {
            "description": "The other symbols in the same file",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "description": "Whether the symbol is ignored.",
            "enum": [
              "available",
              "ignored"
            ],
            "type": "string"
          },
          "version": {
            "description": "The version number. Optional for Apple. Required for Android.",
            "type": "string"
          },
          "build": {
            "description": "The build number. Optional for Apple. Required for Android.",
            "type": "string"
          },
          "symbol_upload_id": {
            "description": "The id of the symbol upload this symbol belongs to.",
            "type": "string"
          }
        }
      }
    },
    "SymbolStatusResponse": {
      "description": "A response containing information pertaining to a symbol status",
      "required": [
        "symbol_id",
        "app_id",
        "status"
      ],
      "properties": {
        "symbol_id": {
          "description": "The unique id for this symbol (uuid)",
          "type": "string"
        },
        "app_id": {
          "description": "The application that this symbol belongs to",
          "type": "string"
        },
        "status": {
          "description": "Whether the symbol is ignored.",
          "enum": [
            "available",
            "ignored",
            "missing"
          ],
          "type": "string"
        }
      }
    },
    "SymbolUpload": {
      "description": "A single symbol upload entity",
      "required": [
        "symbol_upload_id",
        "app_id",
        "status",
        "symbol_type"
      ],
      "properties": {
        "symbol_upload_id": {
          "description": "The id for the current symbol upload",
          "type": "string"
        },
        "app_id": {
          "description": "The application that this symbol upload belongs to",
          "type": "string"
        },
        "user": {
          "description": "User information of the one who intitiated the symbol upload",
          "properties": {
            "email": {
              "description": "The email of the user",
              "type": "string"
            },
            "display_name": {
              "description": "The full name of the user. Might for example be first and last name",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "The current status for the symbol upload",
          "enum": [
            "created",
            "committed",
            "aborted",
            "processing",
            "indexed",
            "failed"
          ],
          "type": "string"
        },
        "symbol_type": {
          "description": "The type of the symbol for the current symbol upload",
          "enum": [
            "Apple",
            "JavaScript",
            "Breakpad",
            "AndroidProguard",
            "UWP"
          ],
          "type": "string"
        },
        "symbols_uploaded": {
          "description": "The symbols found in the upload. This may be empty until the status is indexed",
          "type": "array",
          "items": {
            "required": [
              "symbol_id",
              "platform"
            ],
            "properties": {
              "symbol_id": {
                "description": "The symbol id of the symbol binary",
                "type": "string"
              },
              "platform": {
                "description": "The platform the symbol is associated with",
                "type": "string"
              }
            }
          }
        },
        "origin": {
          "description": "The origin of the symbol upload",
          "enum": [
            "User",
            "System"
          ],
          "type": "string"
        },
        "file_name": {
          "description": "The file name for the symbol upload",
          "type": "string"
        },
        "file_size": {
          "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
          "type": "number"
        },
        "timestamp": {
          "format": "date-time",
          "description": "When the symbol upload was committed, or last transaction time if not committed",
          "type": "string"
        }
      }
    },
    "SymbolUploads": {
      "description": "A set of symbol upload entities",
      "type": "array",
      "items": {
        "description": "A single symbol upload entity",
        "required": [
          "symbol_upload_id",
          "app_id",
          "status",
          "symbol_type"
        ],
        "properties": {
          "symbol_upload_id": {
            "description": "The id for the current symbol upload",
            "type": "string"
          },
          "app_id": {
            "description": "The application that this symbol upload belongs to",
            "type": "string"
          },
          "user": {
            "description": "User information of the one who intitiated the symbol upload",
            "properties": {
              "email": {
                "description": "The email of the user",
                "type": "string"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "The current status for the symbol upload",
            "enum": [
              "created",
              "committed",
              "aborted",
              "processing",
              "indexed",
              "failed"
            ],
            "type": "string"
          },
          "symbol_type": {
            "description": "The type of the symbol for the current symbol upload",
            "enum": [
              "Apple",
              "JavaScript",
              "Breakpad",
              "AndroidProguard",
              "UWP"
            ],
            "type": "string"
          },
          "symbols_uploaded": {
            "description": "The symbols found in the upload. This may be empty until the status is indexed",
            "type": "array",
            "items": {
              "required": [
                "symbol_id",
                "platform"
              ],
              "properties": {
                "symbol_id": {
                  "description": "The symbol id of the symbol binary",
                  "type": "string"
                },
                "platform": {
                  "description": "The platform the symbol is associated with",
                  "type": "string"
                }
              }
            }
          },
          "origin": {
            "description": "The origin of the symbol upload",
            "enum": [
              "User",
              "System"
            ],
            "type": "string"
          },
          "file_name": {
            "description": "The file name for the symbol upload",
            "type": "string"
          },
          "file_size": {
            "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
            "type": "number"
          },
          "timestamp": {
            "format": "date-time",
            "description": "When the symbol upload was committed, or last transaction time if not committed",
            "type": "string"
          }
        }
      }
    },
    "SymbolLocation": {
      "description": "Location for downloading symbol",
      "required": [
        "uri"
      ],
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "SymbolUploadLocation": {
      "description": "Location for downloading symbol upload",
      "required": [
        "uri"
      ],
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "SymbolUploadBeginRequest": {
      "description": "A request containing information pertaining to starting a symbol upload process",
      "required": [
        "symbol_type"
      ],
      "properties": {
        "symbol_type": {
          "description": "The type of the symbol for the current symbol upload",
          "enum": [
            "Apple",
            "JavaScript",
            "Breakpad",
            "AndroidProguard",
            "UWP"
          ],
          "type": "string"
        },
        "client_callback": {
          "description": "The callback URL that the client can optionally provide to get status updates for the current symbol upload",
          "type": "string"
        },
        "file_name": {
          "description": "The file name for the symbol upload",
          "type": "string"
        },
        "build": {
          "description": "The build number. Optional for Apple. Required for Android.",
          "type": "string"
        },
        "version": {
          "description": "The version number. Optional for Apple. Required for Android.",
          "type": "string"
        }
      }
    },
    "SymbolUploadBeginResponse": {
      "description": "A response containing information pertaining to starting a symbol upload process",
      "required": [
        "symbol_upload_id",
        "upload_url",
        "expiration_date"
      ],
      "properties": {
        "symbol_upload_id": {
          "description": "The id for the current upload",
          "type": "string"
        },
        "upload_url": {
          "description": "The URL where the client needs to upload the symbol blob to",
          "type": "string"
        },
        "expiration_date": {
          "format": "date-time",
          "description": "Describes how long the upload_url is valid",
          "type": "string"
        }
      }
    },
    "SymbolUploadEndRequest": {
      "description": "A request containing information pertaining to completing a symbol upload process",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "The desired operation for the symbol upload",
          "enum": [
            "committed",
            "aborted"
          ],
          "type": "string"
        }
      }
    },
    "SymbolUploadUserInfo": {
      "properties": {
        "email": {
          "description": "The email of the user",
          "type": "string"
        },
        "display_name": {
          "description": "The full name of the user. Might for example be first and last name",
          "type": "string"
        }
      }
    },
    "UploadedSymbolInfo": {
      "required": [
        "symbol_id",
        "platform"
      ],
      "properties": {
        "symbol_id": {
          "description": "The symbol id of the symbol binary",
          "type": "string"
        },
        "platform": {
          "description": "The platform the symbol is associated with",
          "type": "string"
        }
      }
    },
    "SystemVersionNameGroup": {
      "description": "A response represents information about symbol name group",
      "properties": {
        "name": {
          "description": "Name of version group",
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SystemVersionNameGroups": {
      "description": "A list of symbol name group entities",
      "type": "array",
      "items": {
        "description": "A response represents information about symbol name group",
        "properties": {
          "name": {
            "description": "Name of version group",
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "CrashGroupStatusEnum": {
      "enum": [
        "open",
        "closed",
        "ignored"
      ]
    },
    "AppCrashesInfo": {
      "required": [
        "has_crashes",
        "features"
      ],
      "type": "object",
      "properties": {
        "has_crashes": {
          "type": "boolean"
        },
        "features": {
          "type": "object",
          "properties": {
            "crashgroup_modify_status": {
              "description": "App supports modification of crashgroup status",
              "type": "boolean"
            },
            "crashgroup_modify_annotation": {
              "description": "App supports modification of crashgroup annotation",
              "type": "boolean"
            },
            "search": {
              "description": "App supports search API",
              "type": "boolean"
            },
            "crashgroup_analytics_crashfreeusers": {
              "description": "App supports the 'crash free user' metric",
              "type": "boolean"
            },
            "crashgroup_analytics_impactedusers": {
              "description": "App supports the 'impacted users' metric",
              "type": "boolean"
            },
            "crash_download_raw": {
              "description": "App supports download of raw crashes",
              "type": "boolean"
            }
          }
        }
      }
    },
    "AppFeatures": {
      "type": "object",
      "properties": {
        "crashgroup_modify_status": {
          "description": "App supports modification of crashgroup status",
          "type": "boolean"
        },
        "crashgroup_modify_annotation": {
          "description": "App supports modification of crashgroup annotation",
          "type": "boolean"
        },
        "search": {
          "description": "App supports search API",
          "type": "boolean"
        },
        "crashgroup_analytics_crashfreeusers": {
          "description": "App supports the 'crash free user' metric",
          "type": "boolean"
        },
        "crashgroup_analytics_impactedusers": {
          "description": "App supports the 'impacted users' metric",
          "type": "boolean"
        },
        "crash_download_raw": {
          "description": "App supports download of raw crashes",
          "type": "boolean"
        }
      }
    },
    "AppVersion": {
      "required": [
        "app_version_id",
        "app_id",
        "display_name",
        "app_version"
      ],
      "type": "object",
      "properties": {
        "app_version_id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "app_version": {
          "type": "string"
        },
        "build_number": {
          "type": "string"
        }
      }
    },
    "Exception": {
      "description": "a exception",
      "required": [
        "frames"
      ],
      "properties": {
        "reason": {
          "description": "Reason of the exception",
          "type": "string"
        },
        "type": {
          "description": "Type of the exception (NSSomethingException, NullPointerException)",
          "type": "string"
        },
        "frames": {
          "description": "frames of the excetpion",
          "type": "array",
          "items": {
            "description": "a single frame of a stack trace",
            "required": [
              "code_raw",
              "code_formatted",
              "app_code"
            ],
            "properties": {
              "address": {
                "description": "address of the frame",
                "type": "string"
              },
              "class_name": {
                "description": "name of the class",
                "type": "string"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "class_method": {
                "description": "is a class method",
                "type": "boolean"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "app_code": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "framework_name": {
                "description": "Name of the framework",
                "type": "string"
              },
              "code_raw": {
                "description": "Raw frame string",
                "type": "string"
              },
              "code_formatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "relevant": {
                "description": "frame should be shown always",
                "type": "boolean"
              },
              "method_params": {
                "description": "parameters of the frames method",
                "type": "string"
              }
            }
          }
        },
        "relevant": {
          "description": "relevant exception (crashed)",
          "type": "boolean"
        },
        "inner_exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Exception"
          }
        },
        "platform": {
          "description": "SDK/Platform this thread is beeing generated from",
          "enum": [
            "ios",
            "android",
            "xamarin",
            "react-native",
            "ndk",
            "unity",
            "other"
          ],
          "type": "string"
        }
      }
    },
    "Stacktrace": {
      "description": "a stacktrace in a processed and prettyfied way",
      "properties": {
        "title": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "threads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Thread"
          }
        },
        "exception": {
          "$ref": "#/definitions/Exception"
        }
      }
    },
    "Thread": {
      "description": "a thread representation",
      "required": [
        "title",
        "frames"
      ],
      "properties": {
        "title": {
          "description": "name of the thread",
          "type": "string"
        },
        "frames": {
          "description": "frames of that thread",
          "type": "array",
          "items": {
            "description": "a single frame of a stack trace",
            "required": [
              "code_raw",
              "code_formatted",
              "app_code"
            ],
            "properties": {
              "address": {
                "description": "address of the frame",
                "type": "string"
              },
              "class_name": {
                "description": "name of the class",
                "type": "string"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "class_method": {
                "description": "is a class method",
                "type": "boolean"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "app_code": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "framework_name": {
                "description": "Name of the framework",
                "type": "string"
              },
              "code_raw": {
                "description": "Raw frame string",
                "type": "string"
              },
              "code_formatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "relevant": {
                "description": "frame should be shown always",
                "type": "boolean"
              },
              "method_params": {
                "description": "parameters of the frames method",
                "type": "string"
              }
            }
          }
        },
        "exception": {
          "$ref": "#/definitions/Exception"
        },
        "relevant": {
          "description": "Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true",
          "type": "boolean"
        },
        "platform": {
          "description": "SDK/Platform this thread is beeing generated from",
          "enum": [
            "ios",
            "android",
            "xamarin",
            "react-native",
            "ndk",
            "unity",
            "other"
          ],
          "type": "string"
        },
        "crashed": {
          "description": "True if this thread crashed",
          "type": "boolean"
        }
      }
    },
    "StackFrame": {
      "description": "a single frame of a stack trace",
      "required": [
        "code_raw",
        "code_formatted",
        "app_code"
      ],
      "properties": {
        "address": {
          "description": "address of the frame",
          "type": "string"
        },
        "class_name": {
          "description": "name of the class",
          "type": "string"
        },
        "method": {
          "description": "name of the method",
          "type": "string"
        },
        "class_method": {
          "description": "is a class method",
          "type": "boolean"
        },
        "file": {
          "description": "name of the file",
          "type": "string"
        },
        "line": {
          "description": "line number",
          "type": "integer"
        },
        "app_code": {
          "description": "this line isn't from any framework",
          "type": "boolean"
        },
        "framework_name": {
          "description": "Name of the framework",
          "type": "string"
        },
        "code_raw": {
          "description": "Raw frame string",
          "type": "string"
        },
        "code_formatted": {
          "description": "Formatted frame string",
          "type": "string"
        },
        "language": {
          "description": "programming language of the frame",
          "enum": [
            "JavaScript",
            "CSharp",
            "Objective-C",
            "Objective-Cpp",
            "Cpp",
            "C",
            "Swift",
            "Java",
            "Unknown"
          ],
          "type": "string"
        },
        "relevant": {
          "description": "frame should be shown always",
          "type": "boolean"
        },
        "method_params": {
          "description": "parameters of the frames method",
          "type": "string"
        }
      }
    },
    "ReasonStackFrame": {
      "description": "frame belonging to the reason of the crash",
      "properties": {
        "class_name": {
          "description": "name of the class",
          "type": "string"
        },
        "method": {
          "description": "name of the method",
          "type": "string"
        },
        "class_method": {
          "description": "is a class method",
          "type": "boolean"
        },
        "file": {
          "description": "name of the file",
          "type": "string"
        },
        "line": {
          "description": "line number",
          "type": "integer"
        },
        "app_code": {
          "description": "this line isn't from any framework",
          "type": "boolean"
        },
        "framework_name": {
          "description": "Name of the framework",
          "type": "string"
        },
        "code_formatted": {
          "description": "Formatted frame string",
          "type": "string"
        },
        "code_raw": {
          "description": "Unformatted Frame string",
          "type": "string"
        },
        "language": {
          "description": "programming language of the frame",
          "enum": [
            "JavaScript",
            "CSharp",
            "Objective-C",
            "Objective-Cpp",
            "Cpp",
            "C",
            "Swift",
            "Java",
            "Unknown"
          ],
          "type": "string"
        },
        "method_params": {
          "description": "parameters of the frames method",
          "type": "string"
        },
        "exception_type": {
          "description": "Exception type.",
          "type": "string"
        },
        "os_exception_type": {
          "description": "OS exception type. (aka. SIGNAL)",
          "type": "string"
        }
      }
    },
    "RetentionSettings": {
      "required": [
        "retention_in_days"
      ],
      "type": "object",
      "properties": {
        "retention_in_days": {
          "enum": [
            28,
            90
          ],
          "type": "integer"
        }
      }
    },
    "CrashAttachment": {
      "required": [
        "app_id",
        "attachment_id",
        "crash_id",
        "blob_location",
        "content_type",
        "file_name",
        "created_time",
        "size"
      ],
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "attachment_id": {
          "type": "string"
        },
        "crash_id": {
          "type": "string"
        },
        "blob_location": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "created_time": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "type": "number"
        }
      }
    },
    "RawCrashLog": {
      "type": "object"
    },
    "NativeCrashLog": {
      "type": "string"
    },
    "CrashRawLocation": {
      "description": "Location for downloading crash raw",
      "required": [
        "uri"
      ],
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "CrashAttachmentLocation": {
      "description": "Location for downloading crash attachment",
      "required": [
        "uri"
      ],
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "CrashGroupsContainer": {
      "required": [
        "limited_result_set",
        "crash_groups"
      ],
      "type": "object",
      "properties": {
        "limited_result_set": {
          "type": "boolean"
        },
        "continuation_token": {
          "description": "Cassandra request continuation token. The token is used for pagination.",
          "type": "string"
        },
        "crash_groups": {
          "type": "array",
          "items": {
            "required": [
              "crash_group_id",
              "new_crash_group_id",
              "display_id",
              "app_version",
              "build",
              "status",
              "count",
              "first_occurrence",
              "last_occurrence",
              "crash_reason",
              "fatal",
              "annotation"
            ],
            "type": "object",
            "properties": {
              "crash_group_id": {
                "type": "string"
              },
              "new_crash_group_id": {
                "type": "string"
              },
              "display_id": {
                "type": "string"
              },
              "app_version": {
                "type": "string"
              },
              "build": {
                "type": "string"
              },
              "status": {
                "enum": [
                  "open",
                  "closed",
                  "ignored"
                ],
                "type": "string"
              },
              "count": {
                "type": "integer"
              },
              "impacted_users": {
                "type": "integer"
              },
              "first_occurrence": {
                "format": "date-time",
                "type": "string"
              },
              "last_occurrence": {
                "format": "date-time",
                "type": "string"
              },
              "exception": {
                "type": "string"
              },
              "crash_reason": {
                "type": "string"
              },
              "reason_frame": {
                "description": "frame belonging to the reason of the crash",
                "properties": {
                  "class_name": {
                    "description": "name of the class",
                    "type": "string"
                  },
                  "method": {
                    "description": "name of the method",
                    "type": "string"
                  },
                  "class_method": {
                    "description": "is a class method",
                    "type": "boolean"
                  },
                  "file": {
                    "description": "name of the file",
                    "type": "string"
                  },
                  "line": {
                    "description": "line number",
                    "type": "integer"
                  },
                  "app_code": {
                    "description": "this line isn't from any framework",
                    "type": "boolean"
                  },
                  "framework_name": {
                    "description": "Name of the framework",
                    "type": "string"
                  },
                  "code_formatted": {
                    "description": "Formatted frame string",
                    "type": "string"
                  },
                  "code_raw": {
                    "description": "Unformatted Frame string",
                    "type": "string"
                  },
                  "language": {
                    "description": "programming language of the frame",
                    "enum": [
                      "JavaScript",
                      "CSharp",
                      "Objective-C",
                      "Objective-Cpp",
                      "Cpp",
                      "C",
                      "Swift",
                      "Java",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "method_params": {
                    "description": "parameters of the frames method",
                    "type": "string"
                  },
                  "exception_type": {
                    "description": "Exception type.",
                    "type": "string"
                  },
                  "os_exception_type": {
                    "description": "OS exception type. (aka. SIGNAL)",
                    "type": "string"
                  }
                }
              },
              "fatal": {
                "description": "Crash or handled exception",
                "type": "boolean"
              },
              "annotation": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "CrashGroup": {
      "required": [
        "crash_group_id",
        "new_crash_group_id",
        "display_id",
        "app_version",
        "build",
        "status",
        "count",
        "first_occurrence",
        "last_occurrence",
        "crash_reason",
        "fatal",
        "annotation"
      ],
      "type": "object",
      "properties": {
        "crash_group_id": {
          "type": "string"
        },
        "new_crash_group_id": {
          "type": "string"
        },
        "display_id": {
          "type": "string"
        },
        "app_version": {
          "type": "string"
        },
        "build": {
          "type": "string"
        },
        "status": {
          "enum": [
            "open",
            "closed",
            "ignored"
          ],
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "impacted_users": {
          "type": "integer"
        },
        "first_occurrence": {
          "format": "date-time",
          "type": "string"
        },
        "last_occurrence": {
          "format": "date-time",
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "crash_reason": {
          "type": "string"
        },
        "reason_frame": {
          "description": "frame belonging to the reason of the crash",
          "properties": {
            "class_name": {
              "description": "name of the class",
              "type": "string"
            },
            "method": {
              "description": "name of the method",
              "type": "string"
            },
            "class_method": {
              "description": "is a class method",
              "type": "boolean"
            },
            "file": {
              "description": "name of the file",
              "type": "string"
            },
            "line": {
              "description": "line number",
              "type": "integer"
            },
            "app_code": {
              "description": "this line isn't from any framework",
              "type": "boolean"
            },
            "framework_name": {
              "description": "Name of the framework",
              "type": "string"
            },
            "code_formatted": {
              "description": "Formatted frame string",
              "type": "string"
            },
            "code_raw": {
              "description": "Unformatted Frame string",
              "type": "string"
            },
            "language": {
              "description": "programming language of the frame",
              "enum": [
                "JavaScript",
                "CSharp",
                "Objective-C",
                "Objective-Cpp",
                "Cpp",
                "C",
                "Swift",
                "Java",
                "Unknown"
              ],
              "type": "string"
            },
            "method_params": {
              "description": "parameters of the frames method",
              "type": "string"
            },
            "exception_type": {
              "description": "Exception type.",
              "type": "string"
            },
            "os_exception_type": {
              "description": "OS exception type. (aka. SIGNAL)",
              "type": "string"
            }
          }
        },
        "fatal": {
          "description": "Crash or handled exception",
          "type": "boolean"
        },
        "annotation": {
          "type": "string"
        }
      }
    },
    "CrashGroupChange": {
      "type": "object",
      "properties": {
        "status": {
          "enum": [
            "open",
            "closed",
            "ignored"
          ]
        },
        "annotation": {
          "type": "string"
        }
      }
    },
    "Crash": {
      "required": [
        "new_crash_group_id",
        "crash_id",
        "new_crash_id",
        "timestamp",
        "version",
        "build",
        "device",
        "os_version",
        "user_name"
      ],
      "type": "object",
      "properties": {
        "details": {
          "required": [
            "locale",
            "screen_size",
            "rooted"
          ],
          "properties": {
            "carrier_country": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "rooted": {
              "description": "Whether the device where the crash occurred is rooted or jailbroken\n",
              "type": "boolean"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_start_timestamp": {
              "format": "date-time",
              "description": "Application launch timestamp (example: 1985-04-12T23:20:50.52Z).\n",
              "type": "string"
            }
          }
        },
        "new_crash_group_id": {
          "description": "",
          "type": "string"
        },
        "crash_id": {
          "description": "",
          "type": "string"
        },
        "new_crash_id": {
          "description": "",
          "type": "string"
        },
        "display_id": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "description": "",
          "type": "string"
        },
        "build": {
          "description": "",
          "type": "string"
        },
        "device": {
          "description": "",
          "type": "string"
        },
        "device_name": {
          "description": "",
          "type": "string"
        },
        "os_version": {
          "description": "",
          "type": "string"
        },
        "os_type": {
          "description": "",
          "type": "string"
        },
        "stacktrace": {
          "$ref": "#/definitions/Stacktrace"
        },
        "user_name": {
          "description": "",
          "type": "string"
        },
        "user_email": {
          "description": "",
          "type": "string"
        }
      }
    },
    "CrashDetails": {
      "required": [
        "locale",
        "screen_size",
        "rooted"
      ],
      "properties": {
        "carrier_country": {
          "description": "Carrier country code (for mobile devices).\n",
          "type": "string"
        },
        "carrier_name": {
          "description": "Carrier name (for mobile devices).\n",
          "type": "string"
        },
        "locale": {
          "description": "Language code (example: en_US).\n",
          "type": "string"
        },
        "os_build": {
          "description": "OS build code (example: LMY47X).\n",
          "type": "string"
        },
        "rooted": {
          "description": "Whether the device where the crash occurred is rooted or jailbroken\n",
          "type": "boolean"
        },
        "screen_size": {
          "description": "Screen size of the device in pixels (example: 640x480).\n",
          "type": "string"
        },
        "app_start_timestamp": {
          "format": "date-time",
          "description": "Application launch timestamp (example: 1985-04-12T23:20:50.52Z).\n",
          "type": "string"
        }
      }
    },
    "AlertingCrashGroup": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "app_display_name": {
          "type": "string"
        },
        "app_platform": {
          "description": "SDK/Platform this thread is beeing generated from",
          "enum": [
            "ios",
            "android",
            "xamarin",
            "react-native",
            "ndk",
            "unity",
            "other"
          ],
          "type": "string"
        },
        "app_version": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "stack_trace": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CrashDeleteCounter": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "crash_group_id": {
          "type": "string"
        },
        "crash_id": {
          "type": "string"
        },
        "crashes_deleted": {
          "type": "integer"
        },
        "attachments_deleted": {
          "type": "integer"
        },
        "blobs_succeeded": {
          "type": "integer"
        },
        "blobs_failed": {
          "type": "integer"
        }
      }
    },
    "v2SymbolStatusEnum": {
      "description": "enumeration of symbol statuses",
      "enum": [
        "missing",
        "ignored",
        "available"
      ]
    },
    "v2MissingSymbol": {
      "description": "missing symbol",
      "required": [
        "symbol_id",
        "name",
        "status"
      ],
      "properties": {
        "symbol_id": {
          "description": "symbol id",
          "type": "string"
        },
        "name": {
          "description": "symbol name",
          "type": "string"
        },
        "platform": {
          "description": "symbol plarform",
          "type": "string"
        },
        "status": {
          "description": "symbol status",
          "enum": [
            "missing",
            "ignored",
            "available"
          ],
          "type": "string"
        }
      }
    },
    "v2MissingSymbols": {
      "description": "A list of missing symbols",
      "type": "array",
      "items": {
        "description": "missing symbol",
        "required": [
          "symbol_id",
          "name",
          "status"
        ],
        "properties": {
          "symbol_id": {
            "description": "symbol id",
            "type": "string"
          },
          "name": {
            "description": "symbol name",
            "type": "string"
          },
          "platform": {
            "description": "symbol plarform",
            "type": "string"
          },
          "status": {
            "description": "symbol status",
            "enum": [
              "missing",
              "ignored",
              "available"
            ],
            "type": "string"
          }
        }
      }
    },
    "v2SymbolUpdateInfo": {
      "description": "symbol update message",
      "required": [
        "symbol_id",
        "app_id",
        "status"
      ],
      "properties": {
        "symbol_id": {
          "description": "UUID of the symbol",
          "type": "string"
        },
        "app_id": {
          "description": "application id",
          "type": "string"
        },
        "status": {
          "description": "symbol upload status",
          "enum": [
            "missing",
            "ignored",
            "available"
          ],
          "type": "string"
        }
      }
    },
    "v2MissingSymbolCrashGroupStatusEnum": {
      "description": "enumeration of missing symbol grash group statuses",
      "enum": [
        "active",
        "pending",
        "closed"
      ]
    },
    "v2MissingSymbolCrashGroup": {
      "description": "missing symbol crash group object",
      "required": [
        "symbol_group_id",
        "app_id",
        "app_ver",
        "app_build",
        "last_modified",
        "missing_symbols",
        "status"
      ],
      "properties": {
        "symbol_group_id": {
          "description": "id of the symbol group",
          "type": "string"
        },
        "crash_count": {
          "description": "number of crashes that belong to this group",
          "type": "integer"
        },
        "error_count": {
          "description": "number of errors that belong to this group",
          "type": "integer"
        },
        "app_id": {
          "description": "application id",
          "type": "string"
        },
        "app_ver": {
          "description": "application version",
          "type": "string"
        },
        "app_build": {
          "description": "application build",
          "type": "string"
        },
        "last_modified": {
          "format": "date-time",
          "description": "last update date for the group",
          "type": "string"
        },
        "missing_symbols": {
          "description": "list of missing symbols",
          "type": "array",
          "items": {
            "description": "missing symbol",
            "required": [
              "symbol_id",
              "name",
              "status"
            ],
            "properties": {
              "symbol_id": {
                "description": "symbol id",
                "type": "string"
              },
              "name": {
                "description": "symbol name",
                "type": "string"
              },
              "platform": {
                "description": "symbol plarform",
                "type": "string"
              },
              "status": {
                "description": "symbol status",
                "enum": [
                  "missing",
                  "ignored",
                  "available"
                ],
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "group status",
          "enum": [
            "active",
            "pending",
            "closed"
          ],
          "type": "string"
        }
      }
    },
    "v2MissingSymbolCrashGroups": {
      "description": "A list of crash groups formed by missing symbols combination",
      "type": "array",
      "items": {
        "description": "missing symbol crash group object",
        "required": [
          "symbol_group_id",
          "app_id",
          "app_ver",
          "app_build",
          "last_modified",
          "missing_symbols",
          "status"
        ],
        "properties": {
          "symbol_group_id": {
            "description": "id of the symbol group",
            "type": "string"
          },
          "crash_count": {
            "description": "number of crashes that belong to this group",
            "type": "integer"
          },
          "error_count": {
            "description": "number of errors that belong to this group",
            "type": "integer"
          },
          "app_id": {
            "description": "application id",
            "type": "string"
          },
          "app_ver": {
            "description": "application version",
            "type": "string"
          },
          "app_build": {
            "description": "application build",
            "type": "string"
          },
          "last_modified": {
            "format": "date-time",
            "description": "last update date for the group",
            "type": "string"
          },
          "missing_symbols": {
            "description": "list of missing symbols",
            "type": "array",
            "items": {
              "description": "missing symbol",
              "required": [
                "symbol_id",
                "name",
                "status"
              ],
              "properties": {
                "symbol_id": {
                  "description": "symbol id",
                  "type": "string"
                },
                "name": {
                  "description": "symbol name",
                  "type": "string"
                },
                "platform": {
                  "description": "symbol plarform",
                  "type": "string"
                },
                "status": {
                  "description": "symbol status",
                  "enum": [
                    "missing",
                    "ignored",
                    "available"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "description": "group status",
            "enum": [
              "active",
              "pending",
              "closed"
            ],
            "type": "string"
          }
        }
      }
    },
    "v2MissingSymbolCrashGroupsResponse": {
      "description": "grouped by missing symbols crashes response object",
      "required": [
        "total_crash_count",
        "groups"
      ],
      "properties": {
        "total_crash_count": {
          "description": "total number of crashes for all the groups",
          "type": "integer"
        },
        "groups": {
          "description": "list of crash groups formed by missing symbols combination",
          "type": "array",
          "items": {
            "description": "missing symbol crash group object",
            "required": [
              "symbol_group_id",
              "app_id",
              "app_ver",
              "app_build",
              "last_modified",
              "missing_symbols",
              "status"
            ],
            "properties": {
              "symbol_group_id": {
                "description": "id of the symbol group",
                "type": "string"
              },
              "crash_count": {
                "description": "number of crashes that belong to this group",
                "type": "integer"
              },
              "error_count": {
                "description": "number of errors that belong to this group",
                "type": "integer"
              },
              "app_id": {
                "description": "application id",
                "type": "string"
              },
              "app_ver": {
                "description": "application version",
                "type": "string"
              },
              "app_build": {
                "description": "application build",
                "type": "string"
              },
              "last_modified": {
                "format": "date-time",
                "description": "last update date for the group",
                "type": "string"
              },
              "missing_symbols": {
                "description": "list of missing symbols",
                "type": "array",
                "items": {
                  "description": "missing symbol",
                  "required": [
                    "symbol_id",
                    "name",
                    "status"
                  ],
                  "properties": {
                    "symbol_id": {
                      "description": "symbol id",
                      "type": "string"
                    },
                    "name": {
                      "description": "symbol name",
                      "type": "string"
                    },
                    "platform": {
                      "description": "symbol plarform",
                      "type": "string"
                    },
                    "status": {
                      "description": "symbol status",
                      "enum": [
                        "missing",
                        "ignored",
                        "available"
                      ],
                      "type": "string"
                    }
                  }
                }
              },
              "status": {
                "description": "group status",
                "enum": [
                  "active",
                  "pending",
                  "closed"
                ],
                "type": "string"
              }
            }
          }
        }
      }
    },
    "v2MissingSymbolCrashGroupsInfoResponse": {
      "description": "missing symbol groups",
      "required": [
        "total_crash_count"
      ],
      "properties": {
        "total_crash_count": {
          "description": "total number of crashes for all missing symbol groups",
          "type": "integer"
        }
      }
    },
    "v2StatusResponse": {
      "description": "status response object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v2FailureResponse": {
      "description": "failure response object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActiveCrashingAppDetails": {
      "type": "object",
      "properties": {
        "nextLink": {
          "type": "string"
        },
        "appsWithCrashes": {
          "description": "details of the apps with crashes",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "appId": {
                "description": "application identifier",
                "type": "string"
              },
              "appVersion": {
                "description": "application version",
                "type": "string"
              },
              "crashGroupId": {
                "description": "crash group identifier",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "LogTraceDefinition": {
      "required": [
        "app_secret"
      ],
      "type": "object",
      "properties": {
        "app_secret": {
          "type": "string"
        },
        "install_id": {
          "type": "string"
        },
        "expiration": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CrashingAppDetail": {
      "type": "object",
      "properties": {
        "appId": {
          "description": "application identifier",
          "type": "string"
        },
        "appVersion": {
          "description": "application version",
          "type": "string"
        },
        "crashGroupId": {
          "description": "crash group identifier",
          "type": "string"
        }
      }
    },
    "LogContainer": {
      "required": [
        "logs"
      ],
      "type": "object",
      "properties": {
        "exceeded_max_limit": {
          "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
          "type": "boolean"
        },
        "last_received_log_timestamp": {
          "format": "date-time",
          "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
          "type": "string"
        },
        "logs": {
          "description": "the list of logs",
          "minItems": 0,
          "type": "array",
          "items": {
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object",
            "properties": {
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "description": "Log creation timestamp.\n",
                "type": "string"
              },
              "install_id": {
                "format": "uuid",
                "description": "Install ID.\n",
                "type": "string"
              },
              "device": {
                "description": "Device characteristics.",
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object",
                "properties": {
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  }
                }
              }
            },
            "discriminator": "type"
          }
        }
      }
    },
    "GenericLogContainer": {
      "required": [
        "logs"
      ],
      "type": "object",
      "properties": {
        "exceeded_max_limit": {
          "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
          "type": "boolean"
        },
        "last_received_log_timestamp": {
          "format": "date-time",
          "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
          "type": "string"
        },
        "logs": {
          "description": "the list of logs",
          "minItems": 0,
          "type": "array",
          "items": {
            "description": "Generic log.",
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object",
            "properties": {
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "description": "Log creation timestamp.\n",
                "type": "string"
              },
              "install_id": {
                "format": "uuid",
                "description": "Install ID.\n",
                "type": "string"
              },
              "session_id": {
                "format": "uuid",
                "description": "Session ID.\n",
                "type": "string"
              },
              "event_id": {
                "description": "Event ID.\n",
                "type": "string"
              },
              "event_name": {
                "description": "Event name.\n",
                "type": "string"
              },
              "message_id": {
                "description": "Message ID.\n",
                "type": "string"
              },
              "properties": {
                "description": "event specific properties.\n",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "device": {
                "description": "Device characteristics.",
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object",
                "properties": {
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  }
                }
              },
              "auth_provider": {
                "description": "Auth service provider.\n",
                "type": "string"
              },
              "account_id": {
                "description": "Account ID of the authenticated user.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "GenericLog": {
      "description": "Generic log.",
      "required": [
        "type",
        "timestamp",
        "install_id",
        "device"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Log type.\n",
          "enum": [
            "event",
            "page",
            "start_session",
            "error",
            "push_installation",
            "start_service",
            "custom_properties"
          ],
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Log creation timestamp.\n",
          "type": "string"
        },
        "install_id": {
          "format": "uuid",
          "description": "Install ID.\n",
          "type": "string"
        },
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "event_id": {
          "description": "Event ID.\n",
          "type": "string"
        },
        "event_name": {
          "description": "Event name.\n",
          "type": "string"
        },
        "message_id": {
          "description": "Message ID.\n",
          "type": "string"
        },
        "properties": {
          "description": "event specific properties.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device": {
          "description": "Device characteristics.",
          "required": [
            "sdk_name",
            "sdk_version",
            "os_name",
            "os_version",
            "locale",
            "time_zone_offset",
            "app_version",
            "app_build"
          ],
          "type": "object",
          "properties": {
            "sdk_name": {
              "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
              "type": "string"
            },
            "sdk_version": {
              "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
              "type": "string"
            },
            "wrapper_sdk_version": {
              "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
              "type": "string"
            },
            "wrapper_sdk_name": {
              "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
              "type": "string"
            },
            "model": {
              "description": "Device model (example: iPad2,3).\n",
              "type": "string"
            },
            "oem_name": {
              "description": "Device manufacturer (example: HTC).\n",
              "type": "string"
            },
            "os_name": {
              "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
              "type": "string"
            },
            "os_version": {
              "description": "OS version (example: 9.3.0).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "os_api_level": {
              "description": "API level when applicable like in Android (example: 15).\n",
              "type": "integer"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "time_zone_offset": {
              "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
              "maximum": 840,
              "minimum": -840,
              "type": "integer"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_version": {
              "description": "Application version name, e.g. 1.1.0\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "carrier_code": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_country": {
              "description": "Carrier country.\n",
              "type": "string"
            },
            "app_build": {
              "description": "The app's build number, e.g. 42.\n",
              "type": "string"
            },
            "app_namespace": {
              "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
              "type": "string"
            },
            "live_update_release_label": {
              "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
              "type": "string"
            },
            "live_update_deployment_key": {
              "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
              "type": "string"
            },
            "live_update_package_hash": {
              "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
              "type": "string"
            },
            "wrapper_runtime_version": {
              "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
              "type": "string"
            }
          }
        },
        "auth_provider": {
          "description": "Auth service provider.\n",
          "type": "string"
        },
        "account_id": {
          "description": "Account ID of the authenticated user.\n",
          "type": "string"
        }
      }
    },
    "Log": {
      "required": [
        "type",
        "timestamp",
        "install_id",
        "device"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Log type.\n",
          "enum": [
            "event",
            "page",
            "start_session",
            "error",
            "push_installation",
            "start_service",
            "custom_properties"
          ],
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Log creation timestamp.\n",
          "type": "string"
        },
        "install_id": {
          "format": "uuid",
          "description": "Install ID.\n",
          "type": "string"
        },
        "device": {
          "description": "Device characteristics.",
          "required": [
            "sdk_name",
            "sdk_version",
            "os_name",
            "os_version",
            "locale",
            "time_zone_offset",
            "app_version",
            "app_build"
          ],
          "type": "object",
          "properties": {
            "sdk_name": {
              "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
              "type": "string"
            },
            "sdk_version": {
              "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
              "type": "string"
            },
            "wrapper_sdk_version": {
              "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
              "type": "string"
            },
            "wrapper_sdk_name": {
              "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
              "type": "string"
            },
            "model": {
              "description": "Device model (example: iPad2,3).\n",
              "type": "string"
            },
            "oem_name": {
              "description": "Device manufacturer (example: HTC).\n",
              "type": "string"
            },
            "os_name": {
              "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
              "type": "string"
            },
            "os_version": {
              "description": "OS version (example: 9.3.0).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "os_api_level": {
              "description": "API level when applicable like in Android (example: 15).\n",
              "type": "integer"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "time_zone_offset": {
              "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
              "maximum": 840,
              "minimum": -840,
              "type": "integer"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_version": {
              "description": "Application version name, e.g. 1.1.0\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "carrier_code": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_country": {
              "description": "Carrier country.\n",
              "type": "string"
            },
            "app_build": {
              "description": "The app's build number, e.g. 42.\n",
              "type": "string"
            },
            "app_namespace": {
              "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
              "type": "string"
            },
            "live_update_release_label": {
              "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
              "type": "string"
            },
            "live_update_deployment_key": {
              "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
              "type": "string"
            },
            "live_update_package_hash": {
              "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
              "type": "string"
            },
            "wrapper_runtime_version": {
              "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "type"
    },
    "LogWithProperties": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "properties": {
          "description": "Additional key/value pair parameters.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Device": {
      "description": "Device characteristics.",
      "required": [
        "sdk_name",
        "sdk_version",
        "os_name",
        "os_version",
        "locale",
        "time_zone_offset",
        "app_version",
        "app_build"
      ],
      "type": "object",
      "properties": {
        "sdk_name": {
          "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
          "type": "string"
        },
        "sdk_version": {
          "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
          "type": "string"
        },
        "wrapper_sdk_version": {
          "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
          "type": "string"
        },
        "wrapper_sdk_name": {
          "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
          "type": "string"
        },
        "model": {
          "description": "Device model (example: iPad2,3).\n",
          "type": "string"
        },
        "oem_name": {
          "description": "Device manufacturer (example: HTC).\n",
          "type": "string"
        },
        "os_name": {
          "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
          "type": "string"
        },
        "os_version": {
          "description": "OS version (example: 9.3.0).\n",
          "type": "string"
        },
        "os_build": {
          "description": "OS build code (example: LMY47X).\n",
          "type": "string"
        },
        "os_api_level": {
          "description": "API level when applicable like in Android (example: 15).\n",
          "type": "integer"
        },
        "locale": {
          "description": "Language code (example: en_US).\n",
          "type": "string"
        },
        "time_zone_offset": {
          "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
          "maximum": 840,
          "minimum": -840,
          "type": "integer"
        },
        "screen_size": {
          "description": "Screen size of the device in pixels (example: 640x480).\n",
          "type": "string"
        },
        "app_version": {
          "description": "Application version name, e.g. 1.1.0\n",
          "type": "string"
        },
        "carrier_name": {
          "description": "Carrier name (for mobile devices).\n",
          "type": "string"
        },
        "carrier_code": {
          "description": "Carrier country code (for mobile devices).\n",
          "type": "string"
        },
        "carrier_country": {
          "description": "Carrier country.\n",
          "type": "string"
        },
        "app_build": {
          "description": "The app's build number, e.g. 42.\n",
          "type": "string"
        },
        "app_namespace": {
          "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
          "type": "string"
        },
        "live_update_release_label": {
          "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
          "type": "string"
        },
        "live_update_deployment_key": {
          "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
          "type": "string"
        },
        "live_update_package_hash": {
          "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
          "type": "string"
        },
        "wrapper_runtime_version": {
          "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
          "type": "string"
        }
      }
    },
    "StartSessionLog": {
      "description": "Required explicit begin session log (a marker event for analytics service).",
      "required": [
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "start_session"
    },
    "DistributionStartSessionLog": {
      "description": "Log is used to update distribution group identifier for session (a marker event for analytics service).",
      "required": [
        "distribution_group_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "distribution_group_id": {
          "format": "uuid",
          "description": "Distribution Group ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "distribution_start_session"
    },
    "HandledErrorLog": {
      "description": "Required explicit begin session log (a marker event for analytics service).",
      "required": [
        "error_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "error_id": {
          "format": "uuid",
          "description": "Error ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "handled_error"
    },
    "UnhandledErrorLog": {
      "description": "Required explicit begin session log (a marker event for analytics service).",
      "required": [
        "error_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "error_id": {
          "format": "uuid",
          "description": "Error ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "unhandled_error"
    },
    "StartServiceLog": {
      "description": "Describe a AppCenter.Start API call from the SDK.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "services": {
          "description": "The list of services of the AppCenter Start API call.",
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "start_service"
    },
    "CustomPropertyLog": {
      "description": "Set or remove custom properties.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "properties": {
          "description": "Custom property changes.",
          "maxItems": 60,
          "minItems": 1,
          "type": "array",
          "items": {
            "required": [
              "type",
              "name"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              }
            },
            "discriminator": "type"
          }
        }
      },
      "x-ms-discriminator-value": "custom_properties"
    },
    "CustomProperty": {
      "required": [
        "type",
        "name"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "maxLength": 128,
          "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "StringProperty": {
      "description": "String property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "String property value.",
          "maxLength": 128,
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "string"
    },
    "NumberProperty": {
      "description": "Number property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "Number property value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "number"
    },
    "BooleanProperty": {
      "description": "Boolean property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "Boolean property value.",
          "type": "boolean"
        }
      },
      "x-ms-discriminator-value": "boolean"
    },
    "DateTimeProperty": {
      "description": "Date and time property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "format": "date-time",
          "description": "Date time property value.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "date_time"
    },
    "ClearProperty": {
      "description": "Clear an existing property.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "x-ms-discriminator-value": "clear"
    },
    "PageLog": {
      "description": "Page view log (as in screens or activities).",
      "required": [
        "name",
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "allOf": [
            {
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Log creation timestamp.\n",
                  "type": "string"
                },
                "install_id": {
                  "format": "uuid",
                  "description": "Install ID.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object",
                  "properties": {
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    }
                  }
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "properties": {
              "description": "Additional key/value pair parameters.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the page.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "page"
    },
    "EventLog": {
      "description": "Event log.",
      "required": [
        "id",
        "name",
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "allOf": [
            {
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Log creation timestamp.\n",
                  "type": "string"
                },
                "install_id": {
                  "format": "uuid",
                  "description": "Install ID.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object",
                  "properties": {
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    }
                  }
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "properties": {
              "description": "Additional key/value pair parameters.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier for this event.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the event.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "event"
    },
    "PushInstallationLog": {
      "description": "Push installation Information.",
      "required": [
        "push_token"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "push_token": {
          "description": "The PNS handle for this installation.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "push_installation"
    },
    "ErrorLog": {
      "description": "Error log.",
      "required": [
        "session_id",
        "id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "Error identifier.",
          "type": "string"
        },
        "app_launch_toffset": {
          "format": "int64",
          "description": "Corresponds to the number of milliseconds elapsed between the time the error occurred and the app was launched.\n",
          "type": "integer"
        }
      },
      "x-ms-discriminator-value": "error"
    },
    "AudienceListResult": {
      "description": "List of audiences.",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "description": "List of audiences.",
          "type": "array",
          "items": {
            "description": "Audience definition.",
            "properties": {
              "name": {
                "description": "Audience name.",
                "type": "string"
              },
              "description": {
                "description": "Audience description.",
                "type": "string"
              },
              "estimated_count": {
                "format": "int64",
                "description": "Estimated audience size.",
                "type": "integer"
              },
              "definition": {
                "description": "Audience definition in OData format.",
                "type": "string"
              },
              "state": {
                "description": "Audience state.",
                "enum": [
                  "Calculating",
                  "Ready",
                  "Disabled"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "AudienceProcessingState"
                }
              }
            }
          }
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "AudienceSummary": {
      "description": "Audience definition.",
      "properties": {
        "name": {
          "description": "Audience name.",
          "type": "string"
        },
        "description": {
          "description": "Audience description.",
          "type": "string"
        },
        "estimated_count": {
          "format": "int64",
          "description": "Estimated audience size.",
          "type": "integer"
        },
        "definition": {
          "description": "Audience definition in OData format.",
          "type": "string"
        },
        "state": {
          "description": "Audience state.",
          "enum": [
            "Calculating",
            "Ready",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AudienceProcessingState"
          }
        }
      }
    },
    "Audience": {
      "description": "Audience with details.",
      "allOf": [
        {
          "description": "Audience definition.",
          "properties": {
            "name": {
              "description": "Audience name.",
              "type": "string"
            },
            "description": {
              "description": "Audience description.",
              "type": "string"
            },
            "estimated_count": {
              "format": "int64",
              "description": "Estimated audience size.",
              "type": "integer"
            },
            "definition": {
              "description": "Audience definition in OData format.",
              "type": "string"
            },
            "state": {
              "description": "Audience state.",
              "enum": [
                "Calculating",
                "Ready",
                "Disabled"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "AudienceProcessingState"
              }
            }
          }
        }
      ],
      "properties": {
        "enabled": {
          "default": true,
          "type": "boolean"
        },
        "custom_properties": {
          "description": "Custom properties used in the definition.",
          "type": "object",
          "additionalProperties": {
            "enum": [
              "string",
              "number",
              "boolean",
              "date_time"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "device_property_type",
              "modelAsString": false
            }
          }
        },
        "estimated_total_count": {
          "format": "int64",
          "description": "Estimated total audience size.",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Date the audience was last refreshed.",
          "type": "string"
        }
      }
    },
    "AudienceTestResult": {
      "description": "Audience test result.",
      "properties": {
        "definition": {
          "description": "Audience definition in OData format.",
          "type": "string"
        },
        "custom_properties": {
          "description": "Custom properties used in the definition.",
          "type": "object",
          "additionalProperties": {
            "enum": [
              "string",
              "number",
              "boolean",
              "date_time"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "device_property_type",
              "modelAsString": false
            }
          }
        },
        "estimated_count": {
          "format": "int64",
          "description": "Estimated audience size.",
          "type": "integer"
        },
        "estimated_total_count": {
          "format": "int64",
          "description": "Estimated total audience size.",
          "type": "integer"
        }
      }
    },
    "TokenQueryResult": {
      "description": "Token query result.",
      "properties": {
        "tokens": {
          "description": "List of tokens.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AudienceDefinition": {
      "description": "Audience definition.",
      "required": [
        "definition"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "Audience description.",
          "maxLength": 128,
          "type": "string"
        },
        "definition": {
          "description": "Audience definition in OData format.",
          "maxLength": 2000,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "type": "boolean"
        },
        "custom_properties": {
          "description": "Custom properties used in the definition.",
          "type": "object",
          "additionalProperties": {
            "enum": [
              "string",
              "number",
              "boolean",
              "date_time"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "device_property_type",
              "modelAsString": false
            }
          }
        }
      }
    },
    "AudienceQueryDefinition": {
      "description": "Audience Query definition.",
      "required": [
        "queryType"
      ],
      "type": "object",
      "properties": {
        "queryType": {
          "description": "Audience Query Type",
          "enum": [
            "broadcast",
            "user_ids",
            "account_ids",
            "install_ids"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "audience_query_type",
            "modelAsString": false
          }
        },
        "identifiers": {
          "description": "List of identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AudienceBlobResult": {
      "description": "Audience definition.",
      "type": "object",
      "properties": {
        "url": {
          "description": "Location of the audience blob.",
          "type": "string"
        }
      }
    },
    "AudienceDevicePropertiesListResult": {
      "description": "List of device properties.",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "description": "List of device properties.",
          "type": "object",
          "additionalProperties": {
            "description": "Type of the property.",
            "enum": [
              "string",
              "number",
              "boolean",
              "date_time"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "device_property_type",
              "modelAsString": false
            }
          }
        }
      }
    },
    "AudienceDevicePropertyValuesListResult": {
      "description": "List of device property values.",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "description": "List of device property values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CrashCounts": {
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "Total crash count.",
          "type": "integer"
        },
        "crashes": {
          "description": "The total crash count for day.",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count of the object.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "ActiveDeviceCounts": {
      "properties": {
        "daily": {
          "description": "The active device count for each interval.",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count of the object.",
                "type": "integer"
              }
            }
          }
        },
        "weekly": {
          "description": "The active device count for each interval with a week's retention.",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count of the object.",
                "type": "integer"
              }
            }
          }
        },
        "monthly": {
          "description": "The active device count for each interval with a month's retention.",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count of the object.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "Places": {
      "description": "Places and count during the time range in descending order.",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "places": {
          "type": "array",
          "items": {
            "description": "The place code and the count.",
            "type": "object",
            "properties": {
              "code": {
                "description": "The place code.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "The count of the this place.",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "The count of previous time range of the place.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "Place": {
      "description": "The place code and the count.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The place code.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "The count of the this place.",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "The count of previous time range of the place.",
          "type": "integer"
        }
      }
    },
    "Error": {
      "description": "Error",
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": {
              "description": "The status code return by the API. It can be 400 or 403 or 500.",
              "enum": [
                400,
                403,
                500
              ],
              "type": "integer"
            },
            "message": {
              "description": "The reason for the request failed.",
              "type": "string"
            }
          }
        }
      }
    },
    "SessionDurationsDistribution": {
      "type": "object",
      "properties": {
        "distribution": {
          "description": "The count of sessions in these buckets.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "bucket": {
                "description": "The bucket name.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "The count of sessions in current bucket.",
                "type": "integer"
              }
            }
          }
        },
        "previous_average_duration": {
          "description": "The previous average session duration for previous time range.",
          "type": "string"
        },
        "average_duration": {
          "description": "The average session duration for current time range.",
          "type": "string"
        }
      }
    },
    "Versions": {
      "properties": {
        "versions": {
          "description": "List of version count.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "version": {
                "description": "Version.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Version count.",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "The count of previous time range of the version.",
                "type": "integer"
              }
            }
          }
        },
        "total": {
          "format": "int64",
          "description": "The total count of versions.",
          "type": "integer"
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "Version count.",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "The count of previous time range of the version.",
          "type": "integer"
        }
      }
    },
    "SessionCounts": {
      "type": "array",
      "items": {
        "properties": {
          "datetime": {
            "description": "The ISO 8601 datetime.",
            "type": "string"
          },
          "count": {
            "format": "int64",
            "description": "Count of the object.",
            "type": "integer"
          }
        }
      }
    },
    "SessionsPerDevice": {
      "type": "object",
      "properties": {
        "average_sessions_per_user": {
          "format": "double",
          "description": "Average seesion per user.",
          "type": "number"
        },
        "previous_average_sessions_per_user": {
          "format": "double",
          "description": "Previous average session per user.",
          "type": "number"
        },
        "total_count": {
          "format": "int64",
          "description": "Total session per device count.",
          "type": "integer"
        },
        "previous_total_count": {
          "format": "int64",
          "description": "Previous total count.",
          "type": "integer"
        },
        "sessions_per_user": {
          "description": "The session count for each interval per device.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "double",
                "description": "Count.",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "AnalyticsModels": {
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "models": {
          "type": "array",
          "items": {
            "properties": {
              "model_name": {
                "description": "Model's name.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count current of model.",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "Count of previous model.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "Model": {
      "properties": {
        "model_name": {
          "description": "Model's name.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "Count current of model.",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "Count of previous model.",
          "type": "integer"
        }
      }
    },
    "Languages": {
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "languages": {
          "type": "array",
          "items": {
            "properties": {
              "language_name": {
                "description": "Language's name.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count current of language.",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "Count of previous lanugage.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "Language": {
      "properties": {
        "language_name": {
          "description": "Language's name.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "Count current of language.",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "Count of previous lanugage.",
          "type": "integer"
        }
      }
    },
    "OSes": {
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "oses": {
          "type": "array",
          "items": {
            "properties": {
              "os_name": {
                "description": "OS name.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count current of OS.",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "Count of previous OS.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "OS": {
      "properties": {
        "os_name": {
          "description": "OS name.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "Count current of OS.",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "Count of previous OS.",
          "type": "integer"
        }
      }
    },
    "DateTimeCounts": {
      "properties": {
        "datetime": {
          "description": "The ISO 8601 datetime.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "Count of the object.",
          "type": "integer"
        }
      }
    },
    "DateTimeDecimalCounts": {
      "properties": {
        "datetime": {
          "description": "The ISO 8601 datetime.",
          "type": "string"
        },
        "count": {
          "format": "double",
          "description": "Decimal count of the object.",
          "type": "number"
        }
      }
    },
    "AvailableVersions": {
      "type": "object",
      "properties": {
        "versions": {
          "description": "List of available versions.",
          "type": "array",
          "items": {
            "format": "string",
            "description": "Version name.",
            "type": "string"
          }
        },
        "total_count": {
          "format": "int64",
          "description": "The full number of versions across all pages.",
          "type": "integer"
        }
      }
    },
    "AvailableAppBuilds": {
      "type": "object",
      "properties": {
        "app_builds": {
          "description": "List of available app builds.",
          "type": "array",
          "items": {
            "format": "string",
            "description": "App Build name.",
            "type": "string"
          }
        }
      }
    },
    "CrashFreeDevicePercentages": {
      "type": "object",
      "properties": {
        "average_percentage": {
          "format": "double",
          "description": "Average percentage.",
          "type": "number"
        },
        "daily_percentages": {
          "description": "The crash-free percentage per day.",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "percentage": {
                "format": "double",
                "description": "Percentage of the object.",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "Module": {
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "Modules": {
      "type": "object",
      "properties": {
        "modules": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "DateTimePercentages": {
      "properties": {
        "datetime": {
          "description": "The ISO 8601 datetime.",
          "type": "string"
        },
        "percentage": {
          "format": "double",
          "description": "Percentage of the object.",
          "type": "number"
        }
      }
    },
    "CrashesOverall": {
      "description": "List of crash groups with overall crashes count and affected users.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "crash_group_id": {
            "format": "string",
            "type": "string"
          },
          "app_version": {
            "format": "string",
            "type": "string"
          },
          "overall": {
            "type": "object",
            "properties": {
              "crash_count": {
                "format": "int64",
                "type": "integer"
              },
              "device_count": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "CrashOverall": {
      "type": "object",
      "properties": {
        "crash_count": {
          "format": "int64",
          "type": "integer"
        },
        "device_count": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "CrashGroupModels": {
      "type": "object",
      "properties": {
        "crash_count": {
          "format": "int64",
          "type": "integer"
        },
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "model_name": {
                "description": "Model's name.",
                "type": "string"
              },
              "crash_count": {
                "format": "int64",
                "description": "Count of model.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "CrashGroupModel": {
      "type": "object",
      "properties": {
        "model_name": {
          "description": "Model's name.",
          "type": "string"
        },
        "crash_count": {
          "format": "int64",
          "description": "Count of model.",
          "type": "integer"
        }
      }
    },
    "CrashGroupOperatingSystems": {
      "type": "object",
      "properties": {
        "crash_count": {
          "format": "int64",
          "type": "integer"
        },
        "operating_systems": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "operating_system_name": {
                "description": "OS name.",
                "type": "string"
              },
              "crash_count": {
                "format": "int64",
                "description": "Count of OS.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "CrashGroupOperatingSystem": {
      "type": "object",
      "properties": {
        "operating_system_name": {
          "description": "OS name.",
          "type": "string"
        },
        "crash_count": {
          "format": "int64",
          "description": "Count of OS.",
          "type": "integer"
        }
      }
    },
    "CrashGroupPlaces": {
      "type": "object",
      "properties": {
        "crash_count": {
          "format": "int64",
          "type": "integer"
        },
        "places": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "place_name": {
                "description": "Place name.",
                "type": "string"
              },
              "crash_count": {
                "format": "int64",
                "description": "Count of places.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "CrashGroupPlace": {
      "type": "object",
      "properties": {
        "place_name": {
          "description": "Place name.",
          "type": "string"
        },
        "crash_count": {
          "format": "int64",
          "description": "Count of places.",
          "type": "integer"
        }
      }
    },
    "CrashGroupLanguages": {
      "type": "object",
      "properties": {
        "crash_count": {
          "format": "int64",
          "type": "integer"
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "language_name": {
                "description": "Language name.",
                "type": "string"
              },
              "crash_count": {
                "format": "int64",
                "description": "Count of languages.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "CrashGroupLanguage": {
      "type": "object",
      "properties": {
        "language_name": {
          "description": "Language name.",
          "type": "string"
        },
        "crash_count": {
          "format": "int64",
          "description": "Count of languages.",
          "type": "integer"
        }
      }
    },
    "CrashGroupCarriers": {
      "type": "object",
      "properties": {
        "crash_count": {
          "format": "int64",
          "type": "integer"
        },
        "carriers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "carrier_name": {
                "description": "Carrier name.",
                "type": "string"
              },
              "crash_count": {
                "format": "int64",
                "description": "Crash count of carrier.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "CrashGroupCarrier": {
      "type": "object",
      "properties": {
        "carrier_name": {
          "description": "Carrier name.",
          "type": "string"
        },
        "crash_count": {
          "format": "int64",
          "description": "Crash count of carrier.",
          "type": "integer"
        }
      }
    },
    "CrashGroupContainer": {
      "required": [
        "crash_groups"
      ],
      "type": "object",
      "properties": {
        "crash_groups": {
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "crash_group_id": {
                "format": "string",
                "type": "string"
              },
              "app_version": {
                "format": "string",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "CrashGroupAndVersion": {
      "type": "object",
      "properties": {
        "crash_group_id": {
          "format": "string",
          "type": "string"
        },
        "app_version": {
          "format": "string",
          "type": "string"
        }
      }
    },
    "Events": {
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "format": "string",
                "type": "string"
              },
              "name": {
                "format": "string",
                "type": "string"
              },
              "device_count": {
                "format": "int64",
                "type": "integer"
              },
              "previous_device_count": {
                "format": "int64",
                "description": "The device count of previous time range of the event.",
                "type": "integer"
              },
              "count": {
                "format": "int64",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "The event count of previous time range of the event.",
                "type": "integer"
              },
              "count_per_device": {
                "format": "double",
                "type": "number"
              },
              "count_per_session": {
                "format": "double",
                "type": "number"
              }
            }
          }
        },
        "total": {
          "format": "int64",
          "description": "The total count of events.",
          "type": "integer"
        },
        "total_devices": {
          "format": "int64",
          "description": "The active device over this period.",
          "type": "integer"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "format": "string",
          "type": "string"
        },
        "name": {
          "format": "string",
          "type": "string"
        },
        "device_count": {
          "format": "int64",
          "type": "integer"
        },
        "previous_device_count": {
          "format": "int64",
          "description": "The device count of previous time range of the event.",
          "type": "integer"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "The event count of previous time range of the event.",
          "type": "integer"
        },
        "count_per_device": {
          "format": "double",
          "type": "number"
        },
        "count_per_session": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "EventCount": {
      "type": "object",
      "properties": {
        "total_count": {
          "format": "int64",
          "type": "integer"
        },
        "previous_total_count": {
          "format": "int64",
          "type": "integer"
        },
        "count": {
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count of the object.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "EventDeviceCount": {
      "type": "object",
      "properties": {
        "total_devices": {
          "format": "int64",
          "type": "integer"
        },
        "total_devices_with_event": {
          "format": "int64",
          "type": "integer"
        },
        "previous_total_devices_with_event": {
          "format": "int64",
          "type": "integer"
        },
        "devices_count": {
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "Count of the object.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "EventCountPerDevice": {
      "type": "object",
      "properties": {
        "avg_count_per_device": {
          "format": "double",
          "type": "number"
        },
        "previous_avg_count_per_device": {
          "format": "double",
          "type": "number"
        },
        "count_per_device": {
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "double",
                "description": "Decimal count of the object.",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "EventCountPerSession": {
      "type": "object",
      "properties": {
        "avg_count_per_session": {
          "format": "double",
          "type": "number"
        },
        "previous_avg_count_per_session": {
          "format": "double",
          "type": "number"
        },
        "count_per_session": {
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "double",
                "description": "Decimal count of the object.",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "EventProperties": {
      "description": "Event properties during the time range.",
      "type": "object",
      "properties": {
        "event_properties": {
          "type": "array",
          "items": {
            "format": "string",
            "description": "The event property.",
            "type": "string"
          }
        }
      }
    },
    "EventPropertyValues": {
      "description": "Event property value counts during the time range in descending order.",
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "description": "The total property value counts.",
          "type": "integer"
        },
        "values": {
          "description": "The event property values.",
          "type": "array",
          "items": {
            "description": "An event property value with counts.",
            "type": "object",
            "properties": {
              "name": {
                "description": "The event property value name.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "The count of the the event property value.",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "The count of previous time range of the event property value.",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "EventPropertyValue": {
      "description": "An event property value with counts.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The event property value name.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "The count of the the event property value.",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "The count of previous time range of the event property value.",
          "type": "integer"
        }
      }
    },
    "NotifyReleasesContainer": {
      "required": [
        "releases"
      ],
      "type": "object",
      "properties": {
        "releases": {
          "minItems": 1,
          "type": "array",
          "items": {
            "allOf": [
              {
                "allOf": [
                  {
                    "required": [
                      "release"
                    ],
                    "type": "object",
                    "properties": {
                      "release": {
                        "format": "string",
                        "description": "Release Id.\n",
                        "type": "string"
                      }
                    }
                  }
                ],
                "properties": {
                  "distribution_group": {
                    "format": "string",
                    "description": "Distribution group Id.\n",
                    "type": "string"
                  }
                }
              }
            ],
            "properties": {
              "user_id": {
                "format": "uuid",
                "description": "Unique user Id.  Will generate a new user Id if not provided.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DeleteReleasesContainer": {
      "required": [
        "releases"
      ],
      "type": "object",
      "properties": {
        "releases": {
          "minItems": 1,
          "type": "array",
          "items": {
            "required": [
              "release"
            ],
            "type": "object",
            "properties": {
              "release": {
                "format": "string",
                "description": "Release Id.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "GetReleasesContainer": {
      "required": [
        "releases"
      ],
      "type": "object",
      "properties": {
        "releases": {
          "minItems": 1,
          "type": "array",
          "items": {
            "allOf": [
              {
                "required": [
                  "release"
                ],
                "type": "object",
                "properties": {
                  "release": {
                    "format": "string",
                    "description": "Release Id.\n",
                    "type": "string"
                  }
                }
              }
            ],
            "properties": {
              "distribution_group": {
                "format": "string",
                "description": "Distribution group Id.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "FilterReleasesContainer": {
      "type": "object",
      "properties": {
        "releases": {
          "type": "array",
          "items": {
            "required": [
              "release"
            ],
            "type": "object",
            "properties": {
              "release": {
                "format": "string",
                "description": "Release Id.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "FilterVersionsContainer": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "required": [
              "version",
              "build"
            ],
            "type": "object",
            "properties": {
              "version": {
                "format": "string",
                "description": "App version.\n",
                "type": "string"
              },
              "build": {
                "format": "string",
                "description": "App build number.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Release": {
      "required": [
        "release"
      ],
      "type": "object",
      "properties": {
        "release": {
          "format": "string",
          "description": "Release Id.\n",
          "type": "string"
        }
      }
    },
    "ReleaseWithDistributionGroup": {
      "allOf": [
        {
          "required": [
            "release"
          ],
          "type": "object",
          "properties": {
            "release": {
              "format": "string",
              "description": "Release Id.\n",
              "type": "string"
            }
          }
        }
      ],
      "properties": {
        "distribution_group": {
          "format": "string",
          "description": "Distribution group Id.\n",
          "type": "string"
        }
      }
    },
    "ReleaseWithDistributionGroupAndUserId": {
      "allOf": [
        {
          "allOf": [
            {
              "required": [
                "release"
              ],
              "type": "object",
              "properties": {
                "release": {
                  "format": "string",
                  "description": "Release Id.\n",
                  "type": "string"
                }
              }
            }
          ],
          "properties": {
            "distribution_group": {
              "format": "string",
              "description": "Distribution group Id.\n",
              "type": "string"
            }
          }
        }
      ],
      "properties": {
        "user_id": {
          "format": "uuid",
          "description": "Unique user Id.  Will generate a new user Id if not provided.\n",
          "type": "string"
        }
      }
    },
    "ReleaseCounts": {
      "required": [
        "counts"
      ],
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "counts": {
          "type": "array",
          "items": {
            "required": [
              "release_id",
              "unique_count",
              "total_count"
            ],
            "type": "object",
            "properties": {
              "release_id": {
                "format": "string",
                "type": "string"
              },
              "distribution_group": {
                "format": "string",
                "description": "Distribution group queried.\n",
                "type": "string"
              },
              "unique_count": {
                "format": "int64",
                "description": "Count of unique downloads against user id.\n",
                "type": "integer"
              },
              "total_count": {
                "format": "int64",
                "description": "Total count of downloads.\n",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "ReleaseDailySessions": {
      "type": "object",
      "properties": {
        "totalSessionCounts": {
          "format": "int64",
          "type": "integer"
        },
        "avgSessionsPerDay": {
          "format": "double",
          "type": "number"
        },
        "sessions": {
          "description": "Sessions per day.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "DailySession": {
      "type": "object",
      "properties": {
        "datetime": {
          "description": "The ISO 8601 datetime.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "DateTimeDownloadReleaseCounts": {
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "unique": {
          "format": "int64",
          "type": "integer"
        },
        "counts": {
          "description": "Release counts per day.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "datetime": {
                "description": "The ISO 8601 datetime.",
                "type": "string"
              },
              "total": {
                "format": "int64",
                "type": "integer"
              },
              "unique": {
                "format": "int64",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "DateTimeDownloadReleaseCount": {
      "type": "object",
      "properties": {
        "datetime": {
          "description": "The ISO 8601 datetime.",
          "type": "string"
        },
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "unique": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ReleaseCount": {
      "required": [
        "release_id",
        "unique_count",
        "total_count"
      ],
      "type": "object",
      "properties": {
        "release_id": {
          "format": "string",
          "type": "string"
        },
        "distribution_group": {
          "format": "string",
          "description": "Distribution group queried.\n",
          "type": "string"
        },
        "unique_count": {
          "format": "int64",
          "description": "Count of unique downloads against user id.\n",
          "type": "integer"
        },
        "total_count": {
          "format": "int64",
          "description": "Total count of downloads.\n",
          "type": "integer"
        }
      }
    },
    "LogFlowLogContainer": {
      "required": [
        "logs"
      ],
      "type": "object",
      "properties": {
        "exceeded_max_limit": {
          "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
          "type": "boolean"
        },
        "last_received_log_timestamp": {
          "format": "date-time",
          "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
          "type": "string"
        },
        "logs": {
          "description": "the list of logs",
          "minItems": 0,
          "type": "array",
          "items": {
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object",
            "properties": {
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "description": "Log creation timestamp.\n",
                "type": "string"
              },
              "install_id": {
                "format": "uuid",
                "description": "Install ID.\n",
                "type": "string"
              },
              "device": {
                "description": "Device characteristics.",
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object",
                "properties": {
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  }
                }
              }
            },
            "discriminator": "type"
          }
        }
      }
    },
    "LogFlowGenericLogContainer": {
      "required": [
        "logs"
      ],
      "type": "object",
      "properties": {
        "exceeded_max_limit": {
          "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
          "type": "boolean"
        },
        "last_received_log_timestamp": {
          "format": "date-time",
          "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
          "type": "string"
        },
        "logs": {
          "description": "the list of logs",
          "minItems": 0,
          "type": "array",
          "items": {
            "description": "Generic log.",
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object",
            "properties": {
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "description": "Log creation timestamp.\n",
                "type": "string"
              },
              "install_id": {
                "format": "uuid",
                "description": "Install ID.\n",
                "type": "string"
              },
              "session_id": {
                "format": "uuid",
                "description": "Session ID.\n",
                "type": "string"
              },
              "event_id": {
                "description": "Event ID.\n",
                "type": "string"
              },
              "event_name": {
                "description": "Event name.\n",
                "type": "string"
              },
              "message_id": {
                "description": "Message ID.\n",
                "type": "string"
              },
              "properties": {
                "description": "event specific properties.\n",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "device": {
                "description": "Device characteristics.",
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object",
                "properties": {
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  }
                }
              },
              "auth_provider": {
                "description": "Auth service provider.\n",
                "type": "string"
              },
              "account_id": {
                "description": "Account ID of the authenticated user.\n",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "LogFlowGenericLog": {
      "description": "Generic log.",
      "required": [
        "type",
        "timestamp",
        "install_id",
        "device"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Log type.\n",
          "enum": [
            "event",
            "page",
            "start_session",
            "error",
            "push_installation",
            "start_service",
            "custom_properties"
          ],
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Log creation timestamp.\n",
          "type": "string"
        },
        "install_id": {
          "format": "uuid",
          "description": "Install ID.\n",
          "type": "string"
        },
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "event_id": {
          "description": "Event ID.\n",
          "type": "string"
        },
        "event_name": {
          "description": "Event name.\n",
          "type": "string"
        },
        "message_id": {
          "description": "Message ID.\n",
          "type": "string"
        },
        "properties": {
          "description": "event specific properties.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device": {
          "description": "Device characteristics.",
          "required": [
            "sdk_name",
            "sdk_version",
            "os_name",
            "os_version",
            "locale",
            "time_zone_offset",
            "app_version",
            "app_build"
          ],
          "type": "object",
          "properties": {
            "sdk_name": {
              "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
              "type": "string"
            },
            "sdk_version": {
              "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
              "type": "string"
            },
            "wrapper_sdk_version": {
              "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
              "type": "string"
            },
            "wrapper_sdk_name": {
              "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
              "type": "string"
            },
            "model": {
              "description": "Device model (example: iPad2,3).\n",
              "type": "string"
            },
            "oem_name": {
              "description": "Device manufacturer (example: HTC).\n",
              "type": "string"
            },
            "os_name": {
              "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
              "type": "string"
            },
            "os_version": {
              "description": "OS version (example: 9.3.0).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "os_api_level": {
              "description": "API level when applicable like in Android (example: 15).\n",
              "type": "integer"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "time_zone_offset": {
              "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
              "maximum": 840,
              "minimum": -840,
              "type": "integer"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_version": {
              "description": "Application version name, e.g. 1.1.0\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "carrier_code": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_country": {
              "description": "Carrier country.\n",
              "type": "string"
            },
            "app_build": {
              "description": "The app's build number, e.g. 42.\n",
              "type": "string"
            },
            "app_namespace": {
              "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
              "type": "string"
            },
            "live_update_release_label": {
              "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
              "type": "string"
            },
            "live_update_deployment_key": {
              "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
              "type": "string"
            },
            "live_update_package_hash": {
              "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
              "type": "string"
            },
            "wrapper_runtime_version": {
              "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
              "type": "string"
            }
          }
        },
        "auth_provider": {
          "description": "Auth service provider.\n",
          "type": "string"
        },
        "account_id": {
          "description": "Account ID of the authenticated user.\n",
          "type": "string"
        }
      }
    },
    "LogFlowLog": {
      "required": [
        "type",
        "timestamp",
        "install_id",
        "device"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Log type.\n",
          "enum": [
            "event",
            "page",
            "start_session",
            "error",
            "push_installation",
            "start_service",
            "custom_properties"
          ],
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Log creation timestamp.\n",
          "type": "string"
        },
        "install_id": {
          "format": "uuid",
          "description": "Install ID.\n",
          "type": "string"
        },
        "device": {
          "description": "Device characteristics.",
          "required": [
            "sdk_name",
            "sdk_version",
            "os_name",
            "os_version",
            "locale",
            "time_zone_offset",
            "app_version",
            "app_build"
          ],
          "type": "object",
          "properties": {
            "sdk_name": {
              "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
              "type": "string"
            },
            "sdk_version": {
              "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
              "type": "string"
            },
            "wrapper_sdk_version": {
              "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
              "type": "string"
            },
            "wrapper_sdk_name": {
              "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
              "type": "string"
            },
            "model": {
              "description": "Device model (example: iPad2,3).\n",
              "type": "string"
            },
            "oem_name": {
              "description": "Device manufacturer (example: HTC).\n",
              "type": "string"
            },
            "os_name": {
              "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
              "type": "string"
            },
            "os_version": {
              "description": "OS version (example: 9.3.0).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "os_api_level": {
              "description": "API level when applicable like in Android (example: 15).\n",
              "type": "integer"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "time_zone_offset": {
              "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
              "maximum": 840,
              "minimum": -840,
              "type": "integer"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_version": {
              "description": "Application version name, e.g. 1.1.0\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "carrier_code": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_country": {
              "description": "Carrier country.\n",
              "type": "string"
            },
            "app_build": {
              "description": "The app's build number, e.g. 42.\n",
              "type": "string"
            },
            "app_namespace": {
              "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
              "type": "string"
            },
            "live_update_release_label": {
              "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
              "type": "string"
            },
            "live_update_deployment_key": {
              "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
              "type": "string"
            },
            "live_update_package_hash": {
              "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
              "type": "string"
            },
            "wrapper_runtime_version": {
              "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "type"
    },
    "LogFlowLogWithProperties": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "properties": {
          "description": "Additional key/value pair parameters.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LogFlowDevice": {
      "description": "Device characteristics.",
      "required": [
        "sdk_name",
        "sdk_version",
        "os_name",
        "os_version",
        "locale",
        "time_zone_offset",
        "app_version",
        "app_build"
      ],
      "type": "object",
      "properties": {
        "sdk_name": {
          "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
          "type": "string"
        },
        "sdk_version": {
          "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
          "type": "string"
        },
        "wrapper_sdk_version": {
          "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
          "type": "string"
        },
        "wrapper_sdk_name": {
          "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
          "type": "string"
        },
        "model": {
          "description": "Device model (example: iPad2,3).\n",
          "type": "string"
        },
        "oem_name": {
          "description": "Device manufacturer (example: HTC).\n",
          "type": "string"
        },
        "os_name": {
          "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
          "type": "string"
        },
        "os_version": {
          "description": "OS version (example: 9.3.0).\n",
          "type": "string"
        },
        "os_build": {
          "description": "OS build code (example: LMY47X).\n",
          "type": "string"
        },
        "os_api_level": {
          "description": "API level when applicable like in Android (example: 15).\n",
          "type": "integer"
        },
        "locale": {
          "description": "Language code (example: en_US).\n",
          "type": "string"
        },
        "time_zone_offset": {
          "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
          "maximum": 840,
          "minimum": -840,
          "type": "integer"
        },
        "screen_size": {
          "description": "Screen size of the device in pixels (example: 640x480).\n",
          "type": "string"
        },
        "app_version": {
          "description": "Application version name, e.g. 1.1.0\n",
          "type": "string"
        },
        "carrier_name": {
          "description": "Carrier name (for mobile devices).\n",
          "type": "string"
        },
        "carrier_code": {
          "description": "Carrier country code (for mobile devices).\n",
          "type": "string"
        },
        "carrier_country": {
          "description": "Carrier country.\n",
          "type": "string"
        },
        "app_build": {
          "description": "The app's build number, e.g. 42.\n",
          "type": "string"
        },
        "app_namespace": {
          "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
          "type": "string"
        },
        "live_update_release_label": {
          "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
          "type": "string"
        },
        "live_update_deployment_key": {
          "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
          "type": "string"
        },
        "live_update_package_hash": {
          "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
          "type": "string"
        },
        "wrapper_runtime_version": {
          "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
          "type": "string"
        }
      }
    },
    "LogFlowStartSessionLog": {
      "description": "Required explicit begin session log (a marker event for analytics service).",
      "required": [
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "start_session"
    },
    "LogFlowStartServiceLog": {
      "description": "Describe a AppCenter.Start API call from the SDK.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "services": {
          "description": "The list of services of the AppCenter Start API call.",
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "start_service"
    },
    "LogFlowCustomPropertyLog": {
      "description": "Set or remove custom properties.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "properties": {
          "description": "Custom property changes.",
          "maxItems": 60,
          "minItems": 1,
          "type": "array",
          "items": {
            "required": [
              "type",
              "name"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              }
            },
            "discriminator": "type"
          }
        }
      },
      "x-ms-discriminator-value": "custom_properties"
    },
    "LogFlowCustomProperty": {
      "required": [
        "type",
        "name"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "maxLength": 128,
          "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "LogFlowStringProperty": {
      "description": "String property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "String property value.",
          "maxLength": 128,
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "string"
    },
    "LogFlowNumberProperty": {
      "description": "Number property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "Number property value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "number"
    },
    "LogFlowBooleanProperty": {
      "description": "Boolean property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "Boolean property value.",
          "type": "boolean"
        }
      },
      "x-ms-discriminator-value": "boolean"
    },
    "LogFlowDateTimeProperty": {
      "description": "Date and time property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "format": "date-time",
          "description": "Date time property value.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "date_time"
    },
    "LogFlowClearProperty": {
      "description": "Clear an existing property.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "x-ms-discriminator-value": "clear"
    },
    "LogFlowPageLog": {
      "description": "Page view log (as in screens or activities).",
      "required": [
        "name",
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "allOf": [
            {
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Log creation timestamp.\n",
                  "type": "string"
                },
                "install_id": {
                  "format": "uuid",
                  "description": "Install ID.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object",
                  "properties": {
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    }
                  }
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "properties": {
              "description": "Additional key/value pair parameters.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the page.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "page"
    },
    "LogFlowEventLog": {
      "description": "Event log.",
      "required": [
        "id",
        "name",
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "allOf": [
            {
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Log creation timestamp.\n",
                  "type": "string"
                },
                "install_id": {
                  "format": "uuid",
                  "description": "Install ID.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object",
                  "properties": {
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    }
                  }
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "properties": {
              "description": "Additional key/value pair parameters.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier for this event.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the event.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "event"
    },
    "LogFlowPushInstallationLog": {
      "description": "Push installation Information.",
      "required": [
        "push_token"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "push_token": {
          "description": "The PNS handle for this installation.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "push_installation"
    },
    "LogFlowErrorLog": {
      "description": "Error log.",
      "required": [
        "session_id",
        "id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "Error identifier.",
          "type": "string"
        },
        "app_launch_toffset": {
          "format": "int64",
          "description": "Corresponds to the number of milliseconds elapsed between the time the error occurred and the app was launched.\n",
          "type": "integer"
        }
      },
      "x-ms-discriminator-value": "error"
    },
    "ErrorGroups": {
      "type": "object",
      "properties": {
        "nextLink": {
          "type": "string"
        },
        "errorGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "required": [
                  "errorGroupId",
                  "appVersion",
                  "state",
                  "count",
                  "deviceCount",
                  "firstOccurrence",
                  "lastOccurrence"
                ],
                "type": "object",
                "allOf": [
                  {
                    "required": [
                      "state"
                    ],
                    "type": "object",
                    "properties": {
                      "state": {
                        "enum": [
                          "open",
                          "closed",
                          "ignored"
                        ],
                        "type": "string"
                      },
                      "annotation": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "properties": {
                  "errorGroupId": {
                    "type": "string"
                  },
                  "appVersion": {
                    "type": "string"
                  },
                  "appBuild": {
                    "type": "string"
                  },
                  "count": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "deviceCount": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "firstOccurrence": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "lastOccurrence": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "exceptionType": {
                    "type": "string"
                  },
                  "exceptionMessage": {
                    "type": "string"
                  },
                  "exceptionClassName": {
                    "type": "string"
                  },
                  "exceptionClassMethod": {
                    "type": "boolean"
                  },
                  "exceptionMethod": {
                    "type": "string"
                  },
                  "exceptionAppCode": {
                    "type": "boolean"
                  },
                  "exceptionFile": {
                    "type": "string"
                  },
                  "exceptionLine": {
                    "type": "string"
                  },
                  "codeRaw": {
                    "type": "string"
                  },
                  "reasonFrames": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "className": {
                          "description": "name of the class",
                          "type": "string"
                        },
                        "method": {
                          "description": "name of the method",
                          "type": "string"
                        },
                        "classMethod": {
                          "description": "is a class method",
                          "type": "boolean"
                        },
                        "file": {
                          "description": "name of the file",
                          "type": "string"
                        },
                        "line": {
                          "description": "line number",
                          "type": "integer"
                        },
                        "appCode": {
                          "description": "this line isn't from any framework",
                          "type": "boolean"
                        },
                        "frameworkName": {
                          "description": "Name of the framework",
                          "type": "string"
                        },
                        "codeFormatted": {
                          "description": "Formatted frame string",
                          "type": "string"
                        },
                        "codeRaw": {
                          "description": "Unformatted Frame string",
                          "type": "string"
                        },
                        "language": {
                          "description": "programming language of the frame",
                          "enum": [
                            "JavaScript",
                            "CSharp",
                            "Objective-C",
                            "Objective-Cpp",
                            "Cpp",
                            "C",
                            "Swift",
                            "Java",
                            "Unknown"
                          ],
                          "type": "string"
                        },
                        "methodParams": {
                          "description": "parameters of the frames method",
                          "type": "string"
                        },
                        "exceptionType": {
                          "description": "Exception type.",
                          "type": "string"
                        },
                        "osExceptionType": {
                          "description": "OS exception type. (aka. SIGNAL)",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "hidden": {
                    "type": "boolean"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "ErrorGroupsSearchResult": {
      "type": "object",
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "errorGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "required": [
                  "errorGroupId",
                  "appVersion",
                  "state",
                  "count",
                  "deviceCount",
                  "firstOccurrence",
                  "lastOccurrence"
                ],
                "type": "object",
                "allOf": [
                  {
                    "required": [
                      "state"
                    ],
                    "type": "object",
                    "properties": {
                      "state": {
                        "enum": [
                          "open",
                          "closed",
                          "ignored"
                        ],
                        "type": "string"
                      },
                      "annotation": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "properties": {
                  "errorGroupId": {
                    "type": "string"
                  },
                  "appVersion": {
                    "type": "string"
                  },
                  "appBuild": {
                    "type": "string"
                  },
                  "count": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "deviceCount": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "firstOccurrence": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "lastOccurrence": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "exceptionType": {
                    "type": "string"
                  },
                  "exceptionMessage": {
                    "type": "string"
                  },
                  "exceptionClassName": {
                    "type": "string"
                  },
                  "exceptionClassMethod": {
                    "type": "boolean"
                  },
                  "exceptionMethod": {
                    "type": "string"
                  },
                  "exceptionAppCode": {
                    "type": "boolean"
                  },
                  "exceptionFile": {
                    "type": "string"
                  },
                  "exceptionLine": {
                    "type": "string"
                  },
                  "codeRaw": {
                    "type": "string"
                  },
                  "reasonFrames": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "className": {
                          "description": "name of the class",
                          "type": "string"
                        },
                        "method": {
                          "description": "name of the method",
                          "type": "string"
                        },
                        "classMethod": {
                          "description": "is a class method",
                          "type": "boolean"
                        },
                        "file": {
                          "description": "name of the file",
                          "type": "string"
                        },
                        "line": {
                          "description": "line number",
                          "type": "integer"
                        },
                        "appCode": {
                          "description": "this line isn't from any framework",
                          "type": "boolean"
                        },
                        "frameworkName": {
                          "description": "Name of the framework",
                          "type": "string"
                        },
                        "codeFormatted": {
                          "description": "Formatted frame string",
                          "type": "string"
                        },
                        "codeRaw": {
                          "description": "Unformatted Frame string",
                          "type": "string"
                        },
                        "language": {
                          "description": "programming language of the frame",
                          "enum": [
                            "JavaScript",
                            "CSharp",
                            "Objective-C",
                            "Objective-Cpp",
                            "Cpp",
                            "C",
                            "Swift",
                            "Java",
                            "Unknown"
                          ],
                          "type": "string"
                        },
                        "methodParams": {
                          "description": "parameters of the frames method",
                          "type": "string"
                        },
                        "exceptionType": {
                          "description": "Exception type.",
                          "type": "string"
                        },
                        "osExceptionType": {
                          "description": "OS exception type. (aka. SIGNAL)",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "hidden": {
                    "type": "boolean"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "ErrorCounts": {
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "description": "total error count",
          "type": "integer"
        },
        "errors": {
          "description": "the total error count for day",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "the ISO 8601 datetime",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "count of the object",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "ErrorGroupListItem": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "errorGroupId",
            "appVersion",
            "state",
            "count",
            "deviceCount",
            "firstOccurrence",
            "lastOccurrence"
          ],
          "type": "object",
          "allOf": [
            {
              "required": [
                "state"
              ],
              "type": "object",
              "properties": {
                "state": {
                  "enum": [
                    "open",
                    "closed",
                    "ignored"
                  ],
                  "type": "string"
                },
                "annotation": {
                  "type": "string"
                }
              }
            }
          ],
          "properties": {
            "errorGroupId": {
              "type": "string"
            },
            "appVersion": {
              "type": "string"
            },
            "appBuild": {
              "type": "string"
            },
            "count": {
              "format": "int64",
              "type": "integer"
            },
            "deviceCount": {
              "format": "int64",
              "type": "integer"
            },
            "firstOccurrence": {
              "format": "date-time",
              "type": "string"
            },
            "lastOccurrence": {
              "format": "date-time",
              "type": "string"
            },
            "exceptionType": {
              "type": "string"
            },
            "exceptionMessage": {
              "type": "string"
            },
            "exceptionClassName": {
              "type": "string"
            },
            "exceptionClassMethod": {
              "type": "boolean"
            },
            "exceptionMethod": {
              "type": "string"
            },
            "exceptionAppCode": {
              "type": "boolean"
            },
            "exceptionFile": {
              "type": "string"
            },
            "exceptionLine": {
              "type": "string"
            },
            "codeRaw": {
              "type": "string"
            },
            "reasonFrames": {
              "type": "array",
              "items": {
                "properties": {
                  "className": {
                    "description": "name of the class",
                    "type": "string"
                  },
                  "method": {
                    "description": "name of the method",
                    "type": "string"
                  },
                  "classMethod": {
                    "description": "is a class method",
                    "type": "boolean"
                  },
                  "file": {
                    "description": "name of the file",
                    "type": "string"
                  },
                  "line": {
                    "description": "line number",
                    "type": "integer"
                  },
                  "appCode": {
                    "description": "this line isn't from any framework",
                    "type": "boolean"
                  },
                  "frameworkName": {
                    "description": "Name of the framework",
                    "type": "string"
                  },
                  "codeFormatted": {
                    "description": "Formatted frame string",
                    "type": "string"
                  },
                  "codeRaw": {
                    "description": "Unformatted Frame string",
                    "type": "string"
                  },
                  "language": {
                    "description": "programming language of the frame",
                    "enum": [
                      "JavaScript",
                      "CSharp",
                      "Objective-C",
                      "Objective-Cpp",
                      "Cpp",
                      "C",
                      "Swift",
                      "Java",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "methodParams": {
                    "description": "parameters of the frames method",
                    "type": "string"
                  },
                  "exceptionType": {
                    "description": "Exception type.",
                    "type": "string"
                  },
                  "osExceptionType": {
                    "description": "OS exception type. (aka. SIGNAL)",
                    "type": "string"
                  }
                }
              }
            },
            "hidden": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ErrorGroup": {
      "required": [
        "errorGroupId",
        "appVersion",
        "state",
        "count",
        "deviceCount",
        "firstOccurrence",
        "lastOccurrence"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "state"
          ],
          "type": "object",
          "properties": {
            "state": {
              "enum": [
                "open",
                "closed",
                "ignored"
              ],
              "type": "string"
            },
            "annotation": {
              "type": "string"
            }
          }
        }
      ],
      "properties": {
        "errorGroupId": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "appBuild": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "deviceCount": {
          "format": "int64",
          "type": "integer"
        },
        "firstOccurrence": {
          "format": "date-time",
          "type": "string"
        },
        "lastOccurrence": {
          "format": "date-time",
          "type": "string"
        },
        "exceptionType": {
          "type": "string"
        },
        "exceptionMessage": {
          "type": "string"
        },
        "exceptionClassName": {
          "type": "string"
        },
        "exceptionClassMethod": {
          "type": "boolean"
        },
        "exceptionMethod": {
          "type": "string"
        },
        "exceptionAppCode": {
          "type": "boolean"
        },
        "exceptionFile": {
          "type": "string"
        },
        "exceptionLine": {
          "type": "string"
        },
        "codeRaw": {
          "type": "string"
        },
        "reasonFrames": {
          "type": "array",
          "items": {
            "properties": {
              "className": {
                "description": "name of the class",
                "type": "string"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "classMethod": {
                "description": "is a class method",
                "type": "boolean"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "appCode": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "frameworkName": {
                "description": "Name of the framework",
                "type": "string"
              },
              "codeFormatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "codeRaw": {
                "description": "Unformatted Frame string",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "methodParams": {
                "description": "parameters of the frames method",
                "type": "string"
              },
              "exceptionType": {
                "description": "Exception type.",
                "type": "string"
              },
              "osExceptionType": {
                "description": "OS exception type. (aka. SIGNAL)",
                "type": "string"
              }
            }
          }
        },
        "hidden": {
          "type": "boolean"
        }
      }
    },
    "ErrorDateTimePercentages": {
      "properties": {
        "datetime": {
          "description": "the ISO 8601 datetime",
          "type": "string"
        },
        "percentage": {
          "format": "double",
          "description": "percentage of the object",
          "type": "number"
        }
      }
    },
    "ErrorDateTimeCounts": {
      "properties": {
        "datetime": {
          "description": "the ISO 8601 datetime",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "count of the object",
          "type": "integer"
        }
      }
    },
    "ErrorGroupState": {
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "open",
            "closed",
            "ignored"
          ],
          "type": "string"
        },
        "annotation": {
          "type": "string"
        }
      }
    },
    "ErrorDownload": {
      "format": "file",
      "type": "object"
    },
    "ErrorDownloadLink": {
      "required": [
        "link"
      ],
      "type": "object",
      "properties": {
        "link": {
          "type": "string"
        }
      }
    },
    "DiagnosticsException": {
      "description": "a exception",
      "required": [
        "frames"
      ],
      "type": "object",
      "properties": {
        "reason": {
          "description": "Reason of the exception",
          "type": "string"
        },
        "type": {
          "description": "Type of the exception (NSSomethingException, NullPointerException)",
          "type": "string"
        },
        "frames": {
          "description": "frames of the excetpion",
          "type": "array",
          "items": {
            "description": "a single frame of a stack trace",
            "required": [
              "code_raw",
              "code_formatted",
              "app_code"
            ],
            "type": "object",
            "properties": {
              "address": {
                "description": "address of the frame",
                "type": "string"
              },
              "class_name": {
                "description": "name of the class",
                "type": "string"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "class_method": {
                "description": "is a class method",
                "type": "boolean"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "app_code": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "framework_name": {
                "description": "Name of the framework",
                "type": "string"
              },
              "code_raw": {
                "description": "Raw frame string",
                "type": "string"
              },
              "code_formatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "relevant": {
                "description": "frame should be shown always",
                "type": "boolean"
              },
              "method_params": {
                "description": "parameters of the frames method",
                "type": "string"
              }
            }
          }
        },
        "relevant": {
          "description": "relevant exception (crashed)",
          "type": "boolean"
        },
        "inner_exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticsException"
          }
        },
        "platform": {
          "description": "SDK/Platform this thread is beeing generated from",
          "enum": [
            "ios",
            "android",
            "xamarin",
            "react-native",
            "ndk",
            "unity",
            "other"
          ],
          "type": "string"
        }
      }
    },
    "DiagnosticsStackTrace": {
      "description": "a stacktrace in a processed and prettyfied way",
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "threads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticsThread"
          }
        },
        "exception": {
          "$ref": "#/definitions/DiagnosticsException"
        }
      }
    },
    "DiagnosticsThread": {
      "description": "a thread representation",
      "required": [
        "title",
        "frames"
      ],
      "type": "object",
      "properties": {
        "title": {
          "description": "name of the thread",
          "type": "string"
        },
        "frames": {
          "description": "frames of that thread",
          "type": "array",
          "items": {
            "description": "a single frame of a stack trace",
            "required": [
              "code_raw",
              "code_formatted",
              "app_code"
            ],
            "type": "object",
            "properties": {
              "address": {
                "description": "address of the frame",
                "type": "string"
              },
              "class_name": {
                "description": "name of the class",
                "type": "string"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "class_method": {
                "description": "is a class method",
                "type": "boolean"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "app_code": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "framework_name": {
                "description": "Name of the framework",
                "type": "string"
              },
              "code_raw": {
                "description": "Raw frame string",
                "type": "string"
              },
              "code_formatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "relevant": {
                "description": "frame should be shown always",
                "type": "boolean"
              },
              "method_params": {
                "description": "parameters of the frames method",
                "type": "string"
              }
            }
          }
        },
        "exception": {
          "$ref": "#/definitions/DiagnosticsException"
        },
        "relevant": {
          "description": "Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true",
          "type": "boolean"
        },
        "platform": {
          "description": "SDK/Platform this thread is beeing generated from",
          "enum": [
            "ios",
            "android",
            "xamarin",
            "react-native",
            "ndk",
            "unity",
            "other"
          ],
          "type": "string"
        },
        "crashed": {
          "description": "True if this thread crashed",
          "type": "boolean"
        }
      }
    },
    "DiagnosticsStackFrame": {
      "description": "a single frame of a stack trace",
      "required": [
        "code_raw",
        "code_formatted",
        "app_code"
      ],
      "type": "object",
      "properties": {
        "address": {
          "description": "address of the frame",
          "type": "string"
        },
        "class_name": {
          "description": "name of the class",
          "type": "string"
        },
        "method": {
          "description": "name of the method",
          "type": "string"
        },
        "class_method": {
          "description": "is a class method",
          "type": "boolean"
        },
        "file": {
          "description": "name of the file",
          "type": "string"
        },
        "line": {
          "description": "line number",
          "type": "integer"
        },
        "app_code": {
          "description": "this line isn't from any framework",
          "type": "boolean"
        },
        "framework_name": {
          "description": "Name of the framework",
          "type": "string"
        },
        "code_raw": {
          "description": "Raw frame string",
          "type": "string"
        },
        "code_formatted": {
          "description": "Formatted frame string",
          "type": "string"
        },
        "language": {
          "description": "programming language of the frame",
          "enum": [
            "JavaScript",
            "CSharp",
            "Objective-C",
            "Objective-Cpp",
            "Cpp",
            "C",
            "Swift",
            "Java",
            "Unknown"
          ],
          "type": "string"
        },
        "relevant": {
          "description": "frame should be shown always",
          "type": "boolean"
        },
        "method_params": {
          "description": "parameters of the frames method",
          "type": "string"
        }
      }
    },
    "HandledErrorReasonFrame": {
      "properties": {
        "className": {
          "description": "name of the class",
          "type": "string"
        },
        "method": {
          "description": "name of the method",
          "type": "string"
        },
        "classMethod": {
          "description": "is a class method",
          "type": "boolean"
        },
        "file": {
          "description": "name of the file",
          "type": "string"
        },
        "line": {
          "description": "line number",
          "type": "integer"
        },
        "appCode": {
          "description": "this line isn't from any framework",
          "type": "boolean"
        },
        "frameworkName": {
          "description": "Name of the framework",
          "type": "string"
        },
        "codeFormatted": {
          "description": "Formatted frame string",
          "type": "string"
        },
        "codeRaw": {
          "description": "Unformatted Frame string",
          "type": "string"
        },
        "language": {
          "description": "programming language of the frame",
          "enum": [
            "JavaScript",
            "CSharp",
            "Objective-C",
            "Objective-Cpp",
            "Cpp",
            "C",
            "Swift",
            "Java",
            "Unknown"
          ],
          "type": "string"
        },
        "methodParams": {
          "description": "parameters of the frames method",
          "type": "string"
        },
        "exceptionType": {
          "description": "Exception type.",
          "type": "string"
        },
        "osExceptionType": {
          "description": "OS exception type. (aka. SIGNAL)",
          "type": "string"
        }
      }
    },
    "ErrorFreeDevicePercentages": {
      "type": "object",
      "properties": {
        "averagePercentage": {
          "format": "double",
          "description": "Average percentage",
          "type": "number"
        },
        "dailyPercentages": {
          "description": "The error-free percentage per day.",
          "type": "array",
          "items": {
            "properties": {
              "datetime": {
                "description": "the ISO 8601 datetime",
                "type": "string"
              },
              "percentage": {
                "format": "double",
                "description": "percentage of the object",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "HandledErrors": {
      "type": "object",
      "properties": {
        "nextLink": {
          "type": "string"
        },
        "errors": {
          "description": "Errors list.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "errorId": {
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "type": "string"
              },
              "deviceName": {
                "type": "string"
              },
              "osVersion": {
                "type": "string"
              },
              "osType": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "hasBreadcrumbs": {
                "type": "boolean"
              },
              "hasAttachments": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "ErrorsSearchResult": {
      "type": "object",
      "properties": {
        "hasMoreResults": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "errorId": {
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "type": "string"
              },
              "deviceName": {
                "type": "string"
              },
              "osVersion": {
                "type": "string"
              },
              "osType": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "hasBreadcrumbs": {
                "type": "boolean"
              },
              "hasAttachments": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "HandledError": {
      "type": "object",
      "properties": {
        "errorId": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "deviceName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "osType": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "hasBreadcrumbs": {
          "type": "boolean"
        },
        "hasAttachments": {
          "type": "boolean"
        }
      }
    },
    "HandledErrorDetails": {
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "errorId": {
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "type": "string"
            },
            "deviceName": {
              "type": "string"
            },
            "osVersion": {
              "type": "string"
            },
            "osType": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "language": {
              "type": "string"
            },
            "userId": {
              "type": "string"
            },
            "hasBreadcrumbs": {
              "type": "boolean"
            },
            "hasAttachments": {
              "type": "boolean"
            }
          }
        }
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "reasonFrames": {
          "type": "array",
          "items": {
            "properties": {
              "className": {
                "description": "name of the class",
                "type": "string"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "classMethod": {
                "description": "is a class method",
                "type": "boolean"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "appCode": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "frameworkName": {
                "description": "Name of the framework",
                "type": "string"
              },
              "codeFormatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "codeRaw": {
                "description": "Unformatted Frame string",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "methodParams": {
                "description": "parameters of the frames method",
                "type": "string"
              },
              "exceptionType": {
                "description": "Exception type.",
                "type": "string"
              },
              "osExceptionType": {
                "description": "OS exception type. (aka. SIGNAL)",
                "type": "string"
              }
            }
          }
        },
        "appLaunchTimestamp": {
          "format": "date-time",
          "description": "Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.\n",
          "type": "string"
        },
        "carrierName": {
          "description": "Carrier name (for mobile devices).\n",
          "type": "string"
        },
        "jailbreak": {
          "description": "Flag indicating if device is jailbroken\n",
          "type": "boolean"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ErrorDeleteCounter": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "errorGroupId": {
          "type": "string"
        },
        "errorId": {
          "type": "string"
        },
        "errorsDeleted": {
          "type": "integer"
        },
        "attachmentsDeleted": {
          "type": "integer"
        },
        "blobsSucceeded": {
          "type": "integer"
        },
        "blobsFailed": {
          "type": "integer"
        }
      }
    },
    "ErrorLocation": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "ErrorAttachments": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "attachmentId": {
            "type": "string"
          },
          "crashId": {
            "type": "string"
          },
          "blobLocation": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "ErrorAttachment": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "attachmentId": {
          "type": "string"
        },
        "crashId": {
          "type": "string"
        },
        "blobLocation": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "createdTime": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ErrorAppBuilds": {
      "type": "object",
      "properties": {
        "appBuilds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ErrorAttachmentText": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "ErrorAttachmentLocation": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      }
    },
    "ErrorGroupModels": {
      "type": "object",
      "properties": {
        "errorCount": {
          "format": "int64",
          "type": "integer"
        },
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "modelName": {
                "description": "model name",
                "type": "string"
              },
              "modelCode": {
                "description": "model code",
                "type": "string"
              },
              "errorCount": {
                "format": "int64",
                "description": "count of errors in a model",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "ErrorGroupModel": {
      "type": "object",
      "properties": {
        "modelName": {
          "description": "model name",
          "type": "string"
        },
        "modelCode": {
          "description": "model code",
          "type": "string"
        },
        "errorCount": {
          "format": "int64",
          "description": "count of errors in a model",
          "type": "integer"
        }
      }
    },
    "ErrorGroupOperatingSystems": {
      "type": "object",
      "properties": {
        "errorCount": {
          "format": "int64",
          "type": "integer"
        },
        "operatingSystems": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "operatingSystemName": {
                "description": "OS name",
                "type": "string"
              },
              "errorCount": {
                "format": "int64",
                "description": "count of OS",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "ErrorGroupOperatingSystem": {
      "type": "object",
      "properties": {
        "operatingSystemName": {
          "description": "OS name",
          "type": "string"
        },
        "errorCount": {
          "format": "int64",
          "description": "count of OS",
          "type": "integer"
        }
      }
    },
    "GenericLogContainer_Diagnostics": {
      "required": [
        "logs"
      ],
      "type": "object",
      "properties": {
        "exceeded_max_limit": {
          "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
          "type": "boolean"
        },
        "last_received_log_timestamp": {
          "format": "date-time",
          "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
          "type": "string"
        },
        "logs": {
          "description": "the list of logs",
          "minItems": 0,
          "type": "array",
          "items": {
            "description": "Generic log.",
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object",
            "properties": {
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "description": "Log creation timestamp.\n",
                "type": "string"
              },
              "install_id": {
                "format": "uuid",
                "description": "Install ID.\n",
                "type": "string"
              },
              "session_id": {
                "format": "uuid",
                "description": "Session ID.\n",
                "type": "string"
              },
              "event_id": {
                "description": "Event ID.\n",
                "type": "string"
              },
              "event_name": {
                "description": "Event name.\n",
                "type": "string"
              },
              "message_id": {
                "description": "Message ID.\n",
                "type": "string"
              },
              "properties": {
                "description": "event specific properties.\n",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "device": {
                "description": "Device characteristics.",
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object",
                "properties": {
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "GenericLog_Diagnostics": {
      "description": "Generic log.",
      "required": [
        "type",
        "timestamp",
        "install_id",
        "device"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Log type.\n",
          "enum": [
            "event",
            "page",
            "start_session",
            "error",
            "push_installation",
            "start_service",
            "custom_properties"
          ],
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Log creation timestamp.\n",
          "type": "string"
        },
        "install_id": {
          "format": "uuid",
          "description": "Install ID.\n",
          "type": "string"
        },
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "event_id": {
          "description": "Event ID.\n",
          "type": "string"
        },
        "event_name": {
          "description": "Event name.\n",
          "type": "string"
        },
        "message_id": {
          "description": "Message ID.\n",
          "type": "string"
        },
        "properties": {
          "description": "event specific properties.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device": {
          "description": "Device characteristics.",
          "required": [
            "sdk_name",
            "sdk_version",
            "os_name",
            "os_version",
            "locale",
            "time_zone_offset",
            "app_version",
            "app_build"
          ],
          "type": "object",
          "properties": {
            "sdk_name": {
              "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
              "type": "string"
            },
            "sdk_version": {
              "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
              "type": "string"
            },
            "wrapper_sdk_version": {
              "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
              "type": "string"
            },
            "wrapper_sdk_name": {
              "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
              "type": "string"
            },
            "model": {
              "description": "Device model (example: iPad2,3).\n",
              "type": "string"
            },
            "oem_name": {
              "description": "Device manufacturer (example: HTC).\n",
              "type": "string"
            },
            "os_name": {
              "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
              "type": "string"
            },
            "os_version": {
              "description": "OS version (example: 9.3.0).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "os_api_level": {
              "description": "API level when applicable like in Android (example: 15).\n",
              "type": "integer"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "time_zone_offset": {
              "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
              "maximum": 840,
              "minimum": -840,
              "type": "integer"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_version": {
              "description": "Application version name, e.g. 1.1.0\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "carrier_code": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_country": {
              "description": "Carrier country.\n",
              "type": "string"
            },
            "app_build": {
              "description": "The app's build number, e.g. 42.\n",
              "type": "string"
            },
            "app_namespace": {
              "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
              "type": "string"
            },
            "live_update_release_label": {
              "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
              "type": "string"
            },
            "live_update_deployment_key": {
              "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
              "type": "string"
            },
            "live_update_package_hash": {
              "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
              "type": "string"
            },
            "wrapper_runtime_version": {
              "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
              "type": "string"
            }
          }
        }
      }
    },
    "Log_Diagnostics": {
      "required": [
        "type",
        "timestamp",
        "install_id",
        "device"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Log type.\n",
          "enum": [
            "event",
            "page",
            "start_session",
            "error",
            "push_installation",
            "start_service",
            "custom_properties"
          ],
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Log creation timestamp.\n",
          "type": "string"
        },
        "install_id": {
          "format": "uuid",
          "description": "Install ID.\n",
          "type": "string"
        },
        "device": {
          "description": "Device characteristics.",
          "required": [
            "sdk_name",
            "sdk_version",
            "os_name",
            "os_version",
            "locale",
            "time_zone_offset",
            "app_version",
            "app_build"
          ],
          "type": "object",
          "properties": {
            "sdk_name": {
              "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
              "type": "string"
            },
            "sdk_version": {
              "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
              "type": "string"
            },
            "wrapper_sdk_version": {
              "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
              "type": "string"
            },
            "wrapper_sdk_name": {
              "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
              "type": "string"
            },
            "model": {
              "description": "Device model (example: iPad2,3).\n",
              "type": "string"
            },
            "oem_name": {
              "description": "Device manufacturer (example: HTC).\n",
              "type": "string"
            },
            "os_name": {
              "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
              "type": "string"
            },
            "os_version": {
              "description": "OS version (example: 9.3.0).\n",
              "type": "string"
            },
            "os_build": {
              "description": "OS build code (example: LMY47X).\n",
              "type": "string"
            },
            "os_api_level": {
              "description": "API level when applicable like in Android (example: 15).\n",
              "type": "integer"
            },
            "locale": {
              "description": "Language code (example: en_US).\n",
              "type": "string"
            },
            "time_zone_offset": {
              "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
              "maximum": 840,
              "minimum": -840,
              "type": "integer"
            },
            "screen_size": {
              "description": "Screen size of the device in pixels (example: 640x480).\n",
              "type": "string"
            },
            "app_version": {
              "description": "Application version name, e.g. 1.1.0\n",
              "type": "string"
            },
            "carrier_name": {
              "description": "Carrier name (for mobile devices).\n",
              "type": "string"
            },
            "carrier_code": {
              "description": "Carrier country code (for mobile devices).\n",
              "type": "string"
            },
            "carrier_country": {
              "description": "Carrier country.\n",
              "type": "string"
            },
            "app_build": {
              "description": "The app's build number, e.g. 42.\n",
              "type": "string"
            },
            "app_namespace": {
              "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
              "type": "string"
            },
            "live_update_release_label": {
              "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
              "type": "string"
            },
            "live_update_deployment_key": {
              "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
              "type": "string"
            },
            "live_update_package_hash": {
              "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
              "type": "string"
            },
            "wrapper_runtime_version": {
              "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
              "type": "string"
            }
          }
        }
      },
      "discriminator": "type"
    },
    "LogWithProperties_Diagnostics": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "properties": {
          "description": "Additional key/value pair parameters.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Device_Diagnostics": {
      "description": "Device characteristics.",
      "required": [
        "sdk_name",
        "sdk_version",
        "os_name",
        "os_version",
        "locale",
        "time_zone_offset",
        "app_version",
        "app_build"
      ],
      "type": "object",
      "properties": {
        "sdk_name": {
          "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
          "type": "string"
        },
        "sdk_version": {
          "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
          "type": "string"
        },
        "wrapper_sdk_version": {
          "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
          "type": "string"
        },
        "wrapper_sdk_name": {
          "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
          "type": "string"
        },
        "model": {
          "description": "Device model (example: iPad2,3).\n",
          "type": "string"
        },
        "oem_name": {
          "description": "Device manufacturer (example: HTC).\n",
          "type": "string"
        },
        "os_name": {
          "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
          "type": "string"
        },
        "os_version": {
          "description": "OS version (example: 9.3.0).\n",
          "type": "string"
        },
        "os_build": {
          "description": "OS build code (example: LMY47X).\n",
          "type": "string"
        },
        "os_api_level": {
          "description": "API level when applicable like in Android (example: 15).\n",
          "type": "integer"
        },
        "locale": {
          "description": "Language code (example: en_US).\n",
          "type": "string"
        },
        "time_zone_offset": {
          "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
          "maximum": 840,
          "minimum": -840,
          "type": "integer"
        },
        "screen_size": {
          "description": "Screen size of the device in pixels (example: 640x480).\n",
          "type": "string"
        },
        "app_version": {
          "description": "Application version name, e.g. 1.1.0\n",
          "type": "string"
        },
        "carrier_name": {
          "description": "Carrier name (for mobile devices).\n",
          "type": "string"
        },
        "carrier_code": {
          "description": "Carrier country code (for mobile devices).\n",
          "type": "string"
        },
        "carrier_country": {
          "description": "Carrier country.\n",
          "type": "string"
        },
        "app_build": {
          "description": "The app's build number, e.g. 42.\n",
          "type": "string"
        },
        "app_namespace": {
          "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
          "type": "string"
        },
        "live_update_release_label": {
          "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
          "type": "string"
        },
        "live_update_deployment_key": {
          "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
          "type": "string"
        },
        "live_update_package_hash": {
          "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
          "type": "string"
        },
        "wrapper_runtime_version": {
          "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
          "type": "string"
        }
      }
    },
    "StartSessionLog_Diagnostics": {
      "description": "Required explicit begin session log (a marker event for analytics service).",
      "required": [
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "start_session"
    },
    "HanledErrorLog_Diagnostics": {
      "description": "Required explicit begin session log (a marker event for analytics service).",
      "required": [
        "error_id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "error_id": {
          "format": "uuid",
          "description": "Error ID.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "handled_error"
    },
    "StartServiceLog_Diagnostics": {
      "description": "Describe a AppCenter.Start API call from the SDK.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "services": {
          "description": "The list of services of the AppCenter Start API call.",
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "start_service"
    },
    "CustomPropertyLog_Diagnostics": {
      "description": "Set or remove custom properties.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "properties": {
          "description": "Custom property changes.",
          "maxItems": 60,
          "minItems": 1,
          "type": "array",
          "items": {
            "required": [
              "type",
              "name"
            ],
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              }
            },
            "discriminator": "type"
          }
        }
      },
      "x-ms-discriminator-value": "custom_properties"
    },
    "CustomProperty_Diagnostics": {
      "required": [
        "type",
        "name"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "maxLength": 128,
          "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "StringProperty_Diagnostics": {
      "description": "String property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "String property value.",
          "maxLength": 128,
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "string"
    },
    "NumberProperty_Diagnostics": {
      "description": "Number property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "Number property value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "number"
    },
    "BooleanProperty_Diagnostics": {
      "description": "Boolean property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "description": "Boolean property value.",
          "type": "boolean"
        }
      },
      "x-ms-discriminator-value": "boolean"
    },
    "DateTimeProperty_Diagnostics": {
      "description": "Date and time property.",
      "required": [
        "value"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "value": {
          "format": "date-time",
          "description": "Date time property value.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "date_time"
    },
    "ClearProperty_Diagnostics": {
      "description": "Clear an existing property.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "name": {
              "maxLength": 128,
              "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "x-ms-discriminator-value": "clear"
    },
    "PageLog_Diagnostics": {
      "description": "Page view log (as in screens or activities).",
      "required": [
        "name",
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "allOf": [
            {
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Log creation timestamp.\n",
                  "type": "string"
                },
                "install_id": {
                  "format": "uuid",
                  "description": "Install ID.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object",
                  "properties": {
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    }
                  }
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "properties": {
              "description": "Additional key/value pair parameters.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the page.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "page"
    },
    "EventLog_Diagnostics": {
      "description": "Event log.",
      "required": [
        "id",
        "name",
        "session_id"
      ],
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "allOf": [
            {
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "description": "Log creation timestamp.\n",
                  "type": "string"
                },
                "install_id": {
                  "format": "uuid",
                  "description": "Install ID.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object",
                  "properties": {
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    }
                  }
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "properties": {
              "description": "Additional key/value pair parameters.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier for this event.\n",
          "type": "string"
        },
        "name": {
          "description": "Name of the event.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "event"
    },
    "PushInstallationLog_Diagnostics": {
      "description": "Push installation Information.",
      "required": [
        "push_token"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "push_token": {
          "description": "The PNS handle for this installation.\n",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "push_installation"
    },
    "ErrorLog_Diagnostics": {
      "description": "Error log.",
      "required": [
        "session_id",
        "id"
      ],
      "type": "object",
      "allOf": [
        {
          "required": [
            "type",
            "timestamp",
            "install_id",
            "device"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Log type.\n",
              "enum": [
                "event",
                "page",
                "start_session",
                "error",
                "push_installation",
                "start_service",
                "custom_properties"
              ],
              "type": "string"
            },
            "timestamp": {
              "format": "date-time",
              "description": "Log creation timestamp.\n",
              "type": "string"
            },
            "install_id": {
              "format": "uuid",
              "description": "Install ID.\n",
              "type": "string"
            },
            "device": {
              "description": "Device characteristics.",
              "required": [
                "sdk_name",
                "sdk_version",
                "os_name",
                "os_version",
                "locale",
                "time_zone_offset",
                "app_version",
                "app_build"
              ],
              "type": "object",
              "properties": {
                "sdk_name": {
                  "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                  "type": "string"
                },
                "sdk_version": {
                  "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                  "type": "string"
                },
                "wrapper_sdk_version": {
                  "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                  "type": "string"
                },
                "wrapper_sdk_name": {
                  "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                  "type": "string"
                },
                "model": {
                  "description": "Device model (example: iPad2,3).\n",
                  "type": "string"
                },
                "oem_name": {
                  "description": "Device manufacturer (example: HTC).\n",
                  "type": "string"
                },
                "os_name": {
                  "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                  "type": "string"
                },
                "os_version": {
                  "description": "OS version (example: 9.3.0).\n",
                  "type": "string"
                },
                "os_build": {
                  "description": "OS build code (example: LMY47X).\n",
                  "type": "string"
                },
                "os_api_level": {
                  "description": "API level when applicable like in Android (example: 15).\n",
                  "type": "integer"
                },
                "locale": {
                  "description": "Language code (example: en_US).\n",
                  "type": "string"
                },
                "time_zone_offset": {
                  "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                  "maximum": 840,
                  "minimum": -840,
                  "type": "integer"
                },
                "screen_size": {
                  "description": "Screen size of the device in pixels (example: 640x480).\n",
                  "type": "string"
                },
                "app_version": {
                  "description": "Application version name, e.g. 1.1.0\n",
                  "type": "string"
                },
                "carrier_name": {
                  "description": "Carrier name (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_code": {
                  "description": "Carrier country code (for mobile devices).\n",
                  "type": "string"
                },
                "carrier_country": {
                  "description": "Carrier country.\n",
                  "type": "string"
                },
                "app_build": {
                  "description": "The app's build number, e.g. 42.\n",
                  "type": "string"
                },
                "app_namespace": {
                  "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                  "type": "string"
                },
                "live_update_release_label": {
                  "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                  "type": "string"
                },
                "live_update_deployment_key": {
                  "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                  "type": "string"
                },
                "live_update_package_hash": {
                  "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                  "type": "string"
                },
                "wrapper_runtime_version": {
                  "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                  "type": "string"
                }
              }
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "session_id": {
          "format": "uuid",
          "description": "Session ID.\n",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "Error identifier.",
          "type": "string"
        },
        "app_launch_toffset": {
          "format": "int64",
          "description": "Corresponds to the number of milliseconds elapsed between the time the error occurred and the app was launched.\n",
          "type": "integer"
        }
      },
      "x-ms-discriminator-value": "error"
    },
    "Versions_Diagnostics": {
      "properties": {
        "versions": {
          "description": "list of version count",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "version": {
                "description": "version",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "version count",
                "type": "integer"
              },
              "previous_count": {
                "format": "int64",
                "description": "the count of previous time range of the version",
                "type": "integer"
              }
            }
          }
        },
        "total": {
          "format": "int64",
          "description": "the total count of versions",
          "type": "integer"
        }
      }
    },
    "Version_Diagnostics": {
      "type": "object",
      "properties": {
        "version": {
          "description": "version",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "version count",
          "type": "integer"
        },
        "previous_count": {
          "format": "int64",
          "description": "the count of previous time range of the version",
          "type": "integer"
        }
      }
    },
    "AvailableVersions_Diagnostics": {
      "type": "object",
      "properties": {
        "versions": {
          "description": "List of available versions.",
          "type": "array",
          "items": {
            "format": "string",
            "description": "Version name.",
            "type": "string"
          }
        },
        "total_count": {
          "format": "int64",
          "description": "The full number of versions across all pages.",
          "type": "integer"
        }
      }
    },
    "ErrorRetentionSettings": {
      "required": [
        "retention_in_days"
      ],
      "type": "object",
      "properties": {
        "retention_in_days": {
          "enum": [
            28,
            90
          ],
          "type": "integer"
        }
      }
    },
    "export_entity": {
      "enum": [
        "crashes",
        "errors",
        "attachments",
        "no_logs"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ExportEntity",
        "modelAsString": false
      }
    },
    "ExportConfiguration": {
      "description": "Export configuration",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of export configuration",
          "enum": [
            "blob_storage_connection_string",
            "application_insights_instrumentation_key",
            "blob_storage_linked_subscription",
            "application_insights_linked_subscription"
          ],
          "type": "string"
        },
        "export_entities": {
          "type": "array",
          "items": {
            "enum": [
              "crashes",
              "errors",
              "attachments",
              "no_logs"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ExportEntity",
              "modelAsString": false
            }
          }
        },
        "resource_name": {
          "description": "The resource name on azure",
          "type": "string"
        },
        "resource_group": {
          "description": "The resource group name on azure",
          "type": "string"
        },
        "backfill": {
          "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
          "type": "boolean"
        }
      },
      "discriminator": "type"
    },
    "ExportBlobConfiguration": {
      "description": "Configuration for export to Blob Storage with blob format",
      "allOf": [
        {
          "description": "Export configuration",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of export configuration",
              "enum": [
                "blob_storage_connection_string",
                "application_insights_instrumentation_key",
                "blob_storage_linked_subscription",
                "application_insights_linked_subscription"
              ],
              "type": "string"
            },
            "export_entities": {
              "type": "array",
              "items": {
                "enum": [
                  "crashes",
                  "errors",
                  "attachments",
                  "no_logs"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "ExportEntity",
                  "modelAsString": false
                }
              }
            },
            "resource_name": {
              "description": "The resource name on azure",
              "type": "string"
            },
            "resource_group": {
              "description": "The resource group name on azure",
              "type": "string"
            },
            "backfill": {
              "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
              "type": "boolean"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "blob_path_format_kind": {
          "description": "The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute'",
          "enum": [
            "WithoutAppId",
            "WithAppId"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BlobPathFormatKind",
            "modelAsString": false
          }
        }
      },
      "x-ms-discriminator-value": "export_blob_configuration"
    },
    "ExportConfigurationBlobStorageConnectionString": {
      "description": "Configuration for export to Blob Storage with customer provided connection string",
      "required": [
        "connection_string"
      ],
      "allOf": [
        {
          "description": "Configuration for export to Blob Storage with blob format",
          "allOf": [
            {
              "description": "Export configuration",
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of export configuration",
                  "enum": [
                    "blob_storage_connection_string",
                    "application_insights_instrumentation_key",
                    "blob_storage_linked_subscription",
                    "application_insights_linked_subscription"
                  ],
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "resource_name": {
                  "description": "The resource name on azure",
                  "type": "string"
                },
                "resource_group": {
                  "description": "The resource group name on azure",
                  "type": "string"
                },
                "backfill": {
                  "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                  "type": "boolean"
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "blob_path_format_kind": {
              "description": "The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute'",
              "enum": [
                "WithoutAppId",
                "WithAppId"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "BlobPathFormatKind",
                "modelAsString": false
              }
            }
          },
          "x-ms-discriminator-value": "export_blob_configuration"
        }
      ],
      "properties": {
        "connection_string": {
          "description": "Connection string for blob storage account",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "blob_storage_connection_string"
    },
    "ExportConfigurationAppInsightsKey": {
      "description": "Configuration for export to Application Insights resource with customer provided intrumentation key",
      "required": [
        "instrumentation_key"
      ],
      "allOf": [
        {
          "description": "Export configuration",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of export configuration",
              "enum": [
                "blob_storage_connection_string",
                "application_insights_instrumentation_key",
                "blob_storage_linked_subscription",
                "application_insights_linked_subscription"
              ],
              "type": "string"
            },
            "export_entities": {
              "type": "array",
              "items": {
                "enum": [
                  "crashes",
                  "errors",
                  "attachments",
                  "no_logs"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "ExportEntity",
                  "modelAsString": false
                }
              }
            },
            "resource_name": {
              "description": "The resource name on azure",
              "type": "string"
            },
            "resource_group": {
              "description": "The resource group name on azure",
              "type": "string"
            },
            "backfill": {
              "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
              "type": "boolean"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "instrumentation_key": {
          "description": "Instrumentation key for Application Insights resource",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "application_insights_instrumentation_key"
    },
    "ExportConfigurationBlobStorageLinkedSubscription": {
      "description": "Configuration for export to Blob Storage with customer linked subscription.",
      "required": [
        "subscription_id"
      ],
      "allOf": [
        {
          "description": "Configuration for export to Blob Storage with blob format",
          "allOf": [
            {
              "description": "Export configuration",
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of export configuration",
                  "enum": [
                    "blob_storage_connection_string",
                    "application_insights_instrumentation_key",
                    "blob_storage_linked_subscription",
                    "application_insights_linked_subscription"
                  ],
                  "type": "string"
                },
                "export_entities": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "name": "ExportEntity",
                      "modelAsString": false
                    }
                  }
                },
                "resource_name": {
                  "description": "The resource name on azure",
                  "type": "string"
                },
                "resource_group": {
                  "description": "The resource group name on azure",
                  "type": "string"
                },
                "backfill": {
                  "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                  "type": "boolean"
                }
              },
              "discriminator": "type"
            }
          ],
          "properties": {
            "blob_path_format_kind": {
              "description": "The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute'",
              "enum": [
                "WithoutAppId",
                "WithAppId"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "BlobPathFormatKind",
                "modelAsString": false
              }
            }
          },
          "x-ms-discriminator-value": "export_blob_configuration"
        }
      ],
      "properties": {
        "subscription_id": {
          "description": "Id of customer subscription linked in App Center",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "blob_storage_linked_subscription"
    },
    "ExportConfigurationAppInsightsLinkedSubscription": {
      "description": "Configuration for export to Application Insights resource with customer linked subscription.",
      "required": [
        "subscription_id"
      ],
      "allOf": [
        {
          "description": "Export configuration",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of export configuration",
              "enum": [
                "blob_storage_connection_string",
                "application_insights_instrumentation_key",
                "blob_storage_linked_subscription",
                "application_insights_linked_subscription"
              ],
              "type": "string"
            },
            "export_entities": {
              "type": "array",
              "items": {
                "enum": [
                  "crashes",
                  "errors",
                  "attachments",
                  "no_logs"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "ExportEntity",
                  "modelAsString": false
                }
              }
            },
            "resource_name": {
              "description": "The resource name on azure",
              "type": "string"
            },
            "resource_group": {
              "description": "The resource group name on azure",
              "type": "string"
            },
            "backfill": {
              "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
              "type": "boolean"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "subscription_id": {
          "description": "Id of customer subscription linked in App Center",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "application_insights_linked_subscription"
    },
    "ExportConfigurationResult": {
      "description": "Export configuration result",
      "required": [
        "id",
        "export_type",
        "creation_time",
        "state"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Export configuration id",
          "type": "string"
        },
        "export_type": {
          "description": "Target resource type of export configuration",
          "enum": [
            "BlobStorage",
            "AppInsights"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExportType",
            "modelAsString": false
          }
        },
        "creation_time": {
          "description": "Creation time in ISO 8601 format",
          "type": "string"
        },
        "last_run_time": {
          "description": "Latest time in ISO 8601 format when export completed successfully",
          "type": "string"
        },
        "export_entities": {
          "type": "array",
          "items": {
            "enum": [
              "crashes",
              "errors",
              "attachments",
              "no_logs"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ExportEntity",
              "modelAsString": false
            }
          }
        },
        "state": {
          "description": "State of the export job",
          "enum": [
            "Enabled",
            "Disabled",
            "Pending",
            "Deleted",
            "Invalid"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExportState",
            "modelAsString": false
          }
        },
        "state_info": {
          "description": "Additional information about export configuration state",
          "type": "string"
        },
        "resource_group": {
          "description": "resource group for the storage account/App Insights resource",
          "type": "string"
        },
        "resource_name": {
          "description": "Storage accout or Appinsights resource name",
          "type": "string"
        },
        "export_configuration": {
          "description": "Export configuration",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of export configuration",
              "enum": [
                "blob_storage_connection_string",
                "application_insights_instrumentation_key",
                "blob_storage_linked_subscription",
                "application_insights_linked_subscription"
              ],
              "type": "string"
            },
            "export_entities": {
              "type": "array",
              "items": {
                "enum": [
                  "crashes",
                  "errors",
                  "attachments",
                  "no_logs"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "ExportEntity",
                  "modelAsString": false
                }
              }
            },
            "resource_name": {
              "description": "The resource name on azure",
              "type": "string"
            },
            "resource_group": {
              "description": "The resource group name on azure",
              "type": "string"
            },
            "backfill": {
              "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
              "type": "boolean"
            }
          },
          "discriminator": "type"
        }
      }
    },
    "ExportConfigurationListResult": {
      "description": "List of export configurations",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "description": "Export configuration result",
            "required": [
              "id",
              "export_type",
              "creation_time",
              "state"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Export configuration id",
                "type": "string"
              },
              "export_type": {
                "description": "Target resource type of export configuration",
                "enum": [
                  "BlobStorage",
                  "AppInsights"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "ExportType",
                  "modelAsString": false
                }
              },
              "creation_time": {
                "description": "Creation time in ISO 8601 format",
                "type": "string"
              },
              "last_run_time": {
                "description": "Latest time in ISO 8601 format when export completed successfully",
                "type": "string"
              },
              "export_entities": {
                "type": "array",
                "items": {
                  "enum": [
                    "crashes",
                    "errors",
                    "attachments",
                    "no_logs"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ExportEntity",
                    "modelAsString": false
                  }
                }
              },
              "state": {
                "description": "State of the export job",
                "enum": [
                  "Enabled",
                  "Disabled",
                  "Pending",
                  "Deleted",
                  "Invalid"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "ExportState",
                  "modelAsString": false
                }
              },
              "state_info": {
                "description": "Additional information about export configuration state",
                "type": "string"
              },
              "resource_group": {
                "description": "resource group for the storage account/App Insights resource",
                "type": "string"
              },
              "resource_name": {
                "description": "Storage accout or Appinsights resource name",
                "type": "string"
              },
              "export_configuration": {
                "description": "Export configuration",
                "required": [
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Type of export configuration",
                    "enum": [
                      "blob_storage_connection_string",
                      "application_insights_instrumentation_key",
                      "blob_storage_linked_subscription",
                      "application_insights_linked_subscription"
                    ],
                    "type": "string"
                  },
                  "export_entities": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "crashes",
                        "errors",
                        "attachments",
                        "no_logs"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "name": "ExportEntity",
                        "modelAsString": false
                      }
                    }
                  },
                  "resource_name": {
                    "description": "The resource name on azure",
                    "type": "string"
                  },
                  "resource_group": {
                    "description": "The resource group name on azure",
                    "type": "string"
                  },
                  "backfill": {
                    "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                    "type": "boolean"
                  }
                },
                "discriminator": "type"
              }
            }
          }
        },
        "total": {
          "format": "int64",
          "description": "the total count of exports",
          "type": "integer"
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "NotificationsListResult": {
      "description": "List of notifications",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "description": "Notification statistics",
            "required": [
              "notification_id",
              "state"
            ],
            "type": "object",
            "properties": {
              "notification_id": {
                "description": "Notification id.",
                "type": "string"
              },
              "name": {
                "description": "Notification name",
                "maxLength": 64,
                "type": "string"
              },
              "notification_target": {
                "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
                "required": [
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "enum": [
                      "audiences_target",
                      "devices_target",
                      "user_ids_target",
                      "account_ids_target",
                      "broadcast_target"
                    ],
                    "type": "string"
                  }
                },
                "discriminator": "type"
              },
              "send_time": {
                "format": "date-time",
                "description": "Notification send time",
                "type": "string"
              },
              "pns_send_failure": {
                "format": "long",
                "description": "Number of the notifications failed to send to the push provider.",
                "type": "integer"
              },
              "pns_send_success": {
                "format": "long",
                "description": "Number of the notifications successfully sent to push the provider.",
                "type": "integer"
              },
              "state": {
                "description": "State of the notification.",
                "enum": [
                  "Queued",
                  "Sending",
                  "Completed",
                  "Failed",
                  "NoTargetFound"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "notification_states",
                  "modelAsString": true
                }
              }
            }
          }
        },
        "total": {
          "format": "int64",
          "description": "the total count of notifications",
          "type": "integer"
        },
        "nextLink": {
          "type": "string"
        }
      }
    },
    "NotificationOverviewResult": {
      "description": "Notification statistics",
      "required": [
        "notification_id",
        "state"
      ],
      "type": "object",
      "properties": {
        "notification_id": {
          "description": "Notification id.",
          "type": "string"
        },
        "name": {
          "description": "Notification name",
          "maxLength": 64,
          "type": "string"
        },
        "notification_target": {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        },
        "send_time": {
          "format": "date-time",
          "description": "Notification send time",
          "type": "string"
        },
        "pns_send_failure": {
          "format": "long",
          "description": "Number of the notifications failed to send to the push provider.",
          "type": "integer"
        },
        "pns_send_success": {
          "format": "long",
          "description": "Number of the notifications successfully sent to push the provider.",
          "type": "integer"
        },
        "state": {
          "description": "State of the notification.",
          "enum": [
            "Queued",
            "Sending",
            "Completed",
            "Failed",
            "NoTargetFound"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "notification_states",
            "modelAsString": true
          }
        }
      }
    },
    "NotificationDetailsResult": {
      "description": "Notification statistics",
      "required": [
        "notification_id",
        "state",
        "notification_content"
      ],
      "allOf": [
        {
          "description": "Notification statistics",
          "required": [
            "notification_id",
            "state"
          ],
          "type": "object",
          "properties": {
            "notification_id": {
              "description": "Notification id.",
              "type": "string"
            },
            "name": {
              "description": "Notification name",
              "maxLength": 64,
              "type": "string"
            },
            "notification_target": {
              "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
              "required": [
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "audiences_target",
                    "devices_target",
                    "user_ids_target",
                    "account_ids_target",
                    "broadcast_target"
                  ],
                  "type": "string"
                }
              },
              "discriminator": "type"
            },
            "send_time": {
              "format": "date-time",
              "description": "Notification send time",
              "type": "string"
            },
            "pns_send_failure": {
              "format": "long",
              "description": "Number of the notifications failed to send to the push provider.",
              "type": "integer"
            },
            "pns_send_success": {
              "format": "long",
              "description": "Number of the notifications successfully sent to push the provider.",
              "type": "integer"
            },
            "state": {
              "description": "State of the notification.",
              "enum": [
                "Queued",
                "Sending",
                "Completed",
                "Failed",
                "NoTargetFound"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "notification_states",
                "modelAsString": true
              }
            }
          }
        }
      ],
      "properties": {
        "notification_content": {
          "description": "Notification definition object",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Notification name",
              "maxLength": 64,
              "minLength": 3,
              "type": "string"
            },
            "title": {
              "description": "Notification title",
              "maxLength": 128,
              "type": "string"
            },
            "body": {
              "description": "Notification body",
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "custom_data": {
              "description": "Notification custom data (such as badge, color, sound, etc.)",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "failure_outcomes": {
          "description": "Failture outcome counts",
          "type": "array",
          "items": {
            "description": "Notification failure outcome count",
            "type": "object",
            "properties": {
              "failure_reason": {
                "description": "The reason of the notification failure",
                "type": "string"
              },
              "count": {
                "format": "int64",
                "description": "count of this type of failure",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "NotificationIdList": {
      "description": "List of notification Ids",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "description": "List of notification Ids.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NotificationDefinition": {
      "description": "Notification definition object",
      "required": [
        "notification_content"
      ],
      "type": "object",
      "properties": {
        "notification_target": {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        },
        "notification_content": {
          "description": "Notification definition object",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Notification name",
              "maxLength": 64,
              "minLength": 3,
              "type": "string"
            },
            "title": {
              "description": "Notification title",
              "maxLength": 128,
              "type": "string"
            },
            "body": {
              "description": "Notification body",
              "maxLength": 4000,
              "minLength": 1,
              "type": "string"
            },
            "custom_data": {
              "description": "Notification custom data (such as badge, color, sound, etc.)",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "example": {
        "notification_target": {
          "type": "devices_target",
          "devices": [
            "146fbdde-0aaf-444d-bcc0-6d84520c9080",
            "746fbdde-0aaf-444d-bcc0-6d84520c9111"
          ]
        },
        "notification_content": {
          "name": "Transaction 23-09814",
          "title": "Sales Order Update",
          "body": "Sales order 18987 for customer Acme Dynamite status changed to SHIPPED"
        }
      }
    },
    "NotificationContent": {
      "description": "Notification definition object",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Notification name",
          "maxLength": 64,
          "minLength": 3,
          "type": "string"
        },
        "title": {
          "description": "Notification title",
          "maxLength": 128,
          "type": "string"
        },
        "body": {
          "description": "Notification body",
          "maxLength": 4000,
          "minLength": 1,
          "type": "string"
        },
        "custom_data": {
          "description": "Notification custom data (such as badge, color, sound, etc.)",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "NotificationSendSucceededResult": {
      "description": "Notification send succeeded.",
      "required": [
        "notification_id"
      ],
      "properties": {
        "notification_id": {
          "description": "The unique notification identifier.",
          "type": "string"
        }
      }
    },
    "NotificationTarget": {
      "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "audiences_target",
            "devices_target",
            "user_ids_target",
            "account_ids_target",
            "broadcast_target"
          ],
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "NotificationTargetBroadcast": {
      "description": "Broadcast notification to all the devices",
      "allOf": [
        {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "x-ms-discriminator-value": "broadcast_target"
    },
    "NotificationTargetUserIds": {
      "description": "Notification per User IDs",
      "required": [
        "user_ids"
      ],
      "allOf": [
        {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "user_ids": {
          "description": "List of user IDs to target",
          "type": "array",
          "items": {
            "description": "User Id.",
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "user_ids_target"
    },
    "NotificationTargetAccountIds": {
      "description": "Notification per Account IDs",
      "required": [
        "account_ids"
      ],
      "allOf": [
        {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "account_ids": {
          "description": "List of account IDs to target",
          "type": "array",
          "items": {
            "description": "Account Id.",
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "account_ids_target"
    },
    "NotificationTargetAudiences": {
      "description": "Notification target audiences.",
      "required": [
        "audiences"
      ],
      "allOf": [
        {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "audiences": {
          "description": "List of target audiences.",
          "type": "array",
          "items": {
            "description": "Audience Id.",
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "audiences_target"
    },
    "NotificationTargetDevices": {
      "description": "Notification target devices. If null, all devices will be targeted(broadcast).",
      "required": [
        "devices"
      ],
      "allOf": [
        {
          "description": "Type of Notification target (audiences, devices, user ids, account ids or broadcast). The object must include the correct properties for the specified target type except for broadcast.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "audiences_target",
                "devices_target",
                "user_ids_target",
                "account_ids_target",
                "broadcast_target"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "devices": {
          "description": "List of target devices.",
          "type": "array",
          "items": {
            "format": "uuid",
            "description": "Device Id",
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "devices_target"
    },
    "NotificationConfig": {
      "description": "Type of notification config (NotificationConfigAppleToken, NotificationConfigGoogle, NotificationConfigWindows). The 'type' property must be set to a valid value and the object must include the correct properties for the specified type.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "apns_token_config",
            "gcm_config",
            "wns_config"
          ],
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "NotificationConfigApple": {
      "description": "Apple notification certificate configuration.",
      "required": [
        "endpoint_type",
        "cert_encoded",
        "cert_filename",
        "cert_key"
      ],
      "allOf": [
        {
          "description": "Type of notification config (NotificationConfigAppleToken, NotificationConfigGoogle, NotificationConfigWindows). The 'type' property must be set to a valid value and the object must include the correct properties for the specified type.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "apns_token_config",
                "gcm_config",
                "wns_config"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "endpoint_type": {
          "description": "Type of endpoint the certificate or token are associated with",
          "enum": [
            "production",
            "sandbox"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AppleNotificationEndpointType",
            "modelAsString": true
          }
        },
        "cert_encoded": {
          "description": "Base64 encoded certificate string.",
          "type": "string"
        },
        "cert_filename": {
          "description": "Certificate file name",
          "type": "string"
        },
        "cert_key": {
          "description": "Certificate password",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "apns_config"
    },
    "NotificationConfigAppleToken": {
      "description": "Apple notification auth token configuration. The 'type' property must be set to 'apns_token_config'.",
      "required": [
        "key_id",
        "id",
        "prefix",
        "token",
        "endpoint_type"
      ],
      "allOf": [
        {
          "description": "Type of notification config (NotificationConfigAppleToken, NotificationConfigGoogle, NotificationConfigWindows). The 'type' property must be set to a valid value and the object must include the correct properties for the specified type.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "apns_token_config",
                "gcm_config",
                "wns_config"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "key_id": {
          "description": "A 10-character key identifier (kid).",
          "type": "string"
        },
        "id": {
          "description": "Application ID.",
          "type": "string"
        },
        "prefix": {
          "description": "Application prefix.",
          "type": "string"
        },
        "token": {
          "description": "Provider Authentication Token.",
          "type": "string"
        },
        "endpoint_type": {
          "description": "Type of endpoint the certificate or token are associated with",
          "enum": [
            "production",
            "sandbox"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AppleNotificationEndpointType",
            "modelAsString": true
          }
        }
      },
      "x-ms-discriminator-value": "apns_token_config"
    },
    "NotificationConfigGoogle": {
      "description": "Google notification configuration. The 'type' property must be set to 'gcm_config'",
      "required": [
        "google_api_key"
      ],
      "allOf": [
        {
          "description": "Type of notification config (NotificationConfigAppleToken, NotificationConfigGoogle, NotificationConfigWindows). The 'type' property must be set to a valid value and the object must include the correct properties for the specified type.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "apns_token_config",
                "gcm_config",
                "wns_config"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "google_api_key": {
          "description": "GCM API key.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "gcm_config"
    },
    "NotificationConfigWindows": {
      "description": "WNS notification configuration. The 'type' property must be set to 'wns_config'",
      "required": [
        "package_sid",
        "secret_key"
      ],
      "allOf": [
        {
          "description": "Type of notification config (NotificationConfigAppleToken, NotificationConfigGoogle, NotificationConfigWindows). The 'type' property must be set to a valid value and the object must include the correct properties for the specified type.",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "apns_token_config",
                "gcm_config",
                "wns_config"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "package_sid": {
          "description": "Package security identifier (SID).",
          "type": "string"
        },
        "secret_key": {
          "description": "Secret key.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "wns_config"
    },
    "NotificationConfigResult": {
      "description": "Generic notification configuration result.",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "NotificationConfigAppleResult": {
      "description": "Apple notification certificate configuration result.",
      "required": [
        "endpoint_type",
        "cert_expiration",
        "cert_filename"
      ],
      "allOf": [
        {
          "description": "Generic notification configuration result.",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "endpoint_type": {
          "description": "Type of endpoint the certificate or token are associated with",
          "enum": [
            "production",
            "sandbox"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AppleNotificationEndpointType",
            "modelAsString": true
          }
        },
        "cert_expiration": {
          "format": "date-time",
          "description": "Certificate expiration date.",
          "type": "string"
        },
        "cert_filename": {
          "description": "Certificate file name",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "apns_config"
    },
    "NotificationConfigAppleTokenResult": {
      "description": "Apple notification auth token configuration result.",
      "required": [
        "key_id",
        "id",
        "prefix",
        "endpoint_type"
      ],
      "allOf": [
        {
          "description": "Generic notification configuration result.",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "key_id": {
          "description": "A 10-character key identifier (kid).",
          "type": "string"
        },
        "id": {
          "description": "Application ID.",
          "type": "string"
        },
        "prefix": {
          "description": "Application Prefix.",
          "type": "string"
        },
        "endpoint_type": {
          "description": "Type of endpoint the certificate or token are associated with",
          "enum": [
            "production",
            "sandbox"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AppleNotificationEndpointType",
            "modelAsString": true
          }
        }
      },
      "x-ms-discriminator-value": "apns_token_config"
    },
    "NotificationConfigGoogleResult": {
      "description": "Google notification configuration result.",
      "required": [
        "google_api_key"
      ],
      "allOf": [
        {
          "description": "Generic notification configuration result.",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "google_api_key": {
          "description": "GCM API key.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "gcm_config"
    },
    "NotificationConfigWindowsResult": {
      "description": "WNS notification configuration result.",
      "required": [
        "package_sid"
      ],
      "allOf": [
        {
          "description": "Generic notification configuration result.",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "package_sid": {
          "description": "Package security identifier (SID).",
          "type": "string"
        },
        "secret_key": {
          "description": "windows push configuration secret key.",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "wns_config"
    },
    "AppleNotificationEndpointType": {
      "description": "Type of endpoint the certificate or token are associated with",
      "enum": [
        "production",
        "sandbox"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "AppleNotificationEndpointType",
        "modelAsString": true
      }
    },
    "NotificationPlatformType": {
      "description": "Notification platform type",
      "enum": [
        "apns",
        "gcm",
        "wns"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NotificationPlatformType",
        "modelAsString": true
      }
    },
    "NotificationFailureOutcomeCount": {
      "description": "Notification failure outcome count",
      "type": "object",
      "properties": {
        "failure_reason": {
          "description": "The reason of the notification failure",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "count of this type of failure",
          "type": "integer"
        }
      }
    },
    "ExportConfig": {
      "description": "Generic export configuration.",
      "required": [
        "blob_container_sas_uri"
      ],
      "type": "object",
      "properties": {
        "blob_container_sas_uri": {
          "description": "A shared access signature (SAS) URI with Read, Write and Delete permissions on a container.",
          "type": "string"
        }
      }
    },
    "ExportStartedResult": {
      "description": "Export started.",
      "required": [
        "export_id"
      ],
      "properties": {
        "export_id": {
          "description": "The unique export identifier.",
          "type": "string"
        }
      }
    },
    "ExportStatusResult": {
      "description": "Export status",
      "required": [
        "export_id",
        "status"
      ],
      "type": "object",
      "properties": {
        "export_id": {
          "description": "The unique export identifier.",
          "type": "string"
        },
        "status": {
          "description": "Status of the export.",
          "enum": [
            "InProgress",
            "Completed",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExportStatus"
          }
        }
      }
    },
    "AppId": {
      "properties": {
        "id": {
          "description": "the id of the app",
          "type": "string"
        }
      }
    },
    "DeviceConfiguration": {
      "properties": {
        "name": {
          "description": "The name of the device model and OS version",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "The unique id of the device configuration",
          "type": "string"
        },
        "tier": {
          "description": "The tier",
          "type": "number"
        },
        "image": {
          "properties": {
            "full": {
              "type": "string"
            },
            "thumb": {
              "type": "string"
            }
          }
        },
        "model": {
          "properties": {
            "name": {
              "type": "string"
            },
            "manufacturer": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "platform": {
              "type": "string"
            },
            "dimensions": {
              "description": "Physical device dimensions",
              "properties": {
                "depth": {
                  "type": "object"
                },
                "height": {
                  "type": "object"
                },
                "width": {
                  "type": "object"
                }
              }
            },
            "resolution": {
              "description": "Device screen resolution",
              "properties": {
                "height": {
                  "type": "string"
                },
                "width": {
                  "type": "string"
                },
                "ppi": {
                  "type": "string"
                }
              }
            },
            "releaseDate": {
              "type": "string"
            },
            "formFactor": {
              "type": "string"
            },
            "screenSize": {
              "description": "Physical device screen dimensions",
              "properties": {
                "cm": {
                  "type": "string"
                },
                "in": {
                  "type": "string"
                }
              }
            },
            "cpu": {
              "description": "CPU data for device",
              "properties": {
                "frequency": {
                  "type": "string"
                },
                "core": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            },
            "memory": {
              "description": "Memory data for device",
              "properties": {
                "formattedSize": {
                  "type": "string"
                }
              }
            },
            "screenRotation": {
              "type": "number"
            },
            "deviceFrame": {
              "properties": {
                "grid": {
                  "properties": {
                    "width": {
                      "type": "number"
                    },
                    "height": {
                      "type": "number"
                    },
                    "frameUrl": {
                      "type": "string"
                    },
                    "screen": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                },
                "full": {
                  "properties": {
                    "width": {
                      "type": "number"
                    },
                    "height": {
                      "type": "number"
                    },
                    "frameUrl": {
                      "type": "string"
                    },
                    "screen": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "availabilityCount": {
              "type": "number"
            }
          }
        },
        "os": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "marketShare": {
          "type": "number"
        }
      }
    },
    "DeviceSetConfiguration": {
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id of the device configuration",
          "type": "string"
        },
        "image": {
          "properties": {
            "thumb": {
              "type": "string"
            }
          }
        },
        "model": {
          "properties": {
            "name": {
              "type": "string"
            },
            "manufacturer": {
              "type": "string"
            },
            "releaseDate": {
              "type": "string"
            },
            "formFactor": {
              "type": "string"
            }
          }
        },
        "os": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        }
      }
    },
    "DeviceModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "dimensions": {
          "description": "Physical device dimensions",
          "properties": {
            "depth": {
              "type": "object"
            },
            "height": {
              "type": "object"
            },
            "width": {
              "type": "object"
            }
          }
        },
        "resolution": {
          "description": "Device screen resolution",
          "properties": {
            "height": {
              "type": "string"
            },
            "width": {
              "type": "string"
            },
            "ppi": {
              "type": "string"
            }
          }
        },
        "releaseDate": {
          "type": "string"
        },
        "formFactor": {
          "type": "string"
        },
        "screenSize": {
          "description": "Physical device screen dimensions",
          "properties": {
            "cm": {
              "type": "string"
            },
            "in": {
              "type": "string"
            }
          }
        },
        "cpu": {
          "description": "CPU data for device",
          "properties": {
            "frequency": {
              "type": "string"
            },
            "core": {
              "type": "string"
            },
            "text": {
              "type": "string"
            }
          }
        },
        "memory": {
          "description": "Memory data for device",
          "properties": {
            "formattedSize": {
              "type": "string"
            }
          }
        },
        "screenRotation": {
          "type": "number"
        },
        "deviceFrame": {
          "properties": {
            "grid": {
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "frameUrl": {
                  "type": "string"
                },
                "screen": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            },
            "full": {
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "frameUrl": {
                  "type": "string"
                },
                "screen": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "availabilityCount": {
          "type": "number"
        }
      }
    },
    "DeviceSetModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "releaseDate": {
          "type": "string"
        },
        "formFactor": {
          "type": "string"
        }
      }
    },
    "DeviceScreenSize": {
      "description": "Physical device screen dimensions",
      "properties": {
        "cm": {
          "type": "string"
        },
        "in": {
          "type": "string"
        }
      }
    },
    "DeviceResolution": {
      "description": "Device screen resolution",
      "properties": {
        "height": {
          "type": "string"
        },
        "width": {
          "type": "string"
        },
        "ppi": {
          "type": "string"
        }
      }
    },
    "DeviceDimensions": {
      "description": "Physical device dimensions",
      "properties": {
        "depth": {
          "type": "object"
        },
        "height": {
          "type": "object"
        },
        "width": {
          "type": "object"
        }
      }
    },
    "DeviceCpu": {
      "description": "CPU data for device",
      "properties": {
        "frequency": {
          "type": "string"
        },
        "core": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "DeviceMemory": {
      "description": "Memory data for device",
      "properties": {
        "formattedSize": {
          "type": "string"
        }
      }
    },
    "DeviceFrame": {
      "properties": {
        "grid": {
          "properties": {
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "frameUrl": {
              "type": "string"
            },
            "screen": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "full": {
          "properties": {
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "frameUrl": {
              "type": "string"
            },
            "screen": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "DeviceFrameDefinition": {
      "properties": {
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "frameUrl": {
          "type": "string"
        },
        "screen": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "TestRun": {
      "title": "Test Run",
      "description": "Summary single test run on Xamarin Test Cloud",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The unique id of the test upload",
          "type": "string"
        },
        "date": {
          "description": "The date and time the test was uploaded",
          "type": "string"
        },
        "appVersion": {
          "description": "The compiled version of the app binary",
          "type": "string"
        },
        "testSeries": {
          "description": "The name of the test series with which this test upload is associated",
          "type": "string"
        },
        "platform": {
          "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
          "type": "string"
        },
        "runStatus": {
          "description": "The current status of the test run, in relation to the various phases",
          "type": "string"
        },
        "resultStatus": {
          "description": "The passed/failed state",
          "type": "string"
        },
        "state": {
          "description": "Deprecated. Use runStatus instead.",
          "type": "string"
        },
        "status": {
          "description": "Deprecated. Use resultStatus instead.",
          "type": "string"
        },
        "description": {
          "description": "Human readable explanation of the current test status",
          "type": "string"
        },
        "stats": {
          "title": "Test Run Statistics",
          "description": "Summary single test run on Xamarin Test Cloud",
          "type": "object",
          "properties": {
            "devices": {
              "description": "Number of devices running the test",
              "type": "number"
            },
            "devicesFinished": {
              "description": "Number of finished devices",
              "type": "number"
            },
            "devicesFailed": {
              "description": "Number of failed devices",
              "type": "number"
            },
            "total": {
              "description": "Number of tests in total",
              "type": "number"
            },
            "passed": {
              "description": "Number of passed tests",
              "type": "number"
            },
            "failed": {
              "description": "Number of failed tests",
              "type": "number"
            },
            "skipped": {
              "description": "Number of skipped tests",
              "type": "number"
            },
            "peakMemory": {
              "description": "The max amount of MB used during the test run",
              "type": "number"
            },
            "totalDeviceMinutes": {
              "description": "The number of minutes of device time the test has been runnign",
              "type": "number"
            }
          }
        },
        "testType": {
          "description": "The name of the test framework used to run this test",
          "type": "string"
        }
      }
    },
    "TestRunStatistics": {
      "title": "Test Run Statistics",
      "description": "Summary single test run on Xamarin Test Cloud",
      "type": "object",
      "properties": {
        "devices": {
          "description": "Number of devices running the test",
          "type": "number"
        },
        "devicesFinished": {
          "description": "Number of finished devices",
          "type": "number"
        },
        "devicesFailed": {
          "description": "Number of failed devices",
          "type": "number"
        },
        "total": {
          "description": "Number of tests in total",
          "type": "number"
        },
        "passed": {
          "description": "Number of passed tests",
          "type": "number"
        },
        "failed": {
          "description": "Number of failed tests",
          "type": "number"
        },
        "skipped": {
          "description": "Number of skipped tests",
          "type": "number"
        },
        "peakMemory": {
          "description": "The max amount of MB used during the test run",
          "type": "number"
        },
        "totalDeviceMinutes": {
          "description": "The number of minutes of device time the test has been runnign",
          "type": "number"
        }
      }
    },
    "TestSeries": {
      "title": "Test Series",
      "description": "Summary of a single test series",
      "required": [
        "slug",
        "name"
      ],
      "type": "object",
      "properties": {
        "slug": {
          "description": "Unique, human-readable identifier of the test series",
          "type": "string"
        },
        "name": {
          "description": "Name of the test series",
          "type": "string"
        },
        "mostRecentActivity": {
          "format": "dateTime",
          "description": "Date of the latest test run that used this test series",
          "type": "string"
        },
        "testRuns": {
          "description": "Most recent test runs",
          "type": "array",
          "items": {
            "title": "Test Run Summary",
            "description": "Most important information about a test run.",
            "type": "object",
            "properties": {
              "date": {
                "format": "dateTime",
                "description": "Date of the test run.",
                "type": "string"
              },
              "statusDescription": {
                "description": "Human-readable status of the test run.",
                "type": "string"
              },
              "failed": {
                "description": "Number of failed tests",
                "type": "number"
              },
              "passed": {
                "description": "Number of passed tests",
                "type": "number"
              },
              "completed": {
                "description": "Tells whether the test run has completed",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "TestSeriesName": {
      "title": "Name of the test series",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the new test series",
          "type": "string"
        }
      }
    },
    "TestRunSummary": {
      "title": "Test Run Summary",
      "description": "Most important information about a test run.",
      "type": "object",
      "properties": {
        "date": {
          "format": "dateTime",
          "description": "Date of the test run.",
          "type": "string"
        },
        "statusDescription": {
          "description": "Human-readable status of the test run.",
          "type": "string"
        },
        "failed": {
          "description": "Number of failed tests",
          "type": "number"
        },
        "passed": {
          "description": "Number of passed tests",
          "type": "number"
        },
        "completed": {
          "description": "Tells whether the test run has completed",
          "type": "boolean"
        }
      }
    },
    "DeviceList": {
      "title": "Device List",
      "description": "A list of device IDs",
      "required": [
        "devices"
      ],
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeviceSelection": {
      "title": "Device Selection",
      "description": "Short ID for a list of device IDs",
      "required": [
        "shortId"
      ],
      "type": "object",
      "properties": {
        "shortId": {
          "description": "Identifier of the device selection",
          "type": "string"
        }
      }
    },
    "DeviceSetUpdate": {
      "title": "Device Set update information",
      "description": "The name of the device set and the list of device IDs",
      "required": [
        "devices",
        "name"
      ],
      "properties": {
        "devices": {
          "description": "List of device IDs",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the device set",
          "type": "string"
        }
      }
    },
    "DeviceSet": {
      "title": "Device Set",
      "description": "The name and devices of the device set",
      "required": [
        "id",
        "name",
        "owner",
        "deviceConfigurations"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the device set",
          "type": "string"
        },
        "manufacturerCount": {
          "description": "The number of manufacturers in the device set's device selection",
          "type": "number"
        },
        "name": {
          "description": "Name of the device set",
          "type": "string"
        },
        "slug": {
          "description": "Slug of the device set",
          "type": "string"
        },
        "owner": {
          "title": "Device Set Owner",
          "description": "The owner of a device set",
          "required": [
            "type",
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of account",
              "type": "string"
            },
            "id": {
              "description": "Account ID",
              "type": "string"
            },
            "displayName": {
              "description": "Display name of the account",
              "type": "string"
            },
            "name": {
              "description": "Name of the account",
              "type": "string"
            }
          }
        },
        "osVersionCount": {
          "description": "The number of os versions in the device set's device selection",
          "type": "number"
        },
        "deviceConfigurations": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "format": "uuid",
                "description": "The unique id of the device configuration",
                "type": "string"
              },
              "image": {
                "properties": {
                  "thumb": {
                    "type": "string"
                  }
                }
              },
              "model": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "manufacturer": {
                    "type": "string"
                  },
                  "releaseDate": {
                    "type": "string"
                  },
                  "formFactor": {
                    "type": "string"
                  }
                }
              },
              "os": {
                "type": "string"
              },
              "osName": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DeviceSetOwner": {
      "title": "Device Set Owner",
      "description": "The owner of a device set",
      "required": [
        "type",
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of account",
          "type": "string"
        },
        "id": {
          "description": "Account ID",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the account",
          "type": "string"
        },
        "name": {
          "description": "Name of the account",
          "type": "string"
        }
      }
    },
    "Subscription": {
      "title": "Subscription",
      "description": "Subscription information",
      "type": "object",
      "properties": {
        "startsAt": {
          "format": "dateTime",
          "description": "The date the subscription began",
          "type": "string"
        },
        "endsAt": {
          "format": "dateTime",
          "description": "The date the subscription will end or ended",
          "type": "string"
        },
        "daysLeft": {
          "description": "The number of days left in the subscription",
          "type": "number"
        },
        "tier": {
          "title": "Subscription Tier",
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the tier",
              "type": "string"
            }
          }
        },
        "active": {
          "description": "Is the subscription currently active?",
          "type": "boolean"
        },
        "id": {
          "format": "uuid",
          "description": "Id of the subscription",
          "type": "string"
        }
      }
    },
    "Tier": {
      "title": "Subscription Tier",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the tier",
          "type": "string"
        }
      }
    },
    "TestReport": {
      "required": [
        "app_upload_id",
        "date",
        "testType",
        "platform",
        "stats",
        "id",
        "schema_version",
        "revision",
        "features",
        "finished_device_snapshots",
        "device_logs",
        "date_finished"
      ],
      "properties": {
        "app_upload_id": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "testType": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "stats": {
          "required": [
            "os",
            "devices",
            "filesize",
            "totalDeviceMinutes",
            "devices_not_runned",
            "failed",
            "skipped",
            "passed",
            "total",
            "devices_finished",
            "devices_failed",
            "devices_skipped",
            "step_count"
          ],
          "type": "object",
          "properties": {
            "os": {
              "type": "number"
            },
            "devices": {
              "type": "number"
            },
            "filesize": {
              "type": "number"
            },
            "totalDeviceMinutes": {
              "type": "number"
            },
            "devices_not_runned": {
              "type": "number"
            },
            "failed": {
              "type": "number"
            },
            "skipped": {
              "type": "number"
            },
            "passed": {
              "type": "number"
            },
            "total": {
              "type": "number"
            },
            "devices_finished": {
              "type": "number"
            },
            "devices_failed": {
              "type": "number"
            },
            "devices_skipped": {
              "type": "number"
            },
            "step_count": {
              "type": "number"
            },
            "artifacts": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "id": {
          "type": "string"
        },
        "schema_version": {
          "type": "number"
        },
        "revision": {
          "type": "number"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tests": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "testName": {
                      "type": "string"
                    },
                    "runs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "type": "number"
                          },
                          "steps": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "stepName": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "stepExecutions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "device_snapshot_id": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      },
                                      "timestamp": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                },
                                "failed": {
                                  "type": "number"
                                },
                                "skipped": {
                                  "type": "number"
                                },
                                "step_report_url": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "failed": {
                            "type": "number"
                          },
                          "skipped": {
                            "type": "number"
                          },
                          "report_url": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "peakMemory": {
                      "type": "number"
                    },
                    "peakDuration": {
                      "type": "number"
                    }
                  }
                }
              },
              "failed": {
                "type": "number"
              },
              "skipped": {
                "type": "number"
              },
              "peakMemory": {
                "type": "number"
              },
              "peakDuration": {
                "type": "number"
              }
            }
          }
        },
        "finished_device_snapshots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "device_logs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "device_snapshot_id": {
                "type": "string"
              },
              "device_log": {
                "type": "string"
              },
              "test_log": {
                "type": "string"
              },
              "appium_log": {
                "type": "string"
              }
            }
          }
        },
        "date_finished": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "snapshot_fatal_errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "device_snapshot_id": {
                "type": "string"
              },
              "error_message": {
                "type": "string"
              },
              "error_title": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "StepReport": {
      "required": [
        "finishedSnapshots",
        "deviceScreenshots"
      ],
      "properties": {
        "finishedSnapshots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deviceScreenshots": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "device_snapshot_id": {
                "type": "string"
              },
              "stacktrace": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "crash_data": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "screenshot": {
                "required": [
                  "urls",
                  "rotation",
                  "landscape"
                ],
                "type": "object",
                "properties": {
                  "urls": {
                    "required": [
                      "original",
                      "small",
                      "medium",
                      "large"
                    ],
                    "type": "object",
                    "properties": {
                      "original": {
                        "type": "string"
                      },
                      "small": {
                        "type": "string"
                      },
                      "medium": {
                        "type": "string"
                      },
                      "large": {
                        "type": "string"
                      }
                    }
                  },
                  "rotation": {
                    "type": "number"
                  },
                  "landscape": {
                    "type": "boolean"
                  }
                }
              },
              "log_file": {
                "type": "string"
              },
              "appium_log_file": {
                "type": "string"
              },
              "raw_crash_data": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "TestCloudErrorDetails": {
      "title": "Test Cloud Error Details",
      "description": "Details of a failed operation",
      "required": [
        "status",
        "message"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the operation",
          "type": "string"
        },
        "message": {
          "description": "Human-readable message that describes the error",
          "type": "string"
        }
      }
    },
    "TestCloudFileHashDeprecated": {
      "title": "Test Cloud File Hash",
      "description": "Hash, type, path and byte range of a file that is required in test run",
      "required": [
        "file_type",
        "checksum",
        "relative_path"
      ],
      "type": "object",
      "properties": {
        "file_type": {
          "description": "Type of the file",
          "enum": [
            "dsym-file",
            "app-file",
            "test-file"
          ],
          "type": "string"
        },
        "checksum": {
          "description": "SHA256 hash of the file",
          "type": "string"
        },
        "relative_path": {
          "description": "Relative path of the file",
          "type": "string"
        },
        "byte_range": {
          "description": "Range of bytes required to verify ownership of the file",
          "type": "string"
        }
      }
    },
    "TestCloudFileHash": {
      "title": "Test Cloud File Hash",
      "description": "Hash, type, path and byte range of a file that is required in test run",
      "required": [
        "fileType",
        "checksum",
        "relativePath"
      ],
      "type": "object",
      "properties": {
        "fileType": {
          "description": "Type of the file",
          "enum": [
            "dsym-file",
            "app-file",
            "test-file"
          ],
          "type": "string"
        },
        "checksum": {
          "description": "SHA256 hash of the file",
          "type": "string"
        },
        "relativePath": {
          "description": "Relative path of the file",
          "type": "string"
        }
      }
    },
    "TestCloudFileHashResponse": {
      "title": "Test Cloud File Hash Response",
      "description": "Response message for single uploaded file hash",
      "required": [
        "fileType",
        "checksum",
        "uploadStatus"
      ],
      "type": "object",
      "properties": {
        "fileType": {
          "description": "Type of the file",
          "enum": [
            "dsym-file",
            "app-file",
            "test-file"
          ],
          "type": "string"
        },
        "checksum": {
          "description": "SHA256 hash of the file",
          "type": "string"
        },
        "relativePath": {
          "description": "Relative path of the file",
          "type": "string"
        },
        "uploadStatus": {
          "title": "Test Cloud Hash Upload Status",
          "description": "Status of the upload",
          "required": [
            "statusCode"
          ],
          "type": "object",
          "properties": {
            "statusCode": {
              "description": "HTTP status code that represent result of upload",
              "type": "number"
            },
            "location": {
              "description": "URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412",
              "type": "string"
            }
          }
        }
      }
    },
    "TestCloudHashUploadStatus": {
      "title": "Test Cloud Hash Upload Status",
      "description": "Result of uploading a single file hash",
      "required": [
        "statusCode"
      ],
      "type": "object",
      "properties": {
        "statusCode": {
          "description": "HTTP status code that represent result of upload",
          "type": "number"
        },
        "location": {
          "description": "URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412",
          "type": "string"
        }
      }
    },
    "TestCloudStartTestRunOptions": {
      "title": "Test Cloud Start Test Run Options",
      "description": "Options required to start the test run",
      "required": [
        "test_framework",
        "device_selection"
      ],
      "type": "object",
      "properties": {
        "test_framework": {
          "description": "Test framework used by tests.",
          "type": "string"
        },
        "device_selection": {
          "description": "Device selection string.",
          "type": "string"
        },
        "language": {
          "description": "Language that should be used to run tests.",
          "type": "string"
        },
        "locale": {
          "description": "Locale that should be used to run tests.",
          "type": "string"
        },
        "test_series": {
          "description": "Name of the test series.",
          "type": "string"
        },
        "test_parameters": {
          "description": "A JSON dictionary with additional test parameters",
          "type": "object"
        }
      }
    },
    "TestCloudStartTestRunResult": {
      "title": "Test Cloud Test Run Start Result",
      "description": "Result of starting a test run",
      "type": "object",
      "properties": {
        "accepted_devices": {
          "description": "List with names of accepted devices",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rejected_devices": {
          "description": "List with names and descriptions of rejected devices",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestRunState": {
      "title": "Test Run State",
      "description": "Current status of a test run",
      "type": "object",
      "properties": {
        "message": {
          "description": "Multi-line message that describes the status",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wait_time": {
          "description": "Time (in seconds) that the client should wait for before checking the status again",
          "type": "integer"
        },
        "exit_code": {
          "description": "The exit code that the client should use when exiting. Used for indicating status to the caller of the client.\n0: test run completes with no failing tests\n1: test run completes with at least one failing test\n2: test run failed to complete. Status for test run is unknown\n",
          "type": "integer"
        }
      }
    },
    "PerformanceReport": {
      "title": "Performance Report",
      "description": "Report data for a single test (a.k.a. scenario)",
      "properties": {
        "device_snapshot_id": {
          "type": "string"
        },
        "performance_data": {
          "required": [
            "steps",
            "elapsed-secs-end",
            "elapsed-secs-start",
            "elapsed-secs",
            "id"
          ],
          "type": "object",
          "properties": {
            "steps": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "avg-cpu": {
                    "type": "number"
                  },
                  "avg-mem": {
                    "type": "number"
                  },
                  "samples": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cpu": {
                          "type": "number"
                        },
                        "mem": {
                          "type": "number"
                        },
                        "elapsed-secs": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "elapsed-secs-end": {
                    "type": "number"
                  },
                  "elapsed-secs-start": {
                    "type": "number"
                  },
                  "elapsed-secs": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  }
                }
              }
            },
            "elapsed-secs-end": {
              "type": "number"
            },
            "elapsed-secs-start": {
              "type": "number"
            },
            "elapsed-secs": {
              "type": "number"
            },
            "id": {
              "type": "string"
            }
          }
        },
        "video": {
          "required": [
            "video_metadata",
            "video_url"
          ],
          "properties": {
            "video_metadata": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "millis": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "video_url": {
              "type": "string"
            }
          }
        }
      }
    },
    "SubmitDsrOperationRequest": {
      "type": "object",
      "properties": {
        "request": {
          "enum": [
            "Delete",
            "Purge",
            "UndoDelete",
            "Export"
          ],
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "operationId": {
          "description": "The DSR operation ID provided by the GDPR coordinator. Used for tracking only.",
          "type": "string"
        },
        "requestId": {
          "description": "Request ID provided by the GDPR coordinator. Used for tracking.",
          "type": "string"
        }
      }
    },
    "SubmitDsrOperationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the DSR operation",
          "enum": [
            "NotStarted",
            "InProgress",
            "Completed",
            "Failure"
          ],
          "type": "string"
        }
      }
    },
    "CreateGdprTestData": {
      "type": "object",
      "properties": {
        "appId": {
          "format": "uuid",
          "type": "string"
        },
        "accountId": {
          "format": "uuid",
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        }
      }
    },
    "TestGDPRAccount": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TestGDPRFeatureFlag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "target_id": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TestGDPRResourceList": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "rel": {
                "type": "string"
              },
              "path": {
                "format": "URL",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "TestGDPRApp": {
      "type": "object",
      "properties": {
        "hash_files_url": {
          "type": "string"
        }
      }
    },
    "TestGDPRHashFile": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "filename": {
          "type": "string"
        }
      }
    },
    "TestGDPRTestRun": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "app_hash_file_id": {
          "format": "uuid",
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "dsym_hash_file_id": {
          "format": "uuid",
          "type": "string"
        },
        "app_hash_file_url": {
          "type": "string"
        },
        "dsym_hash_file_url": {
          "type": "string"
        },
        "app_icon_url": {
          "type": "string"
        }
      }
    },
    "TestGDPRPipelineTest": {
      "type": "object",
      "properties": {
        "app_upload_id": {
          "format": "uuid",
          "type": "string"
        },
        "test_parameters": {
          "type": "object"
        }
      }
    },
    "TestGDPRFileSetFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "hash_file_id": {
          "format": "uuid",
          "type": "string"
        },
        "app_upload_id": {
          "format": "uuid",
          "type": "string"
        },
        "hash_file_url": {
          "type": "string"
        }
      }
    },
    "CodePushUploadedRelease": {
      "required": [
        "release_upload",
        "target_binary_version"
      ],
      "properties": {
        "release_upload": {
          "description": "The upload metadata from the release initialization step.",
          "required": [
            "id",
            "upload_domain",
            "token"
          ],
          "properties": {
            "id": {
              "format": "uuid",
              "description": "The ID for the newly created upload. It is going to be required later in the process.",
              "type": "string"
            },
            "upload_domain": {
              "description": "The URL domain used to upload the release.",
              "type": "string"
            },
            "token": {
              "description": "The URL encoded token used for upload permissions.",
              "type": "string"
            }
          }
        },
        "target_binary_version": {
          "description": "the binary version of the application",
          "type": "string"
        },
        "deployment_name": {
          "description": "This specifies which deployment you want to release the update to. Default is Staging.",
          "type": "string"
        },
        "description": {
          "description": "This provides an optional \"change log\" for the deployment.",
          "maximum": 10000,
          "type": "string"
        },
        "disabled": {
          "description": "This specifies whether an update should be downloadable by end users or not.",
          "type": "boolean"
        },
        "mandatory": {
          "description": "This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).",
          "type": "boolean"
        },
        "no_duplicate_release_error": {
          "description": "This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.",
          "type": "boolean"
        },
        "rollout": {
          "description": "This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.",
          "type": "integer"
        }
      }
    },
    "CodePushReleaseUpload": {
      "required": [
        "id",
        "upload_domain",
        "token"
      ],
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The ID for the newly created upload. It is going to be required later in the process.",
          "type": "string"
        },
        "upload_domain": {
          "description": "The URL domain used to upload the release.",
          "type": "string"
        },
        "token": {
          "description": "The URL encoded token used for upload permissions.",
          "type": "string"
        }
      }
    },
    "Deployment": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "latest_release": {
          "allOf": [
            {
              "properties": {
                "target_binary_range": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "is_disabled": {
                  "type": "boolean"
                },
                "is_mandatory": {
                  "type": "boolean"
                },
                "rollout": {
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            {
              "properties": {
                "label": {
                  "type": "string"
                },
                "package_hash": {
                  "type": "string"
                },
                "blob_url": {
                  "type": "string"
                },
                "diff_package_map": {
                  "type": "object",
                  "additionalProperties": {
                    "required": [
                      "size",
                      "url"
                    ],
                    "type": "object",
                    "properties": {
                      "size": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string"
                      }
                    }
                  }
                },
                "original_deployment": {
                  "description": "Set on 'Promote'",
                  "type": "string"
                },
                "original_label": {
                  "description": "Set on 'Promote' and 'Rollback'",
                  "type": "string"
                },
                "released_by": {
                  "type": "string"
                },
                "release_method": {
                  "description": "The release method is unknown if unspecified",
                  "enum": [
                    "Upload",
                    "Promote",
                    "Rollback"
                  ],
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "upload_time": {
                  "type": "integer"
                }
              }
            }
          ]
        }
      }
    },
    "DeploymentInternal": {
      "allOf": [
        {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "latest_release": {
              "allOf": [
                {
                  "properties": {
                    "target_binary_range": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_disabled": {
                      "type": "boolean"
                    },
                    "is_mandatory": {
                      "type": "boolean"
                    },
                    "rollout": {
                      "maximum": 100,
                      "minimum": 1,
                      "type": "integer"
                    }
                  }
                },
                {
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "package_hash": {
                      "type": "string"
                    },
                    "blob_url": {
                      "type": "string"
                    },
                    "diff_package_map": {
                      "type": "object",
                      "additionalProperties": {
                        "required": [
                          "size",
                          "url"
                        ],
                        "type": "object",
                        "properties": {
                          "size": {
                            "type": "number"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "original_deployment": {
                      "description": "Set on 'Promote'",
                      "type": "string"
                    },
                    "original_label": {
                      "description": "Set on 'Promote' and 'Rollback'",
                      "type": "string"
                    },
                    "released_by": {
                      "type": "string"
                    },
                    "release_method": {
                      "description": "The release method is unknown if unspecified",
                      "enum": [
                        "Upload",
                        "Promote",
                        "Rollback"
                      ],
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "upload_time": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          }
        }
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "DeploymentModification": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 1000,
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "CodePushReleaseLabel": {
      "properties": {
        "label": {
          "type": "string"
        }
      }
    },
    "BlobInfo": {
      "required": [
        "size",
        "url"
      ],
      "type": "object",
      "properties": {
        "size": {
          "type": "number"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "PackageHashToBlobInfoMap": {
      "type": "object",
      "additionalProperties": {
        "required": [
          "size",
          "url"
        ],
        "type": "object",
        "properties": {
          "size": {
            "type": "number"
          },
          "url": {
            "type": "string"
          }
        }
      }
    },
    "CodePushReleaseInfo": {
      "properties": {
        "target_binary_range": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "is_disabled": {
          "type": "boolean"
        },
        "is_mandatory": {
          "type": "boolean"
        },
        "rollout": {
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "LegacyCodePushReleaseInfo": {
      "properties": {
        "appVersion": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isDisabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "rollout": {
          "type": "integer"
        }
      }
    },
    "CodePushRelease": {
      "allOf": [
        {
          "properties": {
            "target_binary_range": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            },
            "is_mandatory": {
              "type": "boolean"
            },
            "rollout": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        },
        {
          "properties": {
            "label": {
              "type": "string"
            },
            "package_hash": {
              "type": "string"
            },
            "blob_url": {
              "type": "string"
            },
            "diff_package_map": {
              "type": "object",
              "additionalProperties": {
                "required": [
                  "size",
                  "url"
                ],
                "type": "object",
                "properties": {
                  "size": {
                    "type": "number"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            },
            "original_deployment": {
              "description": "Set on 'Promote'",
              "type": "string"
            },
            "original_label": {
              "description": "Set on 'Promote' and 'Rollback'",
              "type": "string"
            },
            "released_by": {
              "type": "string"
            },
            "release_method": {
              "description": "The release method is unknown if unspecified",
              "enum": [
                "Upload",
                "Promote",
                "Rollback"
              ],
              "type": "string"
            },
            "size": {
              "type": "number"
            },
            "upload_time": {
              "type": "integer"
            }
          }
        }
      ]
    },
    "CodePushReleaseModification": {
      "allOf": [
        {
          "properties": {
            "target_binary_range": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            },
            "is_mandatory": {
              "type": "boolean"
            },
            "rollout": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        }
      ]
    },
    "CodePushReleasePromote": {
      "allOf": [
        {
          "properties": {
            "target_binary_range": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            },
            "is_mandatory": {
              "type": "boolean"
            },
            "rollout": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        },
        {
          "properties": {
            "label": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CodePushReleaseMetric": {
      "required": [
        "label",
        "active"
      ],
      "properties": {
        "label": {
          "type": "string"
        },
        "active": {
          "type": "integer"
        },
        "downloaded": {
          "type": "integer"
        },
        "failed": {
          "type": "integer"
        },
        "installed": {
          "type": "integer"
        }
      }
    },
    "CodePushStatusMetricMetadata": {
      "required": [
        "deployment_key"
      ],
      "properties": {
        "deployment_key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "app_version": {
          "type": "string"
        },
        "previous_deployment_key": {
          "type": "string"
        },
        "previous_label_or_app_version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "client_unique_id": {
          "type": "string"
        }
      }
    },
    "LegacyCodePushStatusMetricMetadata": {
      "properties": {
        "deploymentKey": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "previousDeploymentKey": {
          "type": "string"
        },
        "previousLabelOrAppVersion": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "clientUniqueId": {
          "type": "string"
        }
      }
    },
    "UpdateCheckResponse": {
      "required": [
        "update_info"
      ],
      "properties": {
        "update_info": {
          "required": [
            "is_available"
          ],
          "allOf": [
            {
              "properties": {
                "target_binary_range": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "is_disabled": {
                  "type": "boolean"
                },
                "is_mandatory": {
                  "type": "boolean"
                },
                "rollout": {
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                }
              }
            },
            {
              "properties": {
                "download_url": {
                  "type": "string"
                },
                "is_available": {
                  "type": "boolean"
                },
                "package_size": {
                  "type": "number"
                },
                "should_run_binary_version": {
                  "type": "boolean"
                },
                "update_app_version": {
                  "type": "boolean"
                },
                "package_hash": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              }
            }
          ]
        }
      }
    },
    "LegacyUpdateCheckResponse": {
      "required": [
        "updateInfo"
      ],
      "properties": {
        "updateInfo": {
          "required": [
            "isAvailable"
          ],
          "allOf": [
            {
              "properties": {
                "appVersion": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "isDisabled": {
                  "type": "boolean"
                },
                "isMandatory": {
                  "type": "boolean"
                },
                "rollout": {
                  "type": "integer"
                }
              }
            },
            {
              "properties": {
                "downloadURL": {
                  "type": "string"
                },
                "isAvailable": {
                  "type": "boolean"
                },
                "packageSize": {
                  "type": "number"
                },
                "shouldRunBinaryVersion": {
                  "type": "boolean"
                },
                "updateAppVersion": {
                  "type": "boolean"
                },
                "packageHash": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              }
            }
          ]
        }
      }
    },
    "UpdateInfoData": {
      "required": [
        "is_available"
      ],
      "allOf": [
        {
          "properties": {
            "target_binary_range": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "is_disabled": {
              "type": "boolean"
            },
            "is_mandatory": {
              "type": "boolean"
            },
            "rollout": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        },
        {
          "properties": {
            "download_url": {
              "type": "string"
            },
            "is_available": {
              "type": "boolean"
            },
            "package_size": {
              "type": "number"
            },
            "should_run_binary_version": {
              "type": "boolean"
            },
            "update_app_version": {
              "type": "boolean"
            },
            "package_hash": {
              "type": "string"
            },
            "label": {
              "type": "string"
            }
          }
        }
      ]
    },
    "LegacyUpdateInfoData": {
      "required": [
        "isAvailable"
      ],
      "allOf": [
        {
          "properties": {
            "appVersion": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "isDisabled": {
              "type": "boolean"
            },
            "isMandatory": {
              "type": "boolean"
            },
            "rollout": {
              "type": "integer"
            }
          }
        },
        {
          "properties": {
            "downloadURL": {
              "type": "string"
            },
            "isAvailable": {
              "type": "boolean"
            },
            "packageSize": {
              "type": "number"
            },
            "shouldRunBinaryVersion": {
              "type": "boolean"
            },
            "updateAppVersion": {
              "type": "boolean"
            },
            "packageHash": {
              "type": "string"
            },
            "label": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AppName": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "AcquisitionStatusSuccessResponse": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "The code indicating the status",
          "type": "string"
        },
        "message": {
          "description": "The message indicating the status",
          "type": "string"
        }
      }
    },
    "GDPRPurgeVerifyRequest": {
      "required": [
        "id",
        "key"
      ],
      "properties": {
        "id": {
          "description": "deployment id",
          "type": "string"
        },
        "key": {
          "description": "deployment key",
          "type": "string"
        }
      }
    },
    "GDPRPurgeVerifyResponse": {
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "description": "indicate whether GDPR purge operation succeeds or not",
          "type": "boolean"
        }
      }
    },
    "LegacyDeploymentsResponse": {
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "required": [
              "name"
            ],
            "properties": {
              "createdTime": {
                "description": "Time at which the deployment was created as a Unix timestamp.",
                "type": "integer"
              },
              "id": {
                "description": "The ID of the deployment (internal use only).",
                "type": "string"
              },
              "key": {
                "description": "Deployment key (aka Deployment Id)",
                "type": "string"
              },
              "name": {
                "description": "Updated deployment name",
                "type": "string"
              },
              "package": {
                "properties": {
                  "appVersion": {
                    "description": "The version of the release",
                    "type": "string"
                  },
                  "isDisabled": {
                    "description": "Flag used to determine if release is disabled",
                    "type": "boolean"
                  },
                  "isMandatory": {
                    "description": "Flag used to determine if release is mandatory",
                    "type": "boolean"
                  },
                  "rollout": {
                    "description": "Percentage (out of 100) that release is deployed to",
                    "type": "integer"
                  },
                  "blobUrl": {
                    "description": "Location (URL) of release package",
                    "type": "string"
                  },
                  "size": {
                    "description": "Size of release package",
                    "type": "integer"
                  },
                  "releaseMethod": {
                    "description": "Method used to deploy release",
                    "type": "string"
                  },
                  "uploadTime": {
                    "description": "Release upload time as epoch Unix timestamp",
                    "type": "integer"
                  },
                  "label": {
                    "description": "Release label (aka release name)",
                    "type": "string"
                  },
                  "releasedByUserId": {
                    "description": "User ID that triggered most recent release",
                    "type": "string"
                  },
                  "manifestBlobUrl": {
                    "description": "The URL location of the package's manifest file.",
                    "type": "string"
                  },
                  "diffPackageMap": {
                    "description": "Object containing URL and size of changed package hashes contained in the release",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "LegacyDeploymentResponse": {
      "properties": {
        "deployment": {
          "type": "object",
          "additionalProperties": {
            "required": [
              "name"
            ],
            "properties": {
              "createdTime": {
                "description": "Time at which the deployment was created as a Unix timestamp.",
                "type": "integer"
              },
              "id": {
                "description": "The ID of the deployment (internal use only).",
                "type": "string"
              },
              "key": {
                "description": "Deployment key (aka Deployment Id)",
                "type": "string"
              },
              "name": {
                "description": "Updated deployment name",
                "type": "string"
              },
              "package": {
                "properties": {
                  "appVersion": {
                    "description": "The version of the release",
                    "type": "string"
                  },
                  "isDisabled": {
                    "description": "Flag used to determine if release is disabled",
                    "type": "boolean"
                  },
                  "isMandatory": {
                    "description": "Flag used to determine if release is mandatory",
                    "type": "boolean"
                  },
                  "rollout": {
                    "description": "Percentage (out of 100) that release is deployed to",
                    "type": "integer"
                  },
                  "blobUrl": {
                    "description": "Location (URL) of release package",
                    "type": "string"
                  },
                  "size": {
                    "description": "Size of release package",
                    "type": "integer"
                  },
                  "releaseMethod": {
                    "description": "Method used to deploy release",
                    "type": "string"
                  },
                  "uploadTime": {
                    "description": "Release upload time as epoch Unix timestamp",
                    "type": "integer"
                  },
                  "label": {
                    "description": "Release label (aka release name)",
                    "type": "string"
                  },
                  "releasedByUserId": {
                    "description": "User ID that triggered most recent release",
                    "type": "string"
                  },
                  "manifestBlobUrl": {
                    "description": "The URL location of the package's manifest file.",
                    "type": "string"
                  },
                  "diffPackageMap": {
                    "description": "Object containing URL and size of changed package hashes contained in the release",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "LegacyDeployment": {
      "required": [
        "name"
      ],
      "properties": {
        "createdTime": {
          "description": "Time at which the deployment was created as a Unix timestamp.",
          "type": "integer"
        },
        "id": {
          "description": "The ID of the deployment (internal use only).",
          "type": "string"
        },
        "key": {
          "description": "Deployment key (aka Deployment Id)",
          "type": "string"
        },
        "name": {
          "description": "Updated deployment name",
          "type": "string"
        },
        "package": {
          "properties": {
            "appVersion": {
              "description": "The version of the release",
              "type": "string"
            },
            "isDisabled": {
              "description": "Flag used to determine if release is disabled",
              "type": "boolean"
            },
            "isMandatory": {
              "description": "Flag used to determine if release is mandatory",
              "type": "boolean"
            },
            "rollout": {
              "description": "Percentage (out of 100) that release is deployed to",
              "type": "integer"
            },
            "blobUrl": {
              "description": "Location (URL) of release package",
              "type": "string"
            },
            "size": {
              "description": "Size of release package",
              "type": "integer"
            },
            "releaseMethod": {
              "description": "Method used to deploy release",
              "type": "string"
            },
            "uploadTime": {
              "description": "Release upload time as epoch Unix timestamp",
              "type": "integer"
            },
            "label": {
              "description": "Release label (aka release name)",
              "type": "string"
            },
            "releasedByUserId": {
              "description": "User ID that triggered most recent release",
              "type": "string"
            },
            "manifestBlobUrl": {
              "description": "The URL location of the package's manifest file.",
              "type": "string"
            },
            "diffPackageMap": {
              "description": "Object containing URL and size of changed package hashes contained in the release",
              "type": "object"
            }
          }
        }
      }
    },
    "LegacyDeploymentHistoryResponse": {
      "properties": {
        "history": {
          "description": "Array containing the deployment's package history.",
          "type": "array",
          "items": {
            "description": "Information about a specific release.",
            "properties": {
              "allOf": {
                "properties": {
                  "appVersion": {
                    "description": "The version of the release",
                    "type": "string"
                  },
                  "isDisabled": {
                    "description": "Flag used to determine if release is disabled",
                    "type": "boolean"
                  },
                  "isMandatory": {
                    "description": "Flag used to determine if release is mandatory",
                    "type": "boolean"
                  },
                  "rollout": {
                    "description": "Percentage (out of 100) that release is deployed to",
                    "type": "integer"
                  },
                  "blobUrl": {
                    "description": "Location (URL) of release package",
                    "type": "string"
                  },
                  "size": {
                    "description": "Size of release package",
                    "type": "integer"
                  },
                  "releaseMethod": {
                    "description": "Method used to deploy release",
                    "type": "string"
                  },
                  "uploadTime": {
                    "description": "Release upload time as epoch Unix timestamp",
                    "type": "integer"
                  },
                  "label": {
                    "description": "Release label (aka release name)",
                    "type": "string"
                  },
                  "releasedByUserId": {
                    "description": "User ID that triggered most recent release",
                    "type": "string"
                  },
                  "manifestBlobUrl": {
                    "description": "The URL location of the package's manifest file.",
                    "type": "string"
                  },
                  "diffPackageMap": {
                    "description": "Object containing URL and size of changed package hashes contained in the release",
                    "type": "object"
                  }
                }
              },
              "description": {
                "description": "The description of the release.",
                "type": "string"
              },
              "originalDeployment": {
                "description": "The original deployment of the release, if it's ever been promoted.",
                "type": "string"
              },
              "originalLabel": {
                "description": "The original label of the release, if it's ever been updated.",
                "type": "string"
              },
              "packageHash": {
                "description": "The package's hash value (internal use).",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "LegacyDeploymentHistory": {
      "description": "Information about a specific release.",
      "properties": {
        "allOf": {
          "properties": {
            "appVersion": {
              "description": "The version of the release",
              "type": "string"
            },
            "isDisabled": {
              "description": "Flag used to determine if release is disabled",
              "type": "boolean"
            },
            "isMandatory": {
              "description": "Flag used to determine if release is mandatory",
              "type": "boolean"
            },
            "rollout": {
              "description": "Percentage (out of 100) that release is deployed to",
              "type": "integer"
            },
            "blobUrl": {
              "description": "Location (URL) of release package",
              "type": "string"
            },
            "size": {
              "description": "Size of release package",
              "type": "integer"
            },
            "releaseMethod": {
              "description": "Method used to deploy release",
              "type": "string"
            },
            "uploadTime": {
              "description": "Release upload time as epoch Unix timestamp",
              "type": "integer"
            },
            "label": {
              "description": "Release label (aka release name)",
              "type": "string"
            },
            "releasedByUserId": {
              "description": "User ID that triggered most recent release",
              "type": "string"
            },
            "manifestBlobUrl": {
              "description": "The URL location of the package's manifest file.",
              "type": "string"
            },
            "diffPackageMap": {
              "description": "Object containing URL and size of changed package hashes contained in the release",
              "type": "object"
            }
          }
        },
        "description": {
          "description": "The description of the release.",
          "type": "string"
        },
        "originalDeployment": {
          "description": "The original deployment of the release, if it's ever been promoted.",
          "type": "string"
        },
        "originalLabel": {
          "description": "The original label of the release, if it's ever been updated.",
          "type": "string"
        },
        "packageHash": {
          "description": "The package's hash value (internal use).",
          "type": "string"
        }
      }
    },
    "LegacyDeploymentMetricsResponse": {
      "properties": {
        "metrics": {
          "description": "Object containing a property named after each release label, which contains an object that contains that release's metrics.",
          "type": "object",
          "additionalProperties": {
            "required": [
              "active"
            ],
            "properties": {
              "active": {
                "description": "The number of devices that have this release installed currently",
                "type": "integer"
              },
              "installed": {
                "description": "The number of times this release has been installed on a device",
                "type": "integer"
              },
              "downloaded": {
                "description": "The number of times this release has been downloaded",
                "type": "integer"
              },
              "failed": {
                "description": "The number of times this release has failed to be installed on a device",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "LegacyDeploymentMetric": {
      "required": [
        "active"
      ],
      "properties": {
        "active": {
          "description": "The number of devices that have this release installed currently",
          "type": "integer"
        },
        "installed": {
          "description": "The number of times this release has been installed on a device",
          "type": "integer"
        },
        "downloaded": {
          "description": "The number of times this release has been downloaded",
          "type": "integer"
        },
        "failed": {
          "description": "The number of times this release has failed to be installed on a device",
          "type": "integer"
        }
      }
    },
    "LegacyCodePushRelease": {
      "properties": {
        "appVersion": {
          "description": "The version of the release",
          "type": "string"
        },
        "isDisabled": {
          "description": "Flag used to determine if release is disabled",
          "type": "boolean"
        },
        "isMandatory": {
          "description": "Flag used to determine if release is mandatory",
          "type": "boolean"
        },
        "rollout": {
          "description": "Percentage (out of 100) that release is deployed to",
          "type": "integer"
        },
        "blobUrl": {
          "description": "Location (URL) of release package",
          "type": "string"
        },
        "size": {
          "description": "Size of release package",
          "type": "integer"
        },
        "releaseMethod": {
          "description": "Method used to deploy release",
          "type": "string"
        },
        "uploadTime": {
          "description": "Release upload time as epoch Unix timestamp",
          "type": "integer"
        },
        "label": {
          "description": "Release label (aka release name)",
          "type": "string"
        },
        "releasedByUserId": {
          "description": "User ID that triggered most recent release",
          "type": "string"
        },
        "manifestBlobUrl": {
          "description": "The URL location of the package's manifest file.",
          "type": "string"
        },
        "diffPackageMap": {
          "description": "Object containing URL and size of changed package hashes contained in the release",
          "type": "object"
        }
      }
    },
    "LegacyCodePushReleaseModification": {
      "required": [
        "packageInfo"
      ],
      "properties": {
        "packageInfo": {
          "description": "The release package information",
          "type": "object"
        }
      }
    },
    "LegacyCodePushReleaseResponse": {
      "required": [
        "package"
      ],
      "properties": {
        "package": {
          "properties": {
            "appVersion": {
              "description": "The version of the release",
              "type": "string"
            },
            "isDisabled": {
              "description": "Flag used to determine if release is disabled",
              "type": "boolean"
            },
            "isMandatory": {
              "description": "Flag used to determine if release is mandatory",
              "type": "boolean"
            },
            "rollout": {
              "description": "Percentage (out of 100) that release is deployed to",
              "type": "integer"
            },
            "blobUrl": {
              "description": "Location (URL) of release package",
              "type": "string"
            },
            "size": {
              "description": "Size of release package",
              "type": "integer"
            },
            "releaseMethod": {
              "description": "Method used to deploy release",
              "type": "string"
            },
            "uploadTime": {
              "description": "Release upload time as epoch Unix timestamp",
              "type": "integer"
            },
            "label": {
              "description": "Release label (aka release name)",
              "type": "string"
            },
            "releasedByUserId": {
              "description": "User ID that triggered most recent release",
              "type": "string"
            },
            "manifestBlobUrl": {
              "description": "The URL location of the package's manifest file.",
              "type": "string"
            },
            "diffPackageMap": {
              "description": "Object containing URL and size of changed package hashes contained in the release",
              "type": "object"
            }
          }
        }
      }
    },
    "LegacyAuthenticationResponse": {
      "properties": {
        "authenticated": {
          "description": "The authentication status of the user.",
          "type": "boolean"
        }
      }
    },
    "LegacyAccountResponse": {
      "properties": {
        "account": {
          "description": "Object containing the account information.",
          "type": "object",
          "additionalProperties": {
            "properties": {
              "name": {
                "description": "The account name of the calling user.",
                "type": "string"
              },
              "email": {
                "description": "The calling user's email.",
                "type": "string"
              },
              "linkedProviders": {
                "description": "Array of linked authentication providers associated with the account.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "LegacyAccount": {
      "properties": {
        "name": {
          "description": "The account name of the calling user.",
          "type": "string"
        },
        "email": {
          "description": "The calling user's email.",
          "type": "string"
        },
        "linkedProviders": {
          "description": "Array of linked authentication providers associated with the account.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LegacyAppListResponse": {
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "properties": {
              "name": {
                "description": "The app name.",
                "type": "string"
              },
              "collaborators": {
                "type": "object",
                "additionalProperties": {
                  "properties": {
                    "isCurrentAccount": {
                      "description": "Is current collaborator the same as current account.",
                      "type": "boolean"
                    },
                    "permission": {
                      "description": "Which permission does current account has.",
                      "type": "string"
                    }
                  }
                }
              },
              "deployments": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "LegacyAppResponse": {
      "properties": {
        "app": {
          "properties": {
            "name": {
              "description": "The app name.",
              "type": "string"
            },
            "collaborators": {
              "type": "object",
              "additionalProperties": {
                "properties": {
                  "isCurrentAccount": {
                    "description": "Is current collaborator the same as current account.",
                    "type": "boolean"
                  },
                  "permission": {
                    "description": "Which permission does current account has.",
                    "type": "string"
                  }
                }
              }
            },
            "deployments": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "LegacyApp": {
      "properties": {
        "name": {
          "description": "The app name.",
          "type": "string"
        },
        "collaborators": {
          "type": "object",
          "additionalProperties": {
            "properties": {
              "isCurrentAccount": {
                "description": "Is current collaborator the same as current account.",
                "type": "boolean"
              },
              "permission": {
                "description": "Which permission does current account has.",
                "type": "string"
              }
            }
          }
        },
        "deployments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LegacyCollaborator": {
      "properties": {
        "isCurrentAccount": {
          "description": "Is current collaborator the same as current account.",
          "type": "boolean"
        },
        "permission": {
          "description": "Which permission does current account has.",
          "type": "string"
        }
      }
    },
    "LegacyCollaborators": {
      "properties": {
        "collaborators": {
          "type": "object",
          "additionalProperties": {
            "properties": {
              "isCurrentAccount": {
                "description": "Is current collaborator the same as current account.",
                "type": "boolean"
              },
              "permission": {
                "description": "Which permission does current account has.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "LegacyCodePushApp": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The app name.",
          "type": "string"
        },
        "os": {
          "description": "The app os.",
          "type": "string"
        },
        "platform": {
          "description": "The app platform.",
          "type": "string"
        },
        "manuallyProvisionDeployments": {
          "description": "Whether the user provided their own deployments. Not currently in use.",
          "type": "boolean"
        }
      }
    },
    "CreateAccessKeyRequest": {
      "properties": {
        "createdBy": {
          "description": "Name of creator current access key",
          "type": "string"
        },
        "friendlyName": {
          "description": "Friendly name of the access key",
          "type": "string"
        },
        "ttl": {
          "description": "Time to live of the access key",
          "type": "number"
        }
      }
    },
    "CreateAccessKeyResponse": {
      "properties": {
        "accessKey": {
          "properties": {
            "name": {
              "description": "Key of access key",
              "type": "string"
            },
            "createdBy": {
              "description": "Account name of creator.",
              "type": "string"
            },
            "description": {
              "description": "Description of access key",
              "type": "string"
            },
            "friendlyName": {
              "description": "Friendly name of access key",
              "type": "string"
            },
            "createdTime": {
              "description": "Created time of access key",
              "type": "number"
            },
            "expires": {
              "description": "Time of expiry of access key",
              "type": "number"
            },
            "id": {
              "description": "Id of accessKey",
              "type": "string"
            },
            "isSession": {
              "description": "Legacy property which indicate if accessKey was created from session",
              "type": "boolean"
            }
          }
        }
      }
    },
    "AccessKey": {
      "properties": {
        "name": {
          "description": "Key of access key",
          "type": "string"
        },
        "createdBy": {
          "description": "Account name of creator.",
          "type": "string"
        },
        "description": {
          "description": "Description of access key",
          "type": "string"
        },
        "friendlyName": {
          "description": "Friendly name of access key",
          "type": "string"
        },
        "createdTime": {
          "description": "Created time of access key",
          "type": "number"
        },
        "expires": {
          "description": "Time of expiry of access key",
          "type": "number"
        },
        "id": {
          "description": "Id of accessKey",
          "type": "string"
        },
        "isSession": {
          "description": "Legacy property which indicate if accessKey was created from session",
          "type": "boolean"
        }
      }
    },
    "AccessKeyListResponse": {
      "properties": {
        "accessKeys": {
          "description": "Array containing the list of existing AccessKeys",
          "type": "array",
          "items": {
            "properties": {
              "name": {
                "description": "Key of access key",
                "type": "string"
              },
              "createdBy": {
                "description": "Account name of creator.",
                "type": "string"
              },
              "description": {
                "description": "Description of access key",
                "type": "string"
              },
              "friendlyName": {
                "description": "Friendly name of access key",
                "type": "string"
              },
              "createdTime": {
                "description": "Created time of access key",
                "type": "number"
              },
              "expires": {
                "description": "Time of expiry of access key",
                "type": "number"
              },
              "id": {
                "description": "Id of accessKey",
                "type": "string"
              },
              "isSession": {
                "description": "Legacy property which indicate if accessKey was created from session",
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "AlertOperationResult": {
      "description": "Generic result for any alerting API operation",
      "required": [
        "request_id"
      ],
      "type": "object",
      "properties": {
        "request_id": {
          "description": "Unique request identifier for tracking",
          "type": "string"
        }
      }
    },
    "AlertWebhook": {
      "description": "Alerting webhook",
      "required": [
        "name",
        "url",
        "event_types"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique id (UUID) of the webhook",
          "type": "string"
        },
        "name": {
          "description": "display name of the webhook",
          "maxLength": 512,
          "type": "string"
        },
        "url": {
          "description": "target url of the webhook",
          "type": "string"
        },
        "enabled": {
          "description": "Allows eanble/disable webhook",
          "type": "boolean"
        },
        "event_types": {
          "description": "Event types enabled for webhook",
          "type": "array",
          "items": {
            "description": "Alerting EventTypes enum",
            "enum": [
              "newCrashGroupCreated",
              "newAppReleased"
            ],
            "type": "string"
          }
        }
      }
    },
    "AlertingEventTypes": {
      "description": "Alerting EventTypes enum",
      "enum": [
        "newCrashGroupCreated",
        "newAppReleased"
      ],
      "type": "string"
    },
    "AlertWebhookListResult": {
      "description": "List of alerting webhooks wrapped as operation result",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "description": "Alerting webhook",
            "required": [
              "name",
              "url",
              "event_types"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "The unique id (UUID) of the webhook",
                "type": "string"
              },
              "name": {
                "description": "display name of the webhook",
                "maxLength": 512,
                "type": "string"
              },
              "url": {
                "description": "target url of the webhook",
                "type": "string"
              },
              "enabled": {
                "description": "Allows eanble/disable webhook",
                "type": "boolean"
              },
              "event_types": {
                "description": "Event types enabled for webhook",
                "type": "array",
                "items": {
                  "description": "Alerting EventTypes enum",
                  "enum": [
                    "newCrashGroupCreated",
                    "newAppReleased"
                  ],
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "AlertWebhookPingResult": {
      "description": "Alerting webhook ping operation result",
      "allOf": [
        {
          "description": "Generic result for any alerting API operation",
          "required": [
            "request_id"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "description": "Unique request identifier for tracking",
              "type": "string"
            }
          }
        },
        {
          "required": [
            "response_status_code"
          ],
          "properties": {
            "response_status_code": {
              "description": "HTTP status code returned in response from calling webhook",
              "type": "integer"
            },
            "response_reason": {
              "description": "Reason returned in response from calling webhook",
              "type": "string"
            }
          }
        }
      ]
    },
    "AlertEmailSettings": {
      "description": "Alerting Email Settings",
      "required": [
        "settings"
      ],
      "type": "object",
      "properties": {
        "settings": {
          "description": "The settings the user has for the app",
          "type": "array",
          "items": {
            "description": "Event Setting",
            "required": [
              "event_type",
              "value"
            ],
            "type": "object",
            "properties": {
              "event_type": {
                "description": "Event Name",
                "enum": [
                  "crash_newCrashGroupCreated"
                ],
                "type": "string"
              },
              "value": {
                "description": "Frequency of event",
                "enum": [
                  "Disabled",
                  "Individual",
                  "Daily",
                  "DailyAndIndividual",
                  "Default"
                ],
                "type": "string"
              },
              "default_value": {
                "description": "Default frequency of event",
                "enum": [
                  "Disabled",
                  "Individual",
                  "Daily",
                  "DailyAndIndividual"
                ],
                "type": "string"
              }
            }
          }
        }
      }
    },
    "AlertUserEmailSettingsResult": {
      "description": "Alerting Default Email Settings of the user",
      "type": "object",
      "allOf": [
        {
          "description": "Generic result for any alerting API operation",
          "required": [
            "request_id"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "description": "Unique request identifier for tracking",
              "type": "string"
            }
          }
        },
        {
          "required": [
            "enabled",
            "settings"
          ],
          "properties": {
            "eTag": {
              "description": "The ETag of the entity",
              "type": "string"
            },
            "enabled": {
              "description": "Allows to forcefully disable emails on app or user level",
              "type": "boolean"
            },
            "userId": {
              "description": "The unique id (UUID) of the user",
              "type": "string"
            },
            "settings": {
              "description": "The settings the user has for the app",
              "type": "array",
              "items": {
                "description": "Event Setting",
                "required": [
                  "event_type",
                  "value"
                ],
                "type": "object",
                "properties": {
                  "event_type": {
                    "description": "Event Name",
                    "enum": [
                      "crash_newCrashGroupCreated"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "description": "Frequency of event",
                    "enum": [
                      "Disabled",
                      "Individual",
                      "Daily",
                      "DailyAndIndividual",
                      "Default"
                    ],
                    "type": "string"
                  },
                  "default_value": {
                    "description": "Default frequency of event",
                    "enum": [
                      "Disabled",
                      "Individual",
                      "Daily",
                      "DailyAndIndividual"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "AlertUserAppEmailSettingsResult": {
      "description": "Alerting Email Settings of the user for a particular app",
      "required": [
        "user_enabled"
      ],
      "type": "object",
      "allOf": [
        {
          "description": "Alerting Default Email Settings of the user",
          "type": "object",
          "allOf": [
            {
              "description": "Generic result for any alerting API operation",
              "required": [
                "request_id"
              ],
              "type": "object",
              "properties": {
                "request_id": {
                  "description": "Unique request identifier for tracking",
                  "type": "string"
                }
              }
            },
            {
              "required": [
                "enabled",
                "settings"
              ],
              "properties": {
                "eTag": {
                  "description": "The ETag of the entity",
                  "type": "string"
                },
                "enabled": {
                  "description": "Allows to forcefully disable emails on app or user level",
                  "type": "boolean"
                },
                "userId": {
                  "description": "The unique id (UUID) of the user",
                  "type": "string"
                },
                "settings": {
                  "description": "The settings the user has for the app",
                  "type": "array",
                  "items": {
                    "description": "Event Setting",
                    "required": [
                      "event_type",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "event_type": {
                        "description": "Event Name",
                        "enum": [
                          "crash_newCrashGroupCreated"
                        ],
                        "type": "string"
                      },
                      "value": {
                        "description": "Frequency of event",
                        "enum": [
                          "Disabled",
                          "Individual",
                          "Daily",
                          "DailyAndIndividual",
                          "Default"
                        ],
                        "type": "string"
                      },
                      "default_value": {
                        "description": "Default frequency of event",
                        "enum": [
                          "Disabled",
                          "Individual",
                          "Daily",
                          "DailyAndIndividual"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "properties": {
            "request_id": {
              "description": "Unique request",
              "type": "string"
            },
            "appId": {
              "description": "Application ID",
              "type": "string"
            },
            "user_enabled": {
              "description": "A flag indicating if settings are enabled at user/global level",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AlertingBugtrackerSettings": {
      "description": "Bugtracker specific settings",
      "required": [
        "type",
        "owner_name"
      ],
      "type": "object",
      "properties": {
        "callback_url": {
          "type": "string"
        },
        "owner_name": {
          "type": "string"
        },
        "type": {
          "description": "type of bugtracker",
          "enum": [
            "github",
            "vsts",
            "jira"
          ],
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "AlertingVstsBugtrackerSettings": {
      "description": "VSTS bugtracker specific settings",
      "required": [
        "vsts_project_id",
        "vsts_project_uri"
      ],
      "type": "object",
      "allOf": [
        {
          "description": "Bugtracker specific settings",
          "required": [
            "type",
            "owner_name"
          ],
          "type": "object",
          "properties": {
            "callback_url": {
              "type": "string"
            },
            "owner_name": {
              "type": "string"
            },
            "type": {
              "description": "type of bugtracker",
              "enum": [
                "github",
                "vsts",
                "jira"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "vsts_project_id": {
          "type": "string"
        },
        "vsts_project_uri": {
          "type": "string"
        },
        "vsts_project_name": {
          "type": "string"
        },
        "vsts_account_name": {
          "type": "string"
        },
        "vsts_area_path": {
          "type": "string"
        },
        "vsts_default_payload": {
          "type": "object"
        }
      },
      "x-ms-discriminator-value": "vsts"
    },
    "AlertingGithubBugtrackerSettings": {
      "description": "Github bugtracker specific settings",
      "required": [
        "github_repo_id",
        "github_repo_name"
      ],
      "type": "object",
      "allOf": [
        {
          "description": "Bugtracker specific settings",
          "required": [
            "type",
            "owner_name"
          ],
          "type": "object",
          "properties": {
            "callback_url": {
              "type": "string"
            },
            "owner_name": {
              "type": "string"
            },
            "type": {
              "description": "type of bugtracker",
              "enum": [
                "github",
                "vsts",
                "jira"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "github_repo_id": {
          "type": "integer"
        },
        "github_repo_name": {
          "type": "string"
        },
        "github_label": {
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "github"
    },
    "AlertingJiraBugtrackerSettings": {
      "description": "Jira bugtracker specific settings",
      "required": [
        "jira_project_id",
        "jira_project_name"
      ],
      "type": "object",
      "allOf": [
        {
          "description": "Bugtracker specific settings",
          "required": [
            "type",
            "owner_name"
          ],
          "type": "object",
          "properties": {
            "callback_url": {
              "type": "string"
            },
            "owner_name": {
              "type": "string"
            },
            "type": {
              "description": "type of bugtracker",
              "enum": [
                "github",
                "vsts",
                "jira"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      ],
      "properties": {
        "jira_project_id": {
          "type": "integer"
        },
        "jira_project_name": {
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "jira"
    },
    "AlertingBugtracker": {
      "description": "Alerting bugtracker resource",
      "properties": {
        "type": {
          "description": "type of bugtracker",
          "enum": [
            "github",
            "vsts",
            "jira"
          ],
          "type": "string"
        },
        "state": {
          "description": "bugtracker state",
          "enum": [
            "enabled",
            "disabled",
            "unauthorized"
          ],
          "type": "string"
        },
        "token_id": {
          "description": "ID of OAuth token",
          "type": "string"
        },
        "event_types": {
          "description": "Event types enabled for bugtracker",
          "type": "array",
          "items": {
            "description": "Alerting EventTypes enum",
            "enum": [
              "newCrashGroupCreated",
              "newAppReleased"
            ],
            "type": "string"
          }
        },
        "settings": {
          "description": "Bugtracker specific settings",
          "required": [
            "type",
            "owner_name"
          ],
          "type": "object",
          "properties": {
            "callback_url": {
              "type": "string"
            },
            "owner_name": {
              "type": "string"
            },
            "type": {
              "description": "type of bugtracker",
              "enum": [
                "github",
                "vsts",
                "jira"
              ],
              "type": "string"
            }
          },
          "discriminator": "type"
        }
      }
    },
    "BugTrackerTokenId": {
      "description": "Contains the token ID for a bug tracker",
      "type": "object",
      "properties": {
        "token_id": {
          "type": "string"
        }
      }
    },
    "AlertBugTrackerReposResult": {
      "description": "List of bug tracker repositories",
      "required": [
        "repositories"
      ],
      "type": "object",
      "properties": {
        "repo_type": {
          "enum": [
            "github",
            "vsts",
            "jira"
          ],
          "type": "string"
        },
        "repositories": {
          "type": "array",
          "items": {
            "description": "Repostiory object",
            "required": [
              "name",
              "url",
              "id"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "private": {
                "type": "boolean"
              },
              "owner": {
                "description": "Repository owner object",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "login": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "AlertBugTrackerRepo": {
      "description": "Repostiory object",
      "required": [
        "name",
        "url",
        "id"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "owner": {
          "description": "Repository owner object",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "login": {
              "type": "string"
            }
          }
        }
      }
    },
    "AlertBugTrackerRepoOwner": {
      "description": "Repository owner object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string"
        }
      }
    },
    "AlertCrashGroupStateChange": {
      "description": "AlertCrashGroup patching parameter",
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "Open",
            "Closed",
            "Ignored"
          ],
          "type": "string"
        }
      }
    },
    "AlertingAccessTokenResponse": {
      "description": "Access token details",
      "required": [
        "access_token_id",
        "external_provider_name",
        "external_user_email",
        "external_account_name"
      ],
      "type": "object",
      "properties": {
        "access_token_id": {
          "description": "ID of the access token",
          "type": "string"
        },
        "external_provider_name": {
          "description": "External provider name",
          "enum": [
            "github",
            "vsts",
            "jira"
          ],
          "type": "string"
        },
        "external_user_email": {
          "description": "The email of external user that used to authenticate aginst the external oauth provider",
          "type": "string"
        },
        "external_account_name": {
          "description": "The account name of external user that used to authenticate against the external oauth provider or basic auth",
          "type": "string"
        }
      }
    },
    "EventSetting": {
      "description": "Event Setting",
      "required": [
        "event_type",
        "value"
      ],
      "type": "object",
      "properties": {
        "event_type": {
          "description": "Event Name",
          "enum": [
            "crash_newCrashGroupCreated"
          ],
          "type": "string"
        },
        "value": {
          "description": "Frequency of event",
          "enum": [
            "Disabled",
            "Individual",
            "Daily",
            "DailyAndIndividual",
            "Default"
          ],
          "type": "string"
        },
        "default_value": {
          "description": "Default frequency of event",
          "enum": [
            "Disabled",
            "Individual",
            "Daily",
            "DailyAndIndividual"
          ],
          "type": "string"
        }
      }
    },
    "AlertingEvent": {
      "description": "Alerting event",
      "required": [
        "event_id",
        "event_timestamp"
      ],
      "type": "object",
      "properties": {
        "event_timestamp": {
          "description": "ISO 8601 date time when event was generated",
          "type": "string"
        },
        "event_id": {
          "description": "A unique identifier for this event instance. Useful for deduplication",
          "type": "string"
        },
        "properties": {
          "description": "Obsolete. Use emailProperties.",
          "type": "object"
        }
      }
    },
    "NewCrashGroupAlertingEvent": {
      "description": "New crash group alerting event",
      "allOf": [
        {
          "description": "Alerting event",
          "required": [
            "event_id",
            "event_timestamp"
          ],
          "type": "object",
          "properties": {
            "event_timestamp": {
              "description": "ISO 8601 date time when event was generated",
              "type": "string"
            },
            "event_id": {
              "description": "A unique identifier for this event instance. Useful for deduplication",
              "type": "string"
            },
            "properties": {
              "description": "Obsolete. Use emailProperties.",
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "crash_group_properties": {
              "description": "Properties of new crash group",
              "required": [
                "id",
                "name",
                "reason",
                "url",
                "app_display_name",
                "app_platform",
                "app_version",
                "stack_trace"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "reason": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "app_display_name": {
                  "type": "string"
                },
                "app_platform": {
                  "type": "string"
                },
                "app_version": {
                  "type": "string"
                },
                "stack_trace": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "NewAppReleaseAlertingEvent": {
      "description": "New app release alerting event",
      "allOf": [
        {
          "description": "Alerting event",
          "required": [
            "event_id",
            "event_timestamp"
          ],
          "type": "object",
          "properties": {
            "event_timestamp": {
              "description": "ISO 8601 date time when event was generated",
              "type": "string"
            },
            "event_id": {
              "description": "A unique identifier for this event instance. Useful for deduplication",
              "type": "string"
            },
            "properties": {
              "description": "Obsolete. Use emailProperties.",
              "type": "object"
            }
          }
        },
        {
          "properties": {
            "user_ids": {
              "description": "List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "disable_webhook": {
              "description": "indicate whether notify via webhook or not",
              "type": "boolean"
            },
            "app_release_properties": {
              "description": "Properties of new application release",
              "required": [
                "app_name",
                "app_display_name",
                "release_id",
                "platform",
                "uploaded_at",
                "version",
                "short_version",
                "size",
                "bundle_identifier",
                "install_link"
              ],
              "type": "object",
              "properties": {
                "app_name": {
                  "type": "string"
                },
                "app_display_name": {
                  "type": "string"
                },
                "release_id": {
                  "type": "string"
                },
                "platform": {
                  "type": "string"
                },
                "uploaded_at": {
                  "description": "Date and time in ISO 8601 format",
                  "type": "string"
                },
                "fingerprint": {
                  "type": "string"
                },
                "release_notes": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "short_version": {
                  "type": "string"
                },
                "min_os": {
                  "type": "string"
                },
                "mandatory_update": {
                  "type": "boolean"
                },
                "size": {
                  "type": "integer"
                },
                "provisioning_profile_name": {
                  "type": "string"
                },
                "provisioning_profile_type": {
                  "type": "string"
                },
                "bundle_identifier": {
                  "type": "string"
                },
                "install_link": {
                  "type": "string"
                },
                "icon_link": {
                  "type": "string"
                },
                "distribution_group_id": {
                  "type": "string"
                },
                "installable": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      ]
    },
    "BugTrackerIssuesResult": {
      "description": "Returns a list of all issues associated with a repo",
      "properties": {
        "issues": {
          "type": "array",
          "items": {
            "description": "Object returned in response to getting a bug tracker issue related to a crash group id",
            "properties": {
              "id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "bug_tracker_type": {
                "enum": [
                  "github",
                  "vsts",
                  "jira"
                ],
                "type": "string"
              },
              "repo_name": {
                "type": "string"
              },
              "mobile_center_id": {
                "type": "string"
              },
              "event_type": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "BugTrackerIssueResult": {
      "description": "Object returned in response to getting a bug tracker issue related to a crash group id",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "bug_tracker_type": {
          "enum": [
            "github",
            "vsts",
            "jira"
          ],
          "type": "string"
        },
        "repo_name": {
          "type": "string"
        },
        "mobile_center_id": {
          "type": "string"
        },
        "event_type": {
          "type": "string"
        }
      }
    },
    "BugTrackerStateResult": {
      "description": "Object returned in response to getting or updating the state of a bugtracker",
      "properties": {
        "state": {
          "description": "bugtracker state",
          "enum": [
            "enabled",
            "disabled",
            "unauthorized"
          ],
          "type": "string"
        }
      }
    },
    "EventResponseResult": {
      "description": "Object returned in response to accepting an event occurance",
      "allOf": [
        {
          "description": "Generic result for any alerting API operation",
          "required": [
            "request_id"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "description": "Unique request identifier for tracking",
              "type": "string"
            }
          }
        }
      ]
    },
    "AlertingError": {
      "description": "Alerting service error",
      "allOf": [
        {
          "description": "Generic result for any alerting API operation",
          "required": [
            "request_id"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "description": "Unique request identifier for tracking",
              "type": "string"
            }
          }
        },
        {
          "required": [
            "code"
          ],
          "properties": {
            "code": {
              "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
              "enum": [
                400,
                404,
                409,
                500
              ],
              "type": "integer"
            },
            "message": {
              "description": "The reason for the request failed",
              "type": "string"
            }
          }
        }
      ]
    },
    "AggregatedBillingInformation": {
      "description": "Aggregated Billing Information for a user or an organization",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the Billing Information schema",
          "type": "string"
        },
        "timestamp": {
          "format": "dateTime",
          "description": "The ISO 8601 datetime of last modification",
          "type": "string"
        },
        "id": {
          "description": "ID of the user or organization",
          "type": "string"
        },
        "billingPlans": {
          "description": "Billing Plans section in the Billing Information",
          "type": "object",
          "properties": {
            "buildService": {
              "description": "Billing Plans for a single service",
              "type": "object",
              "properties": {
                "canSelectTrialPlan": {
                  "description": "Can customer select trial plan for that service (if it exists)?",
                  "type": "boolean"
                },
                "lastTrialPlanExpirationTime": {
                  "format": "dateTime",
                  "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                  "type": "string"
                },
                "currentBillingPeriod": {
                  "description": "Billing plans for a given period",
                  "properties": {
                    "startTime": {
                      "format": "dateTime",
                      "description": "Inclusive start of the period",
                      "type": "string"
                    },
                    "endTime": {
                      "format": "dateTime",
                      "description": "Exclusive end of the period.",
                      "type": "string"
                    },
                    "byAccount": {
                      "description": "Selection of a billing plan",
                      "properties": {
                        "count": {
                          "description": "Number of instances of the billing plan.",
                          "type": "integer"
                        },
                        "plan": {
                          "description": "Billing Plan",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The Billing Plan ID",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version of the Billing Plan schema",
                              "type": "string"
                            },
                            "price": {
                              "description": "Price of the Billing Plan",
                              "type": "number"
                            },
                            "paymentSource": {
                              "description": "Service that receives payments for this billing plan.",
                              "enum": [
                                "None",
                                "AppCenter",
                                "GitHub",
                                "Xtc"
                              ],
                              "type": "string"
                            },
                            "service": {
                              "description": "Name of the service that the plan applies to.",
                              "enum": [
                                "Build",
                                "Test"
                              ],
                              "type": "string"
                            },
                            "limits": {
                              "description": "A collection of named numeric values",
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "attributes": {
                              "description": "Collection of attribute values.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "object"
                              }
                            },
                            "parentId": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "testService": {
              "description": "Billing Plans for a single service",
              "type": "object",
              "properties": {
                "canSelectTrialPlan": {
                  "description": "Can customer select trial plan for that service (if it exists)?",
                  "type": "boolean"
                },
                "lastTrialPlanExpirationTime": {
                  "format": "dateTime",
                  "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                  "type": "string"
                },
                "currentBillingPeriod": {
                  "description": "Billing plans for a given period",
                  "properties": {
                    "startTime": {
                      "format": "dateTime",
                      "description": "Inclusive start of the period",
                      "type": "string"
                    },
                    "endTime": {
                      "format": "dateTime",
                      "description": "Exclusive end of the period.",
                      "type": "string"
                    },
                    "byAccount": {
                      "description": "Selection of a billing plan",
                      "properties": {
                        "count": {
                          "description": "Number of instances of the billing plan.",
                          "type": "integer"
                        },
                        "plan": {
                          "description": "Billing Plan",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The Billing Plan ID",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version of the Billing Plan schema",
                              "type": "string"
                            },
                            "price": {
                              "description": "Price of the Billing Plan",
                              "type": "number"
                            },
                            "paymentSource": {
                              "description": "Service that receives payments for this billing plan.",
                              "enum": [
                                "None",
                                "AppCenter",
                                "GitHub",
                                "Xtc"
                              ],
                              "type": "string"
                            },
                            "service": {
                              "description": "Name of the service that the plan applies to.",
                              "enum": [
                                "Build",
                                "Test"
                              ],
                              "type": "string"
                            },
                            "limits": {
                              "description": "A collection of named numeric values",
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "attributes": {
                              "description": "Collection of attribute values.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "object"
                              }
                            },
                            "parentId": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "usage": {
          "description": "Usage section in the Billing Information",
          "type": "object",
          "properties": {
            "buildService": {
              "description": "Resource usage for a single Mobile Center service",
              "type": "object",
              "properties": {
                "currentUsagePeriod": {
                  "description": "Usage for a single period",
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "format": "dateTime",
                      "description": "Inclusive start time of the usage period",
                      "type": "string"
                    },
                    "endTime": {
                      "format": "dateTime",
                      "description": "Exclusive end time of the usage period.",
                      "type": "string"
                    },
                    "byAccount": {
                      "description": "A collection of named numeric values",
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "byApp": {
                      "description": "A collection of  named numeric values grouped by app",
                      "type": "object",
                      "additionalProperties": {
                        "description": "A collection of named numeric values",
                        "type": "object",
                        "additionalProperties": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "testService": {
              "description": "Resource usage for a single Mobile Center service",
              "type": "object",
              "properties": {
                "currentUsagePeriod": {
                  "description": "Usage for a single period",
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "format": "dateTime",
                      "description": "Inclusive start time of the usage period",
                      "type": "string"
                    },
                    "endTime": {
                      "format": "dateTime",
                      "description": "Exclusive end time of the usage period.",
                      "type": "string"
                    },
                    "byAccount": {
                      "description": "A collection of named numeric values",
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "byApp": {
                      "description": "A collection of  named numeric values grouped by app",
                      "type": "object",
                      "additionalProperties": {
                        "description": "A collection of named numeric values",
                        "type": "object",
                        "additionalProperties": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "azureSubscriptionId": {
          "description": "Unique identifier for the Azure subscription used for billing",
          "type": "string"
        },
        "azureSubscriptionState": {
          "description": "State of the Azure subscription used for billing",
          "enum": [
            "Enabled",
            "Disabled",
            "NotSet"
          ],
          "type": "string"
        }
      }
    },
    "AllAccountsAggregatedBillingInformation": {
      "description": "Aggregated Billing Information for a user an the organizations in which the user is an admin.",
      "type": "object",
      "properties": {
        "aggregatedBillings": {
          "description": "Aggregated Billing Information for a user or an organization",
          "type": "object",
          "properties": {
            "version": {
              "description": "Version of the Billing Information schema",
              "type": "string"
            },
            "timestamp": {
              "format": "dateTime",
              "description": "The ISO 8601 datetime of last modification",
              "type": "string"
            },
            "id": {
              "description": "ID of the user or organization",
              "type": "string"
            },
            "billingPlans": {
              "description": "Billing Plans section in the Billing Information",
              "type": "object",
              "properties": {
                "buildService": {
                  "description": "Billing Plans for a single service",
                  "type": "object",
                  "properties": {
                    "canSelectTrialPlan": {
                      "description": "Can customer select trial plan for that service (if it exists)?",
                      "type": "boolean"
                    },
                    "lastTrialPlanExpirationTime": {
                      "format": "dateTime",
                      "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                      "type": "string"
                    },
                    "currentBillingPeriod": {
                      "description": "Billing plans for a given period",
                      "properties": {
                        "startTime": {
                          "format": "dateTime",
                          "description": "Inclusive start of the period",
                          "type": "string"
                        },
                        "endTime": {
                          "format": "dateTime",
                          "description": "Exclusive end of the period.",
                          "type": "string"
                        },
                        "byAccount": {
                          "description": "Selection of a billing plan",
                          "properties": {
                            "count": {
                              "description": "Number of instances of the billing plan.",
                              "type": "integer"
                            },
                            "plan": {
                              "description": "Billing Plan",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The Billing Plan ID",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the Billing Plan schema",
                                  "type": "string"
                                },
                                "price": {
                                  "description": "Price of the Billing Plan",
                                  "type": "number"
                                },
                                "paymentSource": {
                                  "description": "Service that receives payments for this billing plan.",
                                  "enum": [
                                    "None",
                                    "AppCenter",
                                    "GitHub",
                                    "Xtc"
                                  ],
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Name of the service that the plan applies to.",
                                  "enum": [
                                    "Build",
                                    "Test"
                                  ],
                                  "type": "string"
                                },
                                "limits": {
                                  "description": "A collection of named numeric values",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "number"
                                  }
                                },
                                "attributes": {
                                  "description": "Collection of attribute values.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object"
                                  }
                                },
                                "parentId": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "testService": {
                  "description": "Billing Plans for a single service",
                  "type": "object",
                  "properties": {
                    "canSelectTrialPlan": {
                      "description": "Can customer select trial plan for that service (if it exists)?",
                      "type": "boolean"
                    },
                    "lastTrialPlanExpirationTime": {
                      "format": "dateTime",
                      "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                      "type": "string"
                    },
                    "currentBillingPeriod": {
                      "description": "Billing plans for a given period",
                      "properties": {
                        "startTime": {
                          "format": "dateTime",
                          "description": "Inclusive start of the period",
                          "type": "string"
                        },
                        "endTime": {
                          "format": "dateTime",
                          "description": "Exclusive end of the period.",
                          "type": "string"
                        },
                        "byAccount": {
                          "description": "Selection of a billing plan",
                          "properties": {
                            "count": {
                              "description": "Number of instances of the billing plan.",
                              "type": "integer"
                            },
                            "plan": {
                              "description": "Billing Plan",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The Billing Plan ID",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version of the Billing Plan schema",
                                  "type": "string"
                                },
                                "price": {
                                  "description": "Price of the Billing Plan",
                                  "type": "number"
                                },
                                "paymentSource": {
                                  "description": "Service that receives payments for this billing plan.",
                                  "enum": [
                                    "None",
                                    "AppCenter",
                                    "GitHub",
                                    "Xtc"
                                  ],
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Name of the service that the plan applies to.",
                                  "enum": [
                                    "Build",
                                    "Test"
                                  ],
                                  "type": "string"
                                },
                                "limits": {
                                  "description": "A collection of named numeric values",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "number"
                                  }
                                },
                                "attributes": {
                                  "description": "Collection of attribute values.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object"
                                  }
                                },
                                "parentId": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "usage": {
              "description": "Usage section in the Billing Information",
              "type": "object",
              "properties": {
                "buildService": {
                  "description": "Resource usage for a single Mobile Center service",
                  "type": "object",
                  "properties": {
                    "currentUsagePeriod": {
                      "description": "Usage for a single period",
                      "type": "object",
                      "properties": {
                        "startTime": {
                          "format": "dateTime",
                          "description": "Inclusive start time of the usage period",
                          "type": "string"
                        },
                        "endTime": {
                          "format": "dateTime",
                          "description": "Exclusive end time of the usage period.",
                          "type": "string"
                        },
                        "byAccount": {
                          "description": "A collection of named numeric values",
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "byApp": {
                          "description": "A collection of  named numeric values grouped by app",
                          "type": "object",
                          "additionalProperties": {
                            "description": "A collection of named numeric values",
                            "type": "object",
                            "additionalProperties": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "testService": {
                  "description": "Resource usage for a single Mobile Center service",
                  "type": "object",
                  "properties": {
                    "currentUsagePeriod": {
                      "description": "Usage for a single period",
                      "type": "object",
                      "properties": {
                        "startTime": {
                          "format": "dateTime",
                          "description": "Inclusive start time of the usage period",
                          "type": "string"
                        },
                        "endTime": {
                          "format": "dateTime",
                          "description": "Exclusive end time of the usage period.",
                          "type": "string"
                        },
                        "byAccount": {
                          "description": "A collection of named numeric values",
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "byApp": {
                          "description": "A collection of  named numeric values grouped by app",
                          "type": "object",
                          "additionalProperties": {
                            "description": "A collection of named numeric values",
                            "type": "object",
                            "additionalProperties": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "azureSubscriptionId": {
              "description": "Unique identifier for the Azure subscription used for billing",
              "type": "string"
            },
            "azureSubscriptionState": {
              "description": "State of the Azure subscription used for billing",
              "enum": [
                "Enabled",
                "Disabled",
                "NotSet"
              ],
              "type": "string"
            }
          }
        }
      }
    },
    "AttributesValues": {
      "description": "Collection of attribute values.",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "BillingError": {
      "description": "Error",
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": {
              "description": "The status code return by the API. It can be 400 or 403 or 500.",
              "enum": [
                400,
                403,
                500
              ],
              "type": "integer"
            },
            "message": {
              "description": "The reason for the request failed",
              "type": "string"
            }
          }
        }
      }
    },
    "BillingInformationPlans": {
      "description": "Billing Plans section in the Billing Information",
      "type": "object",
      "properties": {
        "buildService": {
          "description": "Billing Plans for a single service",
          "type": "object",
          "properties": {
            "canSelectTrialPlan": {
              "description": "Can customer select trial plan for that service (if it exists)?",
              "type": "boolean"
            },
            "lastTrialPlanExpirationTime": {
              "format": "dateTime",
              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
              "type": "string"
            },
            "currentBillingPeriod": {
              "description": "Billing plans for a given period",
              "properties": {
                "startTime": {
                  "format": "dateTime",
                  "description": "Inclusive start of the period",
                  "type": "string"
                },
                "endTime": {
                  "format": "dateTime",
                  "description": "Exclusive end of the period.",
                  "type": "string"
                },
                "byAccount": {
                  "description": "Selection of a billing plan",
                  "properties": {
                    "count": {
                      "description": "Number of instances of the billing plan.",
                      "type": "integer"
                    },
                    "plan": {
                      "description": "Billing Plan",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Billing Plan ID",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version of the Billing Plan schema",
                          "type": "string"
                        },
                        "price": {
                          "description": "Price of the Billing Plan",
                          "type": "number"
                        },
                        "paymentSource": {
                          "description": "Service that receives payments for this billing plan.",
                          "enum": [
                            "None",
                            "AppCenter",
                            "GitHub",
                            "Xtc"
                          ],
                          "type": "string"
                        },
                        "service": {
                          "description": "Name of the service that the plan applies to.",
                          "enum": [
                            "Build",
                            "Test"
                          ],
                          "type": "string"
                        },
                        "limits": {
                          "description": "A collection of named numeric values",
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "attributes": {
                          "description": "Collection of attribute values.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "object"
                          }
                        },
                        "parentId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "testService": {
          "description": "Billing Plans for a single service",
          "type": "object",
          "properties": {
            "canSelectTrialPlan": {
              "description": "Can customer select trial plan for that service (if it exists)?",
              "type": "boolean"
            },
            "lastTrialPlanExpirationTime": {
              "format": "dateTime",
              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
              "type": "string"
            },
            "currentBillingPeriod": {
              "description": "Billing plans for a given period",
              "properties": {
                "startTime": {
                  "format": "dateTime",
                  "description": "Inclusive start of the period",
                  "type": "string"
                },
                "endTime": {
                  "format": "dateTime",
                  "description": "Exclusive end of the period.",
                  "type": "string"
                },
                "byAccount": {
                  "description": "Selection of a billing plan",
                  "properties": {
                    "count": {
                      "description": "Number of instances of the billing plan.",
                      "type": "integer"
                    },
                    "plan": {
                      "description": "Billing Plan",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Billing Plan ID",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version of the Billing Plan schema",
                          "type": "string"
                        },
                        "price": {
                          "description": "Price of the Billing Plan",
                          "type": "number"
                        },
                        "paymentSource": {
                          "description": "Service that receives payments for this billing plan.",
                          "enum": [
                            "None",
                            "AppCenter",
                            "GitHub",
                            "Xtc"
                          ],
                          "type": "string"
                        },
                        "service": {
                          "description": "Name of the service that the plan applies to.",
                          "enum": [
                            "Build",
                            "Test"
                          ],
                          "type": "string"
                        },
                        "limits": {
                          "description": "A collection of named numeric values",
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "attributes": {
                          "description": "Collection of attribute values.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "object"
                          }
                        },
                        "parentId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BillingInformationSearchResults": {
      "description": "The results of a Billing Information search",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "accountId": {
            "format": "string",
            "description": "The Account ID",
            "type": "string"
          },
          "accountName": {
            "format": "string",
            "description": "The Account Name",
            "type": "string"
          },
          "billingInternalAccountId": {
            "format": "string",
            "description": "The Billing Internal Account ID",
            "type": "string"
          },
          "buildPlan": {
            "format": "string",
            "description": "The ID of the Build Billing Plan",
            "type": "string"
          },
          "testPlan": {
            "format": "string",
            "description": "The ID of the Test Billing Plan",
            "type": "string"
          }
        }
      }
    },
    "BillingPeriod": {
      "description": "Billing plans for a given period",
      "properties": {
        "startTime": {
          "format": "dateTime",
          "description": "Inclusive start of the period",
          "type": "string"
        },
        "endTime": {
          "format": "dateTime",
          "description": "Exclusive end of the period.",
          "type": "string"
        },
        "byAccount": {
          "description": "Selection of a billing plan",
          "properties": {
            "count": {
              "description": "Number of instances of the billing plan.",
              "type": "integer"
            },
            "plan": {
              "description": "Billing Plan",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The Billing Plan ID",
                  "type": "string"
                },
                "version": {
                  "description": "Version of the Billing Plan schema",
                  "type": "string"
                },
                "price": {
                  "description": "Price of the Billing Plan",
                  "type": "number"
                },
                "paymentSource": {
                  "description": "Service that receives payments for this billing plan.",
                  "enum": [
                    "None",
                    "AppCenter",
                    "GitHub",
                    "Xtc"
                  ],
                  "type": "string"
                },
                "service": {
                  "description": "Name of the service that the plan applies to.",
                  "enum": [
                    "Build",
                    "Test"
                  ],
                  "type": "string"
                },
                "limits": {
                  "description": "A collection of named numeric values",
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                },
                "attributes": {
                  "description": "Collection of attribute values.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "parentId": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "BillingPlan": {
      "description": "Billing Plan",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Billing Plan ID",
          "type": "string"
        },
        "version": {
          "description": "Version of the Billing Plan schema",
          "type": "string"
        },
        "price": {
          "description": "Price of the Billing Plan",
          "type": "number"
        },
        "paymentSource": {
          "description": "Service that receives payments for this billing plan.",
          "enum": [
            "None",
            "AppCenter",
            "GitHub",
            "Xtc"
          ],
          "type": "string"
        },
        "service": {
          "description": "Name of the service that the plan applies to.",
          "enum": [
            "Build",
            "Test"
          ],
          "type": "string"
        },
        "limits": {
          "description": "A collection of named numeric values",
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "attributes": {
          "description": "Collection of attribute values.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "parentId": {
          "type": "string"
        }
      }
    },
    "BillingPlansChangeTypeResponse": {
      "description": "Responses for requests that detect billing plans change type",
      "properties": {
        "result": {
          "enum": [
            "NoChange",
            "Downgrade",
            "Upgrade"
          ],
          "type": "string"
        }
      }
    },
    "BillingPlanSelection": {
      "description": "Selection of a billing plan",
      "properties": {
        "count": {
          "description": "Number of instances of the billing plan.",
          "type": "integer"
        },
        "plan": {
          "description": "Billing Plan",
          "type": "object",
          "properties": {
            "id": {
              "description": "The Billing Plan ID",
              "type": "string"
            },
            "version": {
              "description": "Version of the Billing Plan schema",
              "type": "string"
            },
            "price": {
              "description": "Price of the Billing Plan",
              "type": "number"
            },
            "paymentSource": {
              "description": "Service that receives payments for this billing plan.",
              "enum": [
                "None",
                "AppCenter",
                "GitHub",
                "Xtc"
              ],
              "type": "string"
            },
            "service": {
              "description": "Name of the service that the plan applies to.",
              "enum": [
                "Build",
                "Test"
              ],
              "type": "string"
            },
            "limits": {
              "description": "A collection of named numeric values",
              "type": "object",
              "additionalProperties": {
                "type": "number"
              }
            },
            "attributes": {
              "description": "Collection of attribute values.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "parentId": {
              "type": "string"
            }
          }
        }
      }
    },
    "BillingPlansSelection": {
      "description": "Selection of a billing plan for one or more services",
      "properties": {
        "buildService": {
          "description": "Selection of a billing plan",
          "properties": {
            "count": {
              "description": "Number of instances of the billing plan.",
              "type": "integer"
            },
            "plan": {
              "description": "Billing Plan",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The Billing Plan ID",
                  "type": "string"
                },
                "version": {
                  "description": "Version of the Billing Plan schema",
                  "type": "string"
                },
                "price": {
                  "description": "Price of the Billing Plan",
                  "type": "number"
                },
                "paymentSource": {
                  "description": "Service that receives payments for this billing plan.",
                  "enum": [
                    "None",
                    "AppCenter",
                    "GitHub",
                    "Xtc"
                  ],
                  "type": "string"
                },
                "service": {
                  "description": "Name of the service that the plan applies to.",
                  "enum": [
                    "Build",
                    "Test"
                  ],
                  "type": "string"
                },
                "limits": {
                  "description": "A collection of named numeric values",
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                },
                "attributes": {
                  "description": "Collection of attribute values.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "parentId": {
                  "type": "string"
                }
              }
            }
          }
        },
        "testService": {
          "description": "Selection of a billing plan",
          "properties": {
            "count": {
              "description": "Number of instances of the billing plan.",
              "type": "integer"
            },
            "plan": {
              "description": "Billing Plan",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The Billing Plan ID",
                  "type": "string"
                },
                "version": {
                  "description": "Version of the Billing Plan schema",
                  "type": "string"
                },
                "price": {
                  "description": "Price of the Billing Plan",
                  "type": "number"
                },
                "paymentSource": {
                  "description": "Service that receives payments for this billing plan.",
                  "enum": [
                    "None",
                    "AppCenter",
                    "GitHub",
                    "Xtc"
                  ],
                  "type": "string"
                },
                "service": {
                  "description": "Name of the service that the plan applies to.",
                  "enum": [
                    "Build",
                    "Test"
                  ],
                  "type": "string"
                },
                "limits": {
                  "description": "A collection of named numeric values",
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                },
                "attributes": {
                  "description": "Collection of attribute values.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                },
                "parentId": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "BillingResourceUsage": {
      "description": "Usage section in the Billing Information",
      "type": "object",
      "properties": {
        "buildService": {
          "description": "Resource usage for a single Mobile Center service",
          "type": "object",
          "properties": {
            "currentUsagePeriod": {
              "description": "Usage for a single period",
              "type": "object",
              "properties": {
                "startTime": {
                  "format": "dateTime",
                  "description": "Inclusive start time of the usage period",
                  "type": "string"
                },
                "endTime": {
                  "format": "dateTime",
                  "description": "Exclusive end time of the usage period.",
                  "type": "string"
                },
                "byAccount": {
                  "description": "A collection of named numeric values",
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                },
                "byApp": {
                  "description": "A collection of  named numeric values grouped by app",
                  "type": "object",
                  "additionalProperties": {
                    "description": "A collection of named numeric values",
                    "type": "object",
                    "additionalProperties": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "testService": {
          "description": "Resource usage for a single Mobile Center service",
          "type": "object",
          "properties": {
            "currentUsagePeriod": {
              "description": "Usage for a single period",
              "type": "object",
              "properties": {
                "startTime": {
                  "format": "dateTime",
                  "description": "Inclusive start time of the usage period",
                  "type": "string"
                },
                "endTime": {
                  "format": "dateTime",
                  "description": "Exclusive end time of the usage period.",
                  "type": "string"
                },
                "byAccount": {
                  "description": "A collection of named numeric values",
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                },
                "byApp": {
                  "description": "A collection of  named numeric values grouped by app",
                  "type": "object",
                  "additionalProperties": {
                    "description": "A collection of named numeric values",
                    "type": "object",
                    "additionalProperties": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "GdprVerificationResult": {
      "description": "GDPR tests verification result",
      "type": "object",
      "properties": {
        "status": {
          "description": "Verification status. True means that the verification was successfull.",
          "type": "boolean"
        },
        "message": {
          "description": "Optional error message if the verification failed.",
          "type": "string"
        }
      }
    },
    "GitHubAccount": {
      "description": "GitHub account information",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of GitHub account",
          "type": "integer"
        },
        "accountType": {
          "description": "Type of GitHub account",
          "enum": [
            "User",
            "Organization"
          ],
          "type": "string"
        }
      }
    },
    "GitHubMarketplacePlan": {
      "description": "GitHub Marketplace plan",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the GitHub plan",
          "type": "integer"
        }
      }
    },
    "GitHubMarketplacePurchase": {
      "description": "GitHub Marketplace purchase",
      "type": "object",
      "properties": {
        "account": {
          "description": "GitHub account information",
          "type": "object",
          "properties": {
            "id": {
              "description": "Id of GitHub account",
              "type": "integer"
            },
            "accountType": {
              "description": "Type of GitHub account",
              "enum": [
                "User",
                "Organization"
              ],
              "type": "string"
            }
          }
        },
        "plan": {
          "description": "GitHub Marketplace plan",
          "type": "object",
          "properties": {
            "id": {
              "description": "Id of the GitHub plan",
              "type": "integer"
            }
          }
        }
      }
    },
    "MetricsValues": {
      "description": "A collection of named numeric values",
      "type": "object",
      "additionalProperties": {
        "type": "number"
      }
    },
    "MetricsValuesByApp": {
      "description": "A collection of  named numeric values grouped by app",
      "type": "object",
      "additionalProperties": {
        "description": "A collection of named numeric values",
        "type": "object",
        "additionalProperties": {
          "type": "number"
        }
      }
    },
    "ServiceBillingPlans": {
      "description": "Billing Plans for a single service",
      "type": "object",
      "properties": {
        "canSelectTrialPlan": {
          "description": "Can customer select trial plan for that service (if it exists)?",
          "type": "boolean"
        },
        "lastTrialPlanExpirationTime": {
          "format": "dateTime",
          "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
          "type": "string"
        },
        "currentBillingPeriod": {
          "description": "Billing plans for a given period",
          "properties": {
            "startTime": {
              "format": "dateTime",
              "description": "Inclusive start of the period",
              "type": "string"
            },
            "endTime": {
              "format": "dateTime",
              "description": "Exclusive end of the period.",
              "type": "string"
            },
            "byAccount": {
              "description": "Selection of a billing plan",
              "properties": {
                "count": {
                  "description": "Number of instances of the billing plan.",
                  "type": "integer"
                },
                "plan": {
                  "description": "Billing Plan",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The Billing Plan ID",
                      "type": "string"
                    },
                    "version": {
                      "description": "Version of the Billing Plan schema",
                      "type": "string"
                    },
                    "price": {
                      "description": "Price of the Billing Plan",
                      "type": "number"
                    },
                    "paymentSource": {
                      "description": "Service that receives payments for this billing plan.",
                      "enum": [
                        "None",
                        "AppCenter",
                        "GitHub",
                        "Xtc"
                      ],
                      "type": "string"
                    },
                    "service": {
                      "description": "Name of the service that the plan applies to.",
                      "enum": [
                        "Build",
                        "Test"
                      ],
                      "type": "string"
                    },
                    "limits": {
                      "description": "A collection of named numeric values",
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "attributes": {
                      "description": "Collection of attribute values.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "object"
                      }
                    },
                    "parentId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ServiceResourceUsage": {
      "description": "Resource usage for a single Mobile Center service",
      "type": "object",
      "properties": {
        "currentUsagePeriod": {
          "description": "Usage for a single period",
          "type": "object",
          "properties": {
            "startTime": {
              "format": "dateTime",
              "description": "Inclusive start time of the usage period",
              "type": "string"
            },
            "endTime": {
              "format": "dateTime",
              "description": "Exclusive end time of the usage period.",
              "type": "string"
            },
            "byAccount": {
              "description": "A collection of named numeric values",
              "type": "object",
              "additionalProperties": {
                "type": "number"
              }
            },
            "byApp": {
              "description": "A collection of  named numeric values grouped by app",
              "type": "object",
              "additionalProperties": {
                "description": "A collection of named numeric values",
                "type": "object",
                "additionalProperties": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "UsagePeriod": {
      "description": "Usage for a single period",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "dateTime",
          "description": "Inclusive start time of the usage period",
          "type": "string"
        },
        "endTime": {
          "format": "dateTime",
          "description": "Exclusive end time of the usage period.",
          "type": "string"
        },
        "byAccount": {
          "description": "A collection of named numeric values",
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "byApp": {
          "description": "A collection of  named numeric values grouped by app",
          "type": "object",
          "additionalProperties": {
            "description": "A collection of named numeric values",
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      }
    },
    "UsageRecordStatus": {
      "description": "Status of the usage record creation",
      "type": "object",
      "properties": {
        "expectedLatestBuildExists": {
          "description": "Is the age of the most recent Build service usage record within expected limits",
          "type": "boolean"
        },
        "expectedLatestTestExists": {
          "description": "Is the age of the most recent Test service usage record within expected limits",
          "type": "boolean"
        },
        "latestBuildUsageRecordTime": {
          "format": "dateTime",
          "description": "The time of the most recent Build service usage record",
          "type": "string"
        },
        "latestTestUsageRecordTime": {
          "format": "dateTime",
          "description": "The time of the most recent Test service usage record",
          "type": "string"
        }
      }
    },
    "VersionedBillingPlan": {
      "description": "Billing Plan with a version",
      "type": "object",
      "properties": {
        "document": {
          "description": "Billing Plan",
          "type": "object",
          "properties": {
            "id": {
              "description": "The Billing Plan ID",
              "type": "string"
            },
            "version": {
              "description": "Version of the Billing Plan schema",
              "type": "string"
            },
            "price": {
              "description": "Price of the Billing Plan",
              "type": "number"
            },
            "paymentSource": {
              "description": "Service that receives payments for this billing plan.",
              "enum": [
                "None",
                "AppCenter",
                "GitHub",
                "Xtc"
              ],
              "type": "string"
            },
            "service": {
              "description": "Name of the service that the plan applies to.",
              "enum": [
                "Build",
                "Test"
              ],
              "type": "string"
            },
            "limits": {
              "description": "A collection of named numeric values",
              "type": "object",
              "additionalProperties": {
                "type": "number"
              }
            },
            "attributes": {
              "description": "Collection of attribute values.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "parentId": {
              "type": "string"
            }
          }
        },
        "etag": {
          "description": "The version of the object",
          "type": "string"
        }
      }
    },
    "MessageEnvelope": {
      "description": "Envelope for messages sent to actors",
      "type": "object",
      "properties": {
        "messageId": {
          "description": "Unique id of the message",
          "type": "string"
        },
        "messageType": {
          "description": "Type of the message",
          "type": "string"
        },
        "message": {
          "description": "Body of the message",
          "type": "object"
        }
      }
    },
    "DataSubjectRightCustomerIdRequest": {
      "type": "object",
      "properties": {
        "dataSubjectIdentifier": {
          "description": "customer account id (b2c identifier) / customer user id (free form text) depending on the value of the fied `type`",
          "type": "string"
        },
        "type": {
          "description": "type of the customer dataSubjectIdentifier",
          "enum": [
            "CustomerAccountId",
            "CustomerUserId"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CustomerIdentifierType",
            "modelAsString": false
          }
        }
      }
    },
    "DataSubjectRightEmailRequest": {
      "required": [
        "email"
      ],
      "type": "object",
      "properties": {
        "email": {
          "description": "Email used for cancel delete with x-authz-bypass headers",
          "type": "string"
        }
      }
    },
    "DataSubjectRightResponse": {
      "required": [
        "token",
        "createdAt"
      ],
      "type": "object",
      "properties": {
        "token": {
          "format": "uuid",
          "description": "Unique request identifier",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "ISO 8601 format timestamp of when request was created.",
          "type": "string"
        }
      }
    },
    "DataSubjectRightStatusResponse": {
      "required": [
        "status",
        "message"
      ],
      "type": "object",
      "properties": {
        "sasUrl": {
          "description": "Azure Storage shared access signature (SAS) URL for exported user data.",
          "type": "string"
        },
        "sasUrlExpired": {
          "description": "Whether Azure Storage shared access signature (SAS) URL has expired or not.",
          "type": "boolean"
        },
        "status": {
          "description": "Status of data subject right request",
          "enum": [
            "None",
            "Created",
            "Queued",
            "InProgress",
            "Completed",
            "Failed"
          ],
          "type": "string"
        },
        "message": {
          "description": "explanation message of the status",
          "type": "string"
        }
      }
    },
    "DataSubjectRightUpdateStatusOperation": {
      "required": [
        "requestId",
        "status"
      ],
      "type": "object",
      "properties": {
        "requestId": {
          "description": "Request identifier of the operation",
          "type": "string"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "None",
            "Created",
            "Queued",
            "InProgress",
            "Completed",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "OperationStatus",
            "modelAsString": false
          }
        },
        "participantData": {
          "description": "String field to be used by participant for any intermediate statuses or data they need to save",
          "type": "string"
        }
      }
    },
    "DataSubjectRightOperation": {
      "required": [
        "requestId",
        "operationId",
        "requestType",
        "status",
        "participant",
        "context"
      ],
      "type": "object",
      "properties": {
        "requestId": {
          "format": "uuid",
          "description": "Unique request identifier",
          "type": "string"
        },
        "operationId": {
          "format": "uuid",
          "description": "Unique operation identifier",
          "type": "string"
        },
        "requestType": {
          "description": "Request type",
          "enum": [
            "Unsupported",
            "Delete",
            "Purge",
            "UndoDelete",
            "Scheduled",
            "AppDelete",
            "AppPurge",
            "AppUndoDelete",
            "Export",
            "CustomerAccountDelete",
            "CustomerAccountExport",
            "CustomerUserDelete",
            "CustomerUserExport"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RequestType",
            "modelAsString": false
          }
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "None",
            "Created",
            "Queued",
            "InProgress",
            "Completed",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "OperationStatus",
            "modelAsString": false
          }
        },
        "participant": {
          "description": "Participant to execute the response",
          "type": "string"
        },
        "context": {
          "description": "JSON object decribing what to delete (TODO - make separate definition?)",
          "type": "string"
        },
        "appId": {
          "description": "Application identifier if applicable",
          "type": "string"
        },
        "participantData": {
          "description": "String field to be used by participant for any intermediate statuses or data they need to save",
          "type": "string"
        }
      }
    },
    "RequestType": {
      "description": "Request type",
      "enum": [
        "Unsupported",
        "Delete",
        "Purge",
        "UndoDelete",
        "Scheduled",
        "AppDelete",
        "AppPurge",
        "AppUndoDelete",
        "Export",
        "CustomerAccountDelete",
        "CustomerAccountExport",
        "CustomerUserDelete",
        "CustomerUserExport"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "RequestType",
        "modelAsString": false
      }
    },
    "OperationStatus": {
      "description": "Operation status",
      "enum": [
        "None",
        "Created",
        "Queued",
        "InProgress",
        "Completed",
        "Failed"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "OperationStatus",
        "modelAsString": false
      }
    },
    "DataSubjectRightQueueInfo": {
      "required": [
        "sasUri",
        "queueName",
        "expiresAt"
      ],
      "type": "object",
      "properties": {
        "sasUri": {
          "format": "uri",
          "type": "string"
        },
        "queueName": {
          "type": "string"
        },
        "expiresAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "DataSubjectRighBlobContainerInfo": {
      "required": [
        "sasUri",
        "blobPath"
      ],
      "type": "object",
      "properties": {
        "sasUri": {
          "type": "string"
        },
        "blobPath": {
          "type": "string"
        }
      }
    },
    "ClientIdResponse": {
      "description": "This response contains the Azure AD B2C client ID for an application.",
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        }
      }
    },
    "InnerError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "innererror": {
          "$ref": "#/definitions/InnerError"
        }
      }
    },
    "AuthTenantsResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "AuthTenant": {
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ApplicationsResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "signInAudience": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ApplicationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "signInAudience": {
          "type": "string"
        }
      }
    },
    "ScopesResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "appName": {
                "type": "string"
              },
              "scope": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ScopeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "AuthApplicationResponse": {
      "required": [
        "id",
        "provider"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "enum": [
            "AADB2C",
            "Auth0",
            "Firebase",
            "AAD"
          ],
          "type": "string"
        },
        "tenantId": {
          "format": "uuid",
          "type": "string"
        },
        "tenantName": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "scopeId": {
          "format": "uuid",
          "type": "string"
        },
        "scopeUrl": {
          "type": "string"
        },
        "signInAudience": {
          "type": "string"
        }
      }
    },
    "AuthApplicationPatchRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "scopeId": {
          "format": "uuid",
          "type": "string"
        },
        "scopeUrl": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "provider": {
          "enum": [
            "AADB2C",
            "Auth0",
            "Firebase",
            "AAD"
          ],
          "type": "string"
        }
      }
    },
    "ExistingAuthApplicationPostRequest": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "tenantId": {
          "format": "uuid",
          "type": "string"
        },
        "tenantName": {
          "type": "string"
        },
        "provider": {
          "enum": [
            "AADB2C",
            "Auth0",
            "Firebase",
            "AAD"
          ],
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "scopeId": {
          "format": "uuid",
          "type": "string"
        },
        "scopeUrl": {
          "type": "string"
        },
        "signInAudience": {
          "type": "string"
        }
      }
    },
    "TrustFrameworkPoliciesResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "TrustFrameworkPolicyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "MetricsResponse": {
      "type": "object",
      "properties": {
        "databaseLocation": {
          "enum": [
            "East Asia",
            "Southeast Asia",
            "Australia Central",
            "Australia Central 2",
            "Australia East",
            "Australia Southeast",
            "Brazil South",
            "Canada Central",
            "Canada East",
            "Central India",
            "South India",
            "West India",
            "North Europe",
            "West Europe",
            "France Central",
            "France South",
            "Germany Central",
            "Germany Northeast",
            "Japan East",
            "Japan West",
            "Korea Central",
            "Korea South",
            "South Africa North",
            "South Africa West",
            "UK South",
            "UK West",
            "Central US",
            "East US",
            "East US 2",
            "US Gov Arizona",
            "US Gov Texas",
            "North Central US",
            "South Central US",
            "West US",
            "West US 2",
            "West Central US"
          ],
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "databaseId": {
          "type": "string"
        },
        "metrics": {
          "description": "Represents database usage metrics.",
          "type": "object",
          "properties": {
            "interval": {
              "format": "int32",
              "type": "integer"
            },
            "totalRequests": {
              "format": "double",
              "type": "number"
            },
            "totalRequestUnits": {
              "format": "double",
              "type": "number"
            },
            "dataUsage": {
              "format": "double",
              "type": "number"
            },
            "indexUsage": {
              "format": "double",
              "type": "number"
            },
            "latencyMetrics": {
              "type": "object",
              "properties": {
                "readLatencyMetrics": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "unit": {
                      "type": "string"
                    },
                    "startTime": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "endTime": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "metricValues": {
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "average": {
                            "format": "float",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "writeLatencyMetrics": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "unit": {
                      "type": "string"
                    },
                    "startTime": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "endTime": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "metricValues": {
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "average": {
                            "format": "float",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "DatabaseMetrics": {
      "description": "Represents database usage metrics.",
      "type": "object",
      "properties": {
        "interval": {
          "format": "int32",
          "type": "integer"
        },
        "totalRequests": {
          "format": "double",
          "type": "number"
        },
        "totalRequestUnits": {
          "format": "double",
          "type": "number"
        },
        "dataUsage": {
          "format": "double",
          "type": "number"
        },
        "indexUsage": {
          "format": "double",
          "type": "number"
        },
        "latencyMetrics": {
          "type": "object",
          "properties": {
            "readLatencyMetrics": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                },
                "startTime": {
                  "format": "date-time",
                  "type": "string"
                },
                "endTime": {
                  "format": "date-time",
                  "type": "string"
                },
                "metricValues": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "average": {
                        "format": "float",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "writeLatencyMetrics": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                },
                "startTime": {
                  "format": "date-time",
                  "type": "string"
                },
                "endTime": {
                  "format": "date-time",
                  "type": "string"
                },
                "metricValues": {
                  "uniqueItems": false,
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "average": {
                        "format": "float",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "LatencyMetrics": {
      "type": "object",
      "properties": {
        "readLatencyMetrics": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "startTime": {
              "format": "date-time",
              "type": "string"
            },
            "endTime": {
              "format": "date-time",
              "type": "string"
            },
            "metricValues": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "average": {
                    "format": "float",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "writeLatencyMetrics": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "startTime": {
              "format": "date-time",
              "type": "string"
            },
            "endTime": {
              "format": "date-time",
              "type": "string"
            },
            "metricValues": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "average": {
                    "format": "float",
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "LatencyData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "metricValues": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": {
                "format": "date-time",
                "type": "string"
              },
              "average": {
                "format": "float",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "MetricsData": {
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "average": {
          "format": "float",
          "type": "number"
        }
      }
    },
    "OverviewResponse": {
      "type": "object",
      "properties": {
        "databaseLocation": {
          "enum": [
            "East Asia",
            "Southeast Asia",
            "Australia Central",
            "Australia Central 2",
            "Australia East",
            "Australia Southeast",
            "Brazil South",
            "Canada Central",
            "Canada East",
            "Central India",
            "South India",
            "West India",
            "North Europe",
            "West Europe",
            "France Central",
            "France South",
            "Germany Central",
            "Germany Northeast",
            "Japan East",
            "Japan West",
            "Korea Central",
            "Korea South",
            "South Africa North",
            "South Africa West",
            "UK South",
            "UK West",
            "Central US",
            "East US",
            "East US 2",
            "US Gov Arizona",
            "US Gov Texas",
            "North Central US",
            "South Central US",
            "West US",
            "West US 2",
            "West Central US"
          ],
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "databaseId": {
          "type": "string"
        },
        "throughput": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EstimatedPricingResponse": {
      "description": "This response contains an estimated price-per-RU denominated in a given currency.",
      "type": "object",
      "properties": {
        "pricePerHour": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "enum": [
            "USD",
            "EUR",
            "GBP",
            "AUD",
            "INR",
            "CAD",
            "ARS",
            "BRL",
            "DKK",
            "HKD",
            "IDR",
            "JPY",
            "KRW",
            "MYR",
            "MXN",
            "NZD",
            "NOK",
            "RUB",
            "SAR",
            "ZAR",
            "SEK",
            "CHF",
            "TWD",
            "TRY"
          ],
          "type": "string"
        }
      }
    },
    "DataInstancesResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DataInstance": {
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "InstanceDatabasesResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "InstanceDatabase": {
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DatabaseCollectionsResponse": {
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DatabaseCollection": {
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "NotificationConfiguration": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string"
        },
        "state": {
          "enum": [
            "Disabled",
            "Disabling",
            "Enabling",
            "Enabled"
          ],
          "type": "string"
        },
        "reason": {
          "enum": [
            "NotSetByUser",
            "SetByUser",
            "Error"
          ],
          "type": "string"
        }
      }
    },
    "DataResourceTokenResponse": {
      "type": "object",
      "properties": {
        "databaseId": {
          "type": "string"
        },
        "databaseName": {
          "type": "string"
        },
        "collectionName": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "expiresOn": {
          "format": "date-time",
          "type": "string"
        },
        "isReadOnlyToken": {
          "type": "boolean"
        }
      }
    },
    "UsersResponse": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "required": [
              "accountId",
              "displayName"
            ],
            "type": "object",
            "properties": {
              "accountId": {
                "format": "uuid",
                "type": "string"
              },
              "mail": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "UserResponse": {
      "required": [
        "accountId",
        "displayName"
      ],
      "type": "object",
      "properties": {
        "accountId": {
          "format": "uuid",
          "type": "string"
        },
        "mail": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "DataProvisioningParameters": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string"
        },
        "databaseConnectionString": {
          "type": "string"
        },
        "resourceRegion": {
          "enum": [
            "East Asia",
            "Southeast Asia",
            "Australia Central",
            "Australia Central 2",
            "Australia East",
            "Australia Southeast",
            "Brazil South",
            "Canada Central",
            "Canada East",
            "Central India",
            "South India",
            "West India",
            "North Europe",
            "West Europe",
            "France Central",
            "France South",
            "Germany Central",
            "Germany Northeast",
            "Japan East",
            "Japan West",
            "Korea Central",
            "Korea South",
            "South Africa North",
            "South Africa West",
            "UK South",
            "UK West",
            "Central US",
            "East US",
            "East US 2",
            "US Gov Arizona",
            "US Gov Texas",
            "North Central US",
            "South Central US",
            "West US",
            "West US 2",
            "West Central US"
          ],
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "collection": {
          "type": "string"
        },
        "requestUnits": {
          "format": "int64",
          "maximum": 2147483647,
          "minimum": 400,
          "type": "integer"
        },
        "accountName": {
          "type": "string"
        }
      }
    },
    "ProvisionStatusResponse": {
      "required": [
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "enum": [
            "Empty",
            "Accepted",
            "Creating",
            "Connected",
            "Invalid"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "CosmosDbCorsStatusResponse": {
      "description": "The Api response model for Cosmos Db Cors status",
      "required": [
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "enum": [
            "Appended",
            "HostDbInProgress",
            "HostDbNotFound",
            "Queued",
            "InProgress",
            "NotFound"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIToken": {
      "type": "apiKey",
      "name": "X-API-Token",
      "in": "header"
    },
    "Basic": {
      "type": "basic",
      "description": "HTTP Basic Authentication"
    }
  },
  "tags": [
    {
      "name": "account"
    },
    {
      "name": "build"
    },
    {
      "name": "distribute"
    },
    {
      "name": "crash"
    },
    {
      "name": "analytics"
    },
    {
      "name": "errors"
    },
    {
      "name": "export"
    },
    {
      "name": "push"
    },
    {
      "name": "test"
    },
    {
      "name": "codepush"
    },
    {
      "name": "alerting"
    },
    {
      "name": "billing"
    },
    {
      "name": "gdpr"
    },
    {
      "name": "mbaas"
    }
  ]
}